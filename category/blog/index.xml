<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog | Dr Tom Palmer</title>
    <link>https://remlapmot.github.io/category/blog/</link>
      <atom:link href="https://remlapmot.github.io/category/blog/index.xml" rel="self" type="application/rss+xml" />
    <description>Blog</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 31 Mar 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://remlapmot.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Blog</title>
      <link>https://remlapmot.github.io/category/blog/</link>
    </image>
    
    <item>
      <title>Creating a simple Automator app to launch a new instance of RStudio Desktop on macOS</title>
      <link>https://remlapmot.github.io/post/2024/macos-rstudio-another/</link>
      <pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/macos-rstudio-another/</guid>
      <description>


&lt;div id=&#34;introduction-how-to-open-a-second-instance-of-rstudio-desktop-on-macos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction: how to open a second instance of RStudio Desktop on macOS&lt;/h2&gt;
&lt;p&gt;On macOS when RStudio Desktop is open it can be inconvenient to open a second (or third or fourth) instance of it.&lt;/p&gt;
&lt;p&gt;If you left click the RStudio Desktop icon nothing happens. If you right click on the RStudio Desktop icon there is a convenient &lt;em&gt;New RStudio Window&lt;/em&gt;. The problem with this is that by default if you have an RStudio project open the new RStudio window is also opened in that project. However, that can be overcome by opening the RStudio preference pane and in the first tab (&lt;em&gt;General&lt;/em&gt; | &lt;em&gt;Basic&lt;/em&gt;) deselecting the boxes relating to &lt;em&gt;Restore most recently opened project at startup&lt;/em&gt; and &lt;em&gt;Restore previousy open source documents at startup&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/rstudio-preference-pane.png&#34; alt=&#34;Screenshot of RStudio Desktop preference pane.&#34; width=&#34;630&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/new-rstudio-window.png&#34; alt=&#34;Screenshot of right clicking on the RStudio Desktop icon in the dock.&#34; width=&#34;504&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, within RStudio Desktop we could select &lt;em&gt;File | Open Project…&lt;/em&gt; but I’ve never found that very intuitive and somehow I’ve never got used to using RStudio’s command palette.
If you have several directories configured as RStudio projects (with &lt;em&gt;.Rproj&lt;/em&gt; files) that you’ve opened before you could open those from the top right project drop down menu or double click them from within Finder.&lt;/p&gt;
&lt;p&gt;But let’s say we want an even more convenient way of doing this – an icon in the dock. Thanks to &lt;a href=&#34;https://stackoverflow.com/a/40673644&#34;&gt;this&lt;/a&gt; Stackoverflow answer, it turns out that in a terminal we can issue the following &lt;code&gt;open&lt;/code&gt; command to achieve opening a new instance of RStudio Desktop (note RStudio Desktop needs to be installed in your Applications directory for this to work).&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;open -n -a RStudio.app&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;making-an-automator-app-to-open-a-new-instance-of-rstudio-desktop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making an Automator app to open a new instance of RStudio Desktop&lt;/h2&gt;
&lt;p&gt;macOS comes with Automator, open that from your Applications directory.
Then select &lt;em&gt;File | New&lt;/em&gt; and select &lt;em&gt;Application&lt;/em&gt; and click &lt;em&gt;Choose&lt;/em&gt;.
Then from the left most menu select &lt;em&gt;Utilities&lt;/em&gt; and double click &lt;em&gt;Run Shell Script&lt;/em&gt;.
In the main window on the right, leave the shell as zsh and replace the &lt;code&gt;cat&lt;/code&gt; text in the box with the &lt;code&gt;open&lt;/code&gt; command above.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/automator-app.png&#34; alt=&#34;Screenshot of configuring the automator app to run a shell script to open a new instance of RStudio Desktop.&#34; width=&#34;992&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then press &lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt; or &lt;em&gt;File | Save&lt;/em&gt; and save your application in your Applications folder.
Give the app a distinct name such as &lt;em&gt;RStudio-new-instance.app&lt;/em&gt; or whatever you prefer and then quit Automator.&lt;/p&gt;
&lt;p&gt;Next we would like our app to have a nice icon.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First download a nice icon from say &lt;a href=&#34;https://github.com/amirmasoudabdol/rstudio-icons/tree/main/Icons/macOS/Rectangle&#34;&gt;this&lt;/a&gt; repo of logos kindly designed for RStudio (I chose the dark one).&lt;/li&gt;
&lt;li&gt;Then navigate to the our new app in Finder and press &lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;I&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;Then drag the &lt;em&gt;.icns&lt;/em&gt; file onto the icon in the top left corner of the info box.
And tada your app will now use this icon!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you can even drag the app from Finder onto your dock from where you can simply click the icon to open as many instances of RStudio Desktop as you like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;featured.png&#34; alt=&#34;Screenshot of our new app&#39;s icon in the dock.&#34; width=&#34;319&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And because the new application is in our Applications directory it is found by Alfred (and hopefully Raycast).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/alfred-launch-rstudio.png&#34; alt=&#34;Screenshot of using Alfred to launch RStudio Desktop.&#34; width=&#34;719&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have created an Automator application which runs a shell script to open a new instance of RStudio Desktop. We have then given this application a new icon and we have placed this on our dock.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes footnotes-end-of-document&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;I follow the approach detailed on &lt;a href=&#34;https://www.idownloadblog.com/2023/01/19/how-to-change-app-icons-mac/&#34;&gt;this&lt;/a&gt; blog and on the &lt;a href=&#34;https://github.com/amirmasoudabdol/rstudio-icons/tree/main?tab=readme-ov-file#usage&#34;&gt;README&lt;/a&gt; where I obtained the icon.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My #GitHubUnwrapped 2023!</title>
      <link>https://remlapmot.github.io/post/2024/github-unwrapped-2023/</link>
      <pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/github-unwrapped-2023/</guid>
      <description>


&lt;p&gt;My #GitHubUnwrapped 2023!&lt;/p&gt;
&lt;iframe src=&#34;https://drive.google.com/file/d/1bhdY7FPgmYJo_loqIChBJOZ8vdm2mEpA/preview&#34; width=&#34;640&#34; height=&#34;480&#34; allow=&#34;autoplay&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Made with &lt;a href=&#34;https://www.githubunwrapped.com/&#34; class=&#34;uri&#34;&gt;https://www.githubunwrapped.com/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fuller reproducibility in Stata ado-files and programs: setting the version and user version</title>
      <link>https://remlapmot.github.io/post/2023/stata-reproducibility/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2023/stata-reproducibility/</guid>
      <description>


&lt;p&gt;Most proficient Stata users have come across the &lt;code&gt;version&lt;/code&gt; command. This is an incredibly powerful command, which simply by issuing say&lt;/p&gt;
&lt;pre class=&#34;stata&#34;&gt;&lt;code&gt;version 18&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;at the top of a do-file or within a program (typically in an ado-file) means that you have pretty much guaranteed your code will run in the same way when you come to run it later (most likely in a newer version of Stata). But it turns out there’s a subtle difference between issuing &lt;code&gt;version&lt;/code&gt; in a do-file/interactively compared to within a program or ado-file.&lt;/p&gt;
&lt;p&gt;Several years ago I wrote the &lt;strong&gt;reffadjust&lt;/strong&gt; package &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-palmer-sj-2014&#34;&gt;Palmer et al. 2014&lt;/a&gt;)&lt;/span&gt; as part of some work using random effects models &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-mcdw-sim-2012&#34;&gt;Macdonald-Wallis et al. 2012&lt;/a&gt;)&lt;/span&gt;. It has two programs &lt;code&gt;reffadjustsim&lt;/code&gt; and &lt;code&gt;reffadjust4nlcom&lt;/code&gt; which use the output of various random effects commands, including those from MLwiN, run from Stata using the user-written &lt;code&gt;runmlwin&lt;/code&gt; command &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-leckie-jss-2013&#34;&gt;Leckie and Charlton 2013&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;reffadjust&lt;/strong&gt; package doesn’t have many users and over the years I hadn’t regularly checked if the programs were still working. But in the ado-files I had set &lt;code&gt;version 13&lt;/code&gt;, which gave me some residual confidence that the programs might still work.&lt;/p&gt;
&lt;p&gt;However, a few years ago, when I eventually did run some test code I saw that the &lt;code&gt;reffadjustsim&lt;/code&gt; tests were failing for MLwiN/&lt;code&gt;runmlwin&lt;/code&gt; models. I didn’t have time to investigate further at this point, and I didn’t have any intuition whether the error resulted from a change in MLwiN, &lt;code&gt;runmlwin&lt;/code&gt;, or Stata.&lt;/p&gt;
&lt;p&gt;At the beginning of this year one of my colleagues mentioned that they were using &lt;strong&gt;reffadjust&lt;/strong&gt; in their work and had observed the same error with &lt;code&gt;reffadjustsim&lt;/code&gt;. My guilt kicked in, and I eventually found some time to investigate. I discovered that since I wrote the package, Stata processes matrix row and column stripes (essentially the row and column names) in a more advanced way. This meant that the row and column stripes for covariance elements in the &lt;code&gt;e(V)&lt;/code&gt; matrix (the variance-covariance matrix of parameter estimates) from MLwiN/&lt;code&gt;runmlwin&lt;/code&gt; models were being renamed when I hadn’t intended them to be, which caused the error.&lt;/p&gt;
&lt;p&gt;But wait … I had specified &lt;code&gt;version 13&lt;/code&gt; at the top of my program, so why was this update in later versions of Stata taking effect?&lt;/p&gt;
&lt;p&gt;I couldn’t work it out, so I had to ask Stata Technical Support. They were kind enough to tell me that there’s an additional method of invoking the &lt;code&gt;version&lt;/code&gt; command which controls what is known as the “user version”. There are some modifications in new versions of Stata which are exempt from the basic invocation of the &lt;code&gt;version&lt;/code&gt; command (but only in programs and ado-files). In do-files issuing &lt;code&gt;version&lt;/code&gt; sets both the version and the user version, however, in programs and ado-files the “user version”, is set by &lt;code&gt;version #, user&lt;/code&gt;, and holds these additional modifications in Stata to the required version.&lt;/p&gt;
&lt;p&gt;Naturally, this is explained in the &lt;code&gt;version&lt;/code&gt; helpfile and &lt;a href=&#34;https://www.stata.com/manuals/pversion.pdf&#34;&gt;manual entry&lt;/a&gt;, which I admit I had not read until this point. Hence, simply editing the top of my program to&lt;/p&gt;
&lt;pre class=&#34;stata&#34;&gt;&lt;code&gt;version 13
version 13, user&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fixed my error. So in a program or ado-file, we require both lines, whereas in a do-file we’d only require &lt;code&gt;version 13&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can see the different operation of &lt;code&gt;version&lt;/code&gt; by the following short example.&lt;/p&gt;
&lt;pre class=&#34;stata&#34;&gt;&lt;code&gt;/* Do-file/interactive code to set both the version and the user version */
version 13
display c(version), c(userversion), c(stata_version)
// 13 13 17&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;stata&#34;&gt;&lt;code&gt;/* Ado-file/program code to set both the version and the user version */
program mytest
version 13
display c(version), c(userversion), c(stata_version)
version 13, user
display c(version), c(userversion), c(stata_version)
end

mytest
// 13 17 17
// 13 13 17&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In summary, my &lt;code&gt;reffadjustsim&lt;/code&gt; command works again for MLwiN/&lt;code&gt;runmlwin&lt;/code&gt; models. The updated version is available from &lt;a href=&#34;https://github.com/remlapmot/reffadjust&#34;&gt;its GitHub repo&lt;/a&gt;. And if you ever need &lt;em&gt;fuller&lt;/em&gt; reproducibility in your Stata ado-file or program remember to set both the version and the user version.&lt;/p&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2 unnumbered&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt;
&lt;div id=&#34;ref-leckie-jss-2013&#34; class=&#34;csl-entry&#34;&gt;
Leckie, George, and Chris Charlton. 2013. &lt;span&gt;“&lt;span class=&#34;nocase&#34;&gt;runmlwin: A Program to Run the MLwiN Multilevel Modeling Software from within Stata&lt;/span&gt;.”&lt;/span&gt; &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 52 (11): 1–40. &lt;a href=&#34;https://doi.org/10.18637/jss.v052.i11&#34;&gt;https://doi.org/10.18637/jss.v052.i11&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-mcdw-sim-2012&#34; class=&#34;csl-entry&#34;&gt;
Macdonald-Wallis, Corrie, Debbie A. Lawlor, Tom Palmer, and Kate Tilling. 2012. &lt;span&gt;“Multivariate Multilevel Spline Models for Parallel Growth Processes: Application to Weight and Mean Arterial Pressure in Pregnancy.”&lt;/span&gt; &lt;em&gt;Statistics in Medicine&lt;/em&gt; 31 (26): 3147–64. &lt;a href=&#34;https://doi.org/doi.org/10.1002/sim.5385&#34;&gt;https://doi.org/doi.org/10.1002/sim.5385&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-palmer-sj-2014&#34; class=&#34;csl-entry&#34;&gt;
Palmer, Tom M., Corrie M. Macdonald-Wallis, Debbie A. Lawlor, and Kate Tilling. 2014. &lt;span&gt;“&lt;span class=&#34;nocase&#34;&gt;Estimating adjusted associations between random effects from multilevel models: The reffadjust package&lt;/span&gt;.”&lt;/span&gt; &lt;em&gt;The Stata Journal&lt;/em&gt; 14 (1): 119–40. &lt;a href=&#34;https://doi.org/10.1177/1536867X1401400109&#34;&gt;https://doi.org/10.1177/1536867X1401400109&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My #GitHubUnwrapped 2022!</title>
      <link>https://remlapmot.github.io/post/2023/github-unwrapped-2022/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2023/github-unwrapped-2022/</guid>
      <description>


&lt;p&gt;My #GitHubUnwrapped 2022!&lt;/p&gt;
&lt;iframe src=&#34;https://drive.google.com/file/d/1VVoFQK5aUrgkCppcJXlDMoEPcCKVPW84/preview&#34; width=&#34;640&#34; height=&#34;480&#34; allow=&#34;autoplay&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Made with &lt;a href=&#34;https://www.githubunwrapped.com/&#34; class=&#34;uri&#34;&gt;https://www.githubunwrapped.com/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make your own CRAN-like repository with Linux binary R packages</title>
      <link>https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/</link>
      <pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;CRAN is a fantastic resource, in particular because it provides binary packages for Windows and macOS (for both Intel and Apple Silicon Macs). Because there are so many Linux distributions CRAN does not provide binary packages for Linux. Therefore, installing R packages on Linux can be slow because the bundled source packages need to be built on users machines.&lt;/p&gt;
&lt;p&gt;But let’s install a package from the Posit (formerly RStudio) Package Manager on Ubuntu Linux.
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-install-tidyverse-rspm-linux-binary.png&#34; alt=&#34;Installing binary Linux tidyverse package using Posit Package Manager.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Woah!&lt;/em&gt;&lt;/strong&gt; Something magical just happened, we installed a binary R package on Linux! How did that happen, let’s find out.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;building-bundled-source-and-binary-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Building bundled source and binary packages&lt;/h2&gt;
&lt;p&gt;I will use an example of one of my own packages &lt;strong&gt;OneSampleMR&lt;/strong&gt;. I am running RStudio server on Ubuntu Linux, Focal Fossa through Windows Subsystem for Linux.&lt;/p&gt;
&lt;p&gt;The package sources are in a Git repository hosted on GitHub, &lt;a href=&#34;https://github.com/remlapmot/OneSampleMR&#34;&gt;here&lt;/a&gt;. There is an &lt;code&gt;.Rproj&lt;/code&gt; file, which we open in RStudio as a project.&lt;/p&gt;
&lt;p&gt;To build an R package we require all of its dependency packages are installed, so we install those with &lt;code&gt;devtools::install_dev_deps()&lt;/code&gt; and if your package requires any system libraries those must be installed too.&lt;/p&gt;
&lt;p&gt;The Build pane gives us two convenient options, which will build either the bundled source package or binary package through calls to &lt;code&gt;devtools::build()&lt;/code&gt;.
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-build-pane-build-options.png&#34; alt=&#34;Screenshot of build pane options for building bundled source and binary packages.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Clicking on both in turn we see the following.
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-build-source-package.png&#34; alt=&#34;Screenshot of building a bundled source package in RStudio.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-build-binary-package.png&#34; alt=&#34;Screenshot of building a binary package in RStudio.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The bundled source package has been built as &lt;code&gt;OneSampleMR_0.1.2.tar.gz&lt;/code&gt; and the binary package has been built as &lt;code&gt;OneSampleMR_0.1.2_R_x86_64-pc-linux-gnu.tar.gz&lt;/code&gt;. Both files are in the directory above the project.&lt;/p&gt;
&lt;p&gt;We can achieve the same output by making direct calls to &lt;code&gt;R CMD build&lt;/code&gt; and &lt;code&gt;R CMD install --build&lt;/code&gt; in a shell if preferred. We can test that these install as follows.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-install-source-package.png&#34; alt=&#34;Screenshot of installing a bundled source package in RStudio.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-install-binary-package.png&#34; alt=&#34;Screenshot of installing a binary package in RStudio.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cran-structure-for-bundled-source-package-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;CRAN structure for bundled source package files&lt;/h2&gt;
&lt;p&gt;In two excellent blog posts Marks Sellors describes how to make a CRAN-like repository.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; There is also the &lt;a href=&#34;https://cran.r-project.org/package=miniCRAN&#34;&gt;&lt;strong&gt;miniCRAN&lt;/strong&gt;&lt;/a&gt; package to help do this, but we don’t need to use this for the following explanation.&lt;/p&gt;
&lt;p&gt;To host bundled source packages, such as our &lt;code&gt;OneSampleMR_0.1.2.tar.gz&lt;/code&gt; file, we require the following directory structure (noting that the &lt;code&gt;latest&lt;/code&gt; directory is optional, but allows us to add snapshot directories if we wanted to).
&lt;!-- # brew install tree --&gt;
&lt;!-- tree ~/Documents/GitHub/cran/site -d -I &#39;__linux__|bin&#39; --noreport --&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;/mycran
└── latest
    └── src
        └── contrib
            └── 4.3.0
                └── Recommended&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifically, we place the &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt; files into the &lt;code&gt;.../src/contrib&lt;/code&gt; directory. In that directory we then run&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tools::write_PACKAGES(type = &amp;quot;source&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which generates 3 additional files (&lt;code&gt;PACKAGES&lt;/code&gt;, &lt;code&gt;PACKAGES.gz&lt;/code&gt;, and &lt;code&gt;PACKAGES.rds&lt;/code&gt;) which R will use to query what packages are available in our repository when its served on the web.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-windows-and-macos-binary-r-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Adding Windows and macOS binary R packages&lt;/h2&gt;
&lt;p&gt;We saw above how to build a binary Linux package. The same process, when repeated on Windows will generate a file called &lt;code&gt;{package}_{version}.zip&lt;/code&gt; and &lt;code&gt;{package}_{version}.tgz&lt;/code&gt; on macOS (on Macs with both Intel and Apple Silicon processors).&lt;/p&gt;
&lt;p&gt;Assuming that we have some of these files we need to know where to put them. Since CRAN distributes binary packages for Windows and macOS we follow their directory structure, which is as follows.
&lt;!-- brew install tree --&gt;
&lt;!-- tree ~/Documents/GitHub/cran/site -d -I &#39;__linux__&#39; --noreport --&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;/mycran
└── latest
    ├── bin
    │   ├── macosx
    │   │   ├── big-sur-arm64
    │   │   │   └── contrib
    │   │   │       └── 4.2
    │   │   └── contrib
    │   │       └── 4.2
    │   └── windows
    │       └── contrib
    │           └── 4.2
    └── src
        └── contrib
            └── 4.3.0
                └── Recommended&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Noting that the current version of R is 4.2.2 and that the relevant directory name with the minor version number changes when R’s current minor version number changes, we place&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS arm64 binary packages (for Macs with Apple Silicon processors) into the &lt;code&gt;.../bin/macosx/big-sur-arm64/contrib/4.2/&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;macOS x86_64 binary packages (for Macs with Intel processors) into the &lt;code&gt;.../bin/macosx/contrib/4.2/&lt;/code&gt; directory, and&lt;/li&gt;
&lt;li&gt;Windows binary packages into the &lt;code&gt;.../bin/windows/contrib/4.2/&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We then run &lt;code&gt;tools::write_PACKAGES(type = &#34;mac.binary&#34;)&lt;/code&gt; (changing to &lt;code&gt;type = &#34;win.binary&#34;&lt;/code&gt; as required) in each of these directories to generate the 3 &lt;code&gt;PACKAGES&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;We can confirm this directory structure using the &lt;code&gt;contrib.url()&lt;/code&gt; function (the last command below was run on an Apple Silicon Mac).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;contrib.url(&amp;quot;&amp;quot;, type = &amp;quot;source&amp;quot;)
## [1] &amp;quot;/src/contrib&amp;quot;
contrib.url(&amp;quot;&amp;quot;, type = &amp;quot;win.binary&amp;quot;)
## [1] &amp;quot;/bin/windows/contrib/4.2&amp;quot;
contrib.url(&amp;quot;&amp;quot;, type = &amp;quot;mac.binary&amp;quot;)
## [1] &amp;quot;/bin/macosx/contrib/4.2&amp;quot;
contrib.url(&amp;quot;&amp;quot;, type = &amp;quot;binary&amp;quot;)
## [1] &amp;quot;/bin/macosx/big-sur-arm64/contrib/4.2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And they are also listed in the R Installation and Administration manual.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On Apple Silicon Macs the &lt;code&gt;big-sur-arm64&lt;/code&gt; filepath corresponds to the end of &lt;code&gt;.Platform$pkgType&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;.Platform$pkgType
## [1] &amp;quot;mac.binary.big-sur-arm64&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;where-to-store-and-how-to-name-linux-binary-r-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Where to store and how to name Linux binary R packages?&lt;/h2&gt;
&lt;p&gt;CRAN does not distribute Linux binary packages and so there is no directory structure from them to copy.&lt;/p&gt;
&lt;p&gt;However both the Posit Package Manager and the &lt;a href=&#34;https://r4pi.org/&#34;&gt;R4Pi&lt;/a&gt; project achieve this in a very clever way.&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We saw above that on Linux bundled source packages have filenames of the form &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt; whereas the binary package filenames are of the form &lt;code&gt;{package}_{version}_R_x86_64-pc-linux-gnu.tar.gz&lt;/code&gt; (the text after &lt;code&gt;{package}_{version}_&lt;/code&gt; may be different depending on your machine and distro).&lt;/p&gt;
&lt;p&gt;To distribute the Linux binary packages we create a parallel directory structure, which takes the same form as for the bundled source packages. In the case of Ubuntu Focal Fossa the Posit Package Manager uses &lt;code&gt;__linux__/focal/latest/src/contrib&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;They then rename the &lt;code&gt;{package}_{version}_R_x86_64-pc-linux-gnu.tar.gz&lt;/code&gt; files to the same form as the bundled source package files, i.e., to &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt;. And they put them in this new &lt;code&gt;src/contrib&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;The structure of our CRAN-like repository (well in fact our 2 parallel repositories) is now.
&lt;!-- tree ~/Documents/GitHub/cran/site -d -I &#39;jammy&#39; --noreport --&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;/mycran
├── __linux__
│   └── focal
│       └── latest
│           └── src
│               └── contrib
│                   └── 4.3.0
│                       └── Recommended
└── latest
    ├── bin
    │   ├── macosx
    │   │   ├── big-sur-arm64
    │   │   │   └── contrib
    │   │   │       └── 4.2
    │   │   └── contrib
    │   │       └── 4.2
    │   └── windows
    │       └── contrib
    │           └── 4.2
    └── src
        └── contrib
            └── 4.3.0
                └── Recommended&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then run&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tools::write_PACKAGES(type = &amp;quot;source&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the &lt;code&gt;.../__linux__/distro-name/src/contrib&lt;/code&gt; directory for each Linux distribution to generate the &lt;code&gt;PACKAGES&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Once this directory structure is served we can set our repository in R to &lt;code&gt;.../__linux__/focal/latest&lt;/code&gt; and R will find the binary package &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt; files in the &lt;code&gt;...__linux__/focal/src/contrib/&lt;/code&gt; directory, as per the first figure in this post.&lt;/p&gt;
&lt;p&gt;Note that the &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt; files within &lt;code&gt;__linux__/focal/latest/src/contrib&lt;/code&gt; do not all have to be of binary packages. They can be a mix of bundled source and binary packages, which is helpful if you haven’t had time to build all your binary package files.&lt;/p&gt;
&lt;p&gt;We can also confirm that on Ubuntu Focal Fossa&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;.Platform$pkgType
## [1] &amp;quot;source&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;therefore, on Linux, &lt;code&gt;utils:::resolvePkgType()&lt;/code&gt; always returns &lt;code&gt;&#34;source&#34;&lt;/code&gt;. Hence, on Linux, &lt;code&gt;contrib.url()&lt;/code&gt; always returns &lt;code&gt;/src/contrib&lt;/code&gt; regardless of its &lt;code&gt;type&lt;/code&gt; argument.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;testing-your-cran-like-repositories-locally&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Testing your CRAN-like repositories locally&lt;/h2&gt;
&lt;p&gt;You can either run a local web server or use the &lt;code&gt;file://...&lt;/code&gt; URL notation as your &lt;code&gt;repos&lt;/code&gt; global options setting (set with &lt;code&gt;option(repos = ...)&lt;/code&gt; or as the &lt;code&gt;repos&lt;/code&gt; argument to &lt;code&gt;install.packages()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here’s a screenshot of installing a binary package on Ubuntu Focal Fossa.
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/cran-like-focal-example.png&#34; alt=&#34;Screenshot of testing a CRAN-like repository on Ubuntu Focal Fossa.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have taken a look at the structure of a CRAN-like repository and built bundled source and binary package files. We saw that the trick for distributing Linux binary packages is to make a parallel directory with the same structure as that required for bundled source packages and that we need to rename the binary package files to have the same filename format as the bundled source package files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes footnotes-end-of-document&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Note that there are other approaches to distributing binary R packages on Linux, see &lt;a href=&#34;https://cran.r-project.org/bin/linux/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/bin/linux/&lt;/a&gt; and links therein, &lt;a href=&#34;https://eddelbuettel.github.io/r2u/&#34; class=&#34;uri&#34;&gt;https://eddelbuettel.github.io/r2u/&lt;/a&gt;, and &lt;a href=&#34;https://enchufa2.github.io/bspm/&#34; class=&#34;uri&#34;&gt;https://enchufa2.github.io/bspm/&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://blog.sellorm.com/2019/03/29/lifting-the-lid-on-cran/&#34; class=&#34;uri&#34;&gt;https://blog.sellorm.com/2019/03/29/lifting-the-lid-on-cran/&lt;/a&gt; and &lt;a href=&#34;https://blog.sellorm.com/2019/03/30/build-your-own-cran-like-repo/&#34; class=&#34;uri&#34;&gt;https://blog.sellorm.com/2019/03/30/build-your-own-cran-like-repo/&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-admin.html#Setting-up-a-package-repository&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/doc/manuals/R-admin.html#Setting-up-a-package-repository&lt;/a&gt;.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://packagemanager.rstudio.com/client/#/repos/2/overview&#34; class=&#34;uri&#34;&gt;https://packagemanager.rstudio.com/client/#/repos/2/overview&lt;/a&gt; and &lt;a href=&#34;https://pkgs.r4pi.org/&#34; class=&#34;uri&#34;&gt;https://pkgs.r4pi.org/&lt;/a&gt;&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
