<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Dr Tom Palmer</title>
    <link>https://remlapmot.github.io/post/</link>
      <atom:link href="https://remlapmot.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 06 Jul 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://remlapmot.github.io/images/icon_hu_72d72b3c768972db.png</url>
      <title>Posts</title>
      <link>https://remlapmot.github.io/post/</link>
    </image>
    
    <item>
      <title>Creating tutorial worksheets; Quarto profiles for the win!</title>
      <link>https://remlapmot.github.io/post/2025/quarto-profiles-for-tutorials/</link>
      <pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/quarto-profiles-for-tutorials/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/quarto-conditional-content/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previously posted&lt;/a&gt; about creating tutorial worksheets for 4 different Quarto engines (for R, Python, Stata, and Julia) using 
&lt;a href=&#34;https://quarto.org/docs/authoring/conditional.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conditional content&lt;/a&gt;. However, that approach is a bit hacky and I wasn&amp;rsquo;t very happy with it.&lt;/p&gt;
&lt;p&gt;Thanks to a 
&lt;a href=&#34;https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vignette by Christophe Dervieux&lt;/a&gt; in the quarto R package I realised there is a more convenient, and less hacky, way to create tutorial documents using Quarto profiles. I don&amp;rsquo;t use the dynamic metadata approach in the vignette to achieve my solution but it led me to relevant Quarto documentation page and I discuss it at the end of this post.&lt;/p&gt;
&lt;p&gt;My aim is the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To have a single Quarto document from which both the question and solution documents can be rendered for a tutorial.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As a reminder, as 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/quarto-conditional-content/#introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;I showed in my previous post&lt;/a&gt;, this has been possible to achieve for a long time with R Markdown and knitr because thanks to the brilliant work of Yihui Xie because they allow programmtic chunk options. Therefore, implementing this in a Quarto document using the knitr engine is also straighforward and I won&amp;rsquo;t repeat it in this post. However, it is the three other Quarto engines (for Python, Stata, and Julia) that I am interested in which are problematic because as far as I know they don&amp;rsquo;t allow programmtic chunk options and they don&amp;rsquo;t have the equivalent of the &lt;code&gt;! expr ...&lt;/code&gt; YAML tag literal.&lt;/p&gt;
&lt;h2 id=&#34;quarto-profiles&#34;&gt;Quarto profiles&lt;/h2&gt;
&lt;p&gt;Quarto profiles are introduced 
&lt;a href=&#34;https://quarto.org/docs/projects/profiles.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on this page of the Quarto documentation&lt;/a&gt;. Specifically, we shall make use of 
&lt;a href=&#34;https://quarto.org/docs/projects/profiles.html#profile-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conditional content dependent upon profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First we will create a simple default Quarto profile file &lt;em&gt;_quarto.yml&lt;/em&gt; which will simply contain the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;execute:
  eval: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(This is because I usually have an R version of the tutorial in the same directory using programmatic chunk options, so I don&amp;rsquo;t want to set a default that is language specific nor will affect anything in the R Quarto documents.)&lt;/p&gt;
&lt;p&gt;Next for each language I will make profiles for the questions output and the solutions output in appropriately named YAML files (I just show the Python files as the other two just have Stata/Julia substituted in the appropraite places).&lt;/p&gt;
&lt;h3 id=&#34;questions-and-solutions-profiles-for-python&#34;&gt;Questions and solutions profiles for Python&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;_quarto-python-questions.yml&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;project:
  render:
    - tutorial-python.qmd
title: &#39;Questions document: Python version&#39;
execute:
  eval: false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;_quarto-python-solutions.yml&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;project:
  render:
    - tutorial-python.qmd
title: &#39;Solutions document: Python version&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then our tutorial Quarto Python document, &lt;em&gt;tutorial-python.qmd&lt;/em&gt;, will look like the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format:
  html:
    embed-resources: true
jupyter: python3
---

## Question 1

Question text.

```{python}
print(&amp;quot;The code which is echoed in questions and evaluated in solutions.&amp;quot;)
```

::: {.content-visible when-profile=&amp;quot;python-solutions&amp;quot;}
The text for the solutions.
:::

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see the use of the conditional content based upon profile for the text of the solutions, and we could included additional code chunks in these conditional content divs.&lt;/p&gt;
&lt;p&gt;We repeat this for the other 2 tricky Quarto engines, &lt;code&gt;engine: julia&lt;/code&gt; and &lt;code&gt;jupyter: nbstata&lt;/code&gt;, including making profile yaml files for each engine and the respective &lt;em&gt;tutorial-{stata/julia}.qmd&lt;/em&gt; Quarto documents.&lt;/p&gt;
&lt;p&gt;Then we make a shell script with our render commands.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;quarto render --profile python-questions -o tutorial-python-questions.html
quarto render --profile python-solutions -o tutorial-python-solutions.html

quarto render --profile stata-questions -o tutorial-stata-questions.html
quarto render --profile stata-solutions -o tutorial-stata-solutions.html

quarto render --profile julia-questions -o tutorial-julia-questions.html
quarto render --profile julia-solutions -o tutorial-julia-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And because I have an R version using parameters my shell script usually begins.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;quarto render tutorial-r.qmd -P solutions:false -o tutorial-r-questions.html
quarto render tutorial-r.qmd -o tutorial-r-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;You can find the full source code in my example repo 
&lt;a href=&#34;https://github.com/remlapmot/tutorial-quarto-profiles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and their rendered output can be viewed from 
&lt;a href=&#34;https://remlapmot.github.io/tutorial-quarto-profiles/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. This repo also contains a tutorial document including the 4 languages in the same document using the embed shortcode as I described in 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/multi-engine-quarto/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;another previous post&lt;/a&gt;. A screenshot of the questions and solutions documents from this approach 
&lt;a href=&#34;#top&#34;&gt;is shown above&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;an-honorable-mention-about-dynamic-metadata&#34;&gt;An honorable mention about dynamic metadata&lt;/h2&gt;
&lt;p&gt;When I started reading the 
&lt;a href=&#34;https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;quarto R package vignette&lt;/a&gt; I began trying to use dynamic metadata to achieve the result above. Dynamic metadata involves writing extra YAML blocks into your Quarto document which can include programmatically specified values of parameters, which can then be used by including conditional content by 
&lt;a href=&#34;https://quarto.org/docs/authoring/conditional.html#matching-against-metadata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;matching against them&lt;/a&gt;. I found that I could achieve what I wanted except for modifying the &lt;code&gt;execute&lt;/code&gt; state of the Quarto document, it seems that must be specified in the first YAML block/header. And this cannot be controlled by the &lt;code&gt;--execute&lt;/code&gt; and &lt;code&gt;--no-execute&lt;/code&gt; flags to &lt;code&gt;quarto render&lt;/code&gt; because one needs the code which generates the additional YAML blocks to be run.&lt;/p&gt;
&lt;p&gt;For Quarto documents using the knitr engine, the R package vignette shows how to use the new &lt;code&gt;write_yaml_metadata_block()&lt;/code&gt; function within an R code chunk with output type &lt;code&gt;asis&lt;/code&gt; to write the YAML block. In case it is useful to anyone, below I show examples of how to write the YAML blocks in each of the three other engines I have been using.&lt;/p&gt;
&lt;h3 id=&#34;python-jupyter-python3&#34;&gt;Python (jupyter: python3)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;```{python}
#| include: false
#| tags: [parameters]
solutions = &#39;true&#39;
```

```{python}
#| include: false
from IPython.display import Markdown
ymltxt = f&amp;quot;  solutions: {solutions}&amp;quot;
if solutions == &#39;true&#39;:
    titletxt = &amp;quot;title: Solutions document&amp;quot;
else:
    titletxt = &amp;quot;title: Questions document&amp;quot;
```

`{python} Markdown(&amp;quot;---&amp;quot;)`
`{python} Markdown(&amp;quot;params:&amp;quot;)`
`{python} Markdown(ymltxt)`
`{python} Markdown(titletxt)`
`{python} Markdown(&amp;quot;---&amp;quot;)`

::: {.content-visible when-meta=&amp;quot;params.solutions&amp;quot;}
```{python}
print(&amp;quot;A solution, which is hidden in questions&amp;quot;)
```
:::

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;stata-jupyter-nbstata&#34;&gt;Stata (jupyter: nbstata)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;```{stata}
*| include: false
local solutions : env SOLUTIONS_STATA
scalar ymltxt = &amp;quot;  solutions: `solutions&#39;&amp;quot;
if &amp;quot;`solutions&#39;&amp;quot; == &amp;quot;true&amp;quot; {
  scalar titletxt = &amp;quot;title: Solutions document&amp;quot;
}
else {
  scalar titletxt = &amp;quot;title: Questions document&amp;quot;
}
```

`{stata} &amp;quot;---&amp;quot;`
`{stata} &amp;quot;params:&amp;quot;`
`{stata} scalar(ymltxt)`
`{stata} scalar(titletxt)`
`{stata} &amp;quot;---&amp;quot;`

::: {.content-visible when-meta=&amp;quot;params.solutions&amp;quot;}
```{stata}
display &amp;quot;A solution, which is hidden in questions&amp;quot;
```
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;julia-engine-julia&#34;&gt;Julia (engine: julia)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;```{julia}
#| tags: [parameters]
```

```{julia}
#| echo: false
#| output: asis
println(&amp;quot;---&amp;quot;)
if solutions
  println(&amp;quot;title: Solutions document&amp;quot;)
  ymltxt = &amp;quot;  solutions: true&amp;quot;
else
  println(&amp;quot;title: Questions document&amp;quot;)
  ymltxt = &amp;quot;  solutions: false&amp;quot;
end
println(&amp;quot;params:&amp;quot;)
println(ymltxt)
println(&amp;quot;---&amp;quot;)
```

::: {.content-visible when-meta=&amp;quot;params.solutions&amp;quot;}
```{julia}
println(&amp;quot;A solution, hidden in questions&amp;quot;)
```
:::

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to create Quarto profiles for creating tutorial worksheets; one for the questions and one for the solutions from the same Quarto document; for several Quarto engines (&lt;code&gt;engine: knitr&lt;/code&gt;, &lt;code&gt;jupyter: python3&lt;/code&gt;, &lt;code&gt;jupyter: nbstata&lt;/code&gt;, and &lt;code&gt;engine: julia&lt;/code&gt;). I have also shown how additional metadata may be written into your Quarto document in these engines which can be used in conjunction with parameterised documents and conditional content.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Investigating running R on RISC-V thanks to r-base on Ubuntu</title>
      <link>https://remlapmot.github.io/post/2025/riscv-r/</link>
      <pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/riscv-r/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I was interested to see whether and how well R would run on the new RISC-V architecture.&lt;/p&gt;
&lt;p&gt;A while ago I read that RISC-V is now a 
&lt;a href=&#34;https://ubuntu.com/blog/empowering-risc-v-with-open-source-through-ubuntu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;first class architecture for Ubuntu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This got me thinking, instead of having to build R from source maybe the &lt;code&gt;r-base&lt;/code&gt; package might be available for RISC-V. It turns out that this is indeed the case, the architecture we are interested in is &lt;code&gt;riscv64&lt;/code&gt;. The launchpad page for &lt;code&gt;r-base&lt;/code&gt; is 
&lt;a href=&#34;https://launchpad.net/ubuntu/&amp;#43;source/r-base&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Clicking through the subpages for each version of Ubuntu I can see that R is available for RISC-V from Ubuntu Focal Fossa onwards (for which the version of R is 3.6.3; and the latest version of Ubuntu has the current version of R of 4.5.0).&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/riscv-r/img/questing-r-base-builds.png&#34; alt=&#34;Screenshot of the architectures the r-base package is built for Ubuntu Questing Quokka.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Why do this? I have no immediate need for this. However, there are now quite a few affordable RISC-V single board computers available, and so a similar argument holds to that made by 
&lt;a href=&#34;https://r4pi.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the R4Pi&lt;/a&gt; (R for the Raspberry Pi project) that running R on such affordable machines is a 
&lt;a href=&#34;https://youtu.be/imYEdQ81JPk?si=B97GQJl846WC6zr3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;great benefit because it opens R up to a whole new user base and whole new set of low power use cases&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;emulating-risc-v-on-an-apple-silicon-mac&#34;&gt;Emulating RISC-V on an Apple Silicon Mac&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t have a RISC-V computer, therefore, I needed to use emulation.&lt;/p&gt;
&lt;p&gt;My setup is that I&amp;rsquo;m on an Apple Silicon M4 MacBook Air. I thought this might be promising to use because this has an ARM processor which is a reduced instruction set architecture, as is RISC-V.&lt;/p&gt;
&lt;p&gt;I wondered whether to try 
&lt;a href=&#34;https://mac.getutm.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UTM&lt;/a&gt; or 
&lt;a href=&#34;https://www.qemu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;QEMU&lt;/a&gt;. I tried UTM first but I couldn&amp;rsquo;t make any progress. So I found a 
&lt;a href=&#34;https://www.reddit.com/r/RISCV/comments/t19dqz/comment/hyfm8s8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tip online&lt;/a&gt; saying that RISC-V Ubuntu could be launched under QEMU on Ubuntu Linux using the following command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;qemu-system-riscv64 \
  -machine virt \
  -nographic \
  -m 12288 -smp 4 \
  -bios /usr/lib/riscv64-linux-gnu/opensbi/generic/fw_jump.elf \
  -kernel /usr/lib/u-boot/qemu-riscv64_smode/uboot.elf \
  -device virtio-net-pci,netdev=eth0 \
  -netdev user,id=eth0,hostfwd=tcp::2222-:22 \
  -drive file=ubuntu-24.10-preinstalled-server-riscv64.img,format=raw,if=virtio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Firstly one needs to obtain the Ubuntu img. Following 
&lt;a href=&#34;https://canonical-ubuntu-boards.readthedocs-hosted.com/en/latest/how-to/qemu-riscv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this incredible guide by Canonical&lt;/a&gt; we can choose one of the three versions of Ubuntu listed (Noble, Oracular, and Plucky).&lt;/p&gt;
&lt;p&gt;The image downloads as an &lt;em&gt;.img.xz&lt;/em&gt; archive, which you can extract by installing &lt;code&gt;xz&lt;/code&gt; (I use 
&lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Homebrew&lt;/a&gt; for system packages on macOS)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install xz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and decompressing with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xz --decompress ubuntu-24.10-preinstalled-server-riscv64.img.xz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The extracted file is about 4GB, but later on I realised I needed a slightly larger harddisk for the virtual machine, so I increased it to 8GB with the following command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;qemu-img resize ubuntu-24.10-preinstalled-server-riscv64.img 8G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I then realised that I needed QEMU on my Mac. Again Homebrew to the rescue with the following command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install qemu u-boot-tools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Admittedly I don&amp;rsquo;t think I ended up using the &lt;em&gt;u-boot-tools&lt;/em&gt;.) Next I needed the two files; &lt;em&gt;fw_jump.elf&lt;/em&gt; and &lt;em&gt;uboot.elf&lt;/em&gt;. I had a look in &lt;em&gt;/opt/homebrew/Cellar/qemu/10.0.2/&lt;/em&gt; but I couldn&amp;rsquo;t work out if they are in there or not (there are some zip archives in some subdirectories). There are some official documentation pages 
&lt;a href=&#34;https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and 
&lt;a href=&#34;https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; but I couldn&amp;rsquo;t follow them. I then found a comment that said you can 
&lt;a href=&#34;https://www.reddit.com/r/RISCV/comments/t19dqz/comment/hyfaeh4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;copy them from an Ubuntu installation&lt;/a&gt;, which I implemented in Docker.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it --rm --platform linux/arm64 \
  -v $PWD:/home ubuntu:24.04 bash /home/copy-files.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;em&gt;copy-files.sh&lt;/em&gt; contains&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt update
apt upgrade -y 
apt install -y opensbi qemu-system-misc u-boot-qemu
cp /usr/lib/u-boot/qemu-riscv64_smode/uboot.elf /home/uboot.elf
cp /usr/lib/riscv64-linux-gnu/opensbi/generic/fw_jump.elf /home/fw_jump.elf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This saves the two files to the current working directory, so I could modify my call to &lt;code&gt;qemu-system-riscv64&lt;/code&gt; to be as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;qemu-system-riscv64 \
  -machine virt \
  -nographic \
  -m 12288 -smp 4 \
  -bios fw_jump.elf \
  -kernel uboot.elf \
  -device virtio-net-pci,netdev=eth0 \
  -netdev user,id=eth0,hostfwd=tcp::2222-:22 \
  -drive file=ubuntu-24.10-preinstalled-server-riscv64.img,format=raw,if=virtio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a couple of seconds you obtain a GRUB screen in which you select the default of &lt;em&gt;Ubuntu&lt;/em&gt;. Then after a further approx. 20 seconds of screen output, a little bit to my surprise this worked and I was presented with the login screen to Ubuntu server. The default username is &lt;em&gt;ubuntu&lt;/em&gt; and the default password is &lt;em&gt;ubuntu&lt;/em&gt;. On login you are immediately prompted to change the password but then you&amp;rsquo;re in.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/riscv-r/img/ubuntu-launch-screen.png&#34; alt=&#34;Screenshot of the Ubuntu server startup message running on an emulated RISC-V virtual machine.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;So next it&amp;rsquo;s essentially standard Ubuntu commands to update the system and install &lt;code&gt;r-base&lt;/code&gt;. I also install &lt;code&gt;r-base-dev&lt;/code&gt; to obtain the necessary compilers to build any source packages containing code which needs to be compiled.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get install -y r-base r-base-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we launch R.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/riscv-r/img/r-startup-message.png&#34; alt=&#34;Screenshot of the R startup message running on an emulated RISC-V virtual machine.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;From this point on everything I tried simply worked. I installed &lt;em&gt;data.table&lt;/em&gt; from source. Then slightly more obscurely, I tried out a trick from Jeroen Ooms who said that if an R package only contains R code then its binary version will install under any architecture. I have a few R packages in my r-universe that only contain R code, my example installed as expected (note this was built on x86_64 Ubuntu Linux but contains no source code which needs to be compiled).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;tmsens&#39;, repos =
  &#39;https://remlapmot.r-universe.dev/bin/linux/noble-x86_64/4.5/&#39;)
#&amp;gt; * installing *binary* package ‘tmsens’ ...
#&amp;gt; * DONE (tmsens)
#&amp;gt; 
#&amp;gt; The downloaded source packages are in
#&amp;gt; 	‘/tmp/RtmpYqwF8W/downloaded_packages’
library(tmsens)
#&amp;gt; Warning message:
#&amp;gt; package ‘tmsens’ was built under R version 4.5.0
help(package = &#39;tmsens&#39;)
#&amp;gt; 
#&amp;gt;                 Information on package ‘tmsens’
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I admit I haven&amp;rsquo;t tried many features here but I am really impressed with Ubuntu packages being available for RISC-V.&lt;/p&gt;
&lt;p&gt;Once you are finished using R, exit R as usual and to shutdown the Ubuntu server issue the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo poweroff
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to install and run R on Ubuntu Server for RISC-V under QEMU emulation. Thanks to Canonical&amp;rsquo;s support for RISC-V and the maintainers of the &lt;code&gt;r-base&lt;/code&gt; and related packages the experience of running R on RISC-V is already excellent.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to widen the accordion on a Blackboard page</title>
      <link>https://remlapmot.github.io/post/2025/blackboard-accordion/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/blackboard-accordion/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;My university uses the Blackboard online learning environment (there are others, e.g., Moodle and Canvas, etc.). On several of the Unit (aka Module) and short course sites we have an accordion containing the table with the timetable of the teaching. Unfortunately I find the default width too narrow.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/blackboard-accordion/img/accordion-expanded.png&#34; alt=&#34;Screenshot of expanded accordion.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;This post shows how to make this accordion element wider.&lt;/p&gt;
&lt;h2 id=&#34;widening-the-accordion&#34;&gt;Widening the accordion&lt;/h2&gt;
&lt;p&gt;First we need to work out what type of element it is. To do this in Google Chrome right click on a part of the accordion and click &lt;em&gt;Inspect&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/blackboard-accordion/img/devtools-inspect.png&#34; alt=&#34;Screenshot of expanded accordion.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;We can see that the accordion is a div of class deo-accordion. And we can see that it&amp;rsquo;s &lt;code&gt;max-width&lt;/code&gt; is currently set to 40em which is 640 pixels.&lt;/p&gt;
&lt;p&gt;Therefore to modify this we need to write the CSS for this with a larger &lt;code&gt;max-width&lt;/code&gt;. It turns out Blackboard does not allow us to put CSS in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag directly in a component&amp;rsquo;s source code. Therefore, we put the following in a file called &lt;em&gt;mystyles.css&lt;/em&gt;. The 60em is equivalent to 960 pixels.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.deo-accordion {
  max-width: 60em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then upload this file to our Blackboard site&amp;rsquo;s &lt;em&gt;Content&lt;/em&gt; area. Once uploaded we obtain the &lt;em&gt;Permanent URL&lt;/em&gt; of the file by clicking the dropdown arrow to the right of the filename and selecting &lt;em&gt;360° View&lt;/em&gt;. Copy the permanent URL to the clipboard.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/blackboard-accordion/img/360-degree-view.png&#34; alt=&#34;Screenshot of 360° View of our CSS file.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Within the content of the item on your Blackboard page which contains the accordion, click edit, then click the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol to enter editing source code mode. At the bottom of the code enter the following line &amp;ndash; replacing the &lt;code&gt;PERMANENT_URL&lt;/code&gt; with what we just copied and save the changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&amp;quot;PERMANENT_URL&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you should find that you have a wider accordion.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/blackboard-accordion/img/wider-accordion.png&#34; alt=&#34;Screenshot of 360° View of our CSS file.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to widen the accordion on a Blackboard page with some simple CSS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running the nbstata Jupyter kernel within a uv virtual environment</title>
      <link>https://remlapmot.github.io/post/2025/nbstata-uv-venv/</link>
      <pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/nbstata-uv-venv/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Any new project using Python or Jupyter is very stongly recommended to use a virtual environment. A virtual environment is a directory (usually at the top level; often called either &lt;em&gt;.venv&lt;/em&gt; or &lt;em&gt;venv&lt;/em&gt;) within your project directory which contains the dependency Python packages and perhaps the Python installation (or pointers to the Python installation on your system).&lt;/p&gt;
&lt;p&gt;There are many Python project managers, in this post I will use the new and extremely fast project manager 
&lt;a href=&#34;https://docs.astral.sh/uv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;uv&lt;/a&gt;. I will show how to use the 
&lt;a href=&#34;https://hugetim.github.io/nbstata/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nbstata&lt;/a&gt; Jupyter kernel by Tim Huegerich within a uv virtual environment on macOS, Windows, and Linux. The aim is to be able to conveniently and reproducibly render Quarto documents using the 
&lt;a href=&#34;https://hugetim.github.io/nbstata/user_guide.html#quarto-tips&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;jupyter: nbstata&lt;/code&gt;&lt;/a&gt; engine from within the virtual environment.&lt;/p&gt;
&lt;p&gt;At this point it&amp;rsquo;s worth saying that I am a contributor to the excellent 
&lt;a href=&#34;https://cran.r-project.org/package=Statamarkdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Statamarkdown&lt;/a&gt; R package by Doug Hemken. This can be used in Quarto documents using the knitr engine. In this post I&amp;rsquo;ll be using nbstata because nbstata uses 
&lt;a href=&#34;https://www.stata.com/python/pystata/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pystata&lt;/a&gt; which is StataCorp&amp;rsquo;s official Python package (included in each Stata installation) and is their official way of integrating Stata in Python. As such pystata and hence nbstata have more features than Statamarkdown can provide.&lt;/p&gt;
&lt;p&gt;And it is worth emphasizing how useful virtual environments are because it is very easy to get oneself in a complete mess with regards Python, as you will likely end up with many different versions installed. Chaos can then accidentally ensue regarding which versions of dependency packages your different projects require given a certain Python version, as always XKCD have a comic illustrating the problem.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://imgs.xkcd.com/comics/python_environment.png&#34; alt=&#34;XKCD 1987, a diagram showing the chaos of not using Python virtual environments.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;figcaption&gt;XKCD 1987, Python Environment. &lt;a href=&#34;https://xkcd.com/license.html&#34;&gt;XKCD license&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;setup-basics&#34;&gt;Setup basics&lt;/h2&gt;
&lt;p&gt;On your machine you need to have&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stata installed and know the location of the installation
&lt;ul&gt;
&lt;li&gt;and check that within the installation there is the &lt;em&gt;utilities&lt;/em&gt; directory containing the &lt;em&gt;pystata&lt;/em&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;uv must be installed, see 
&lt;a href=&#34;https://docs.astral.sh/uv/getting-started/installation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;its docs for installation instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;to render Quarto documents you need 
&lt;a href=&#34;https://quarto.org/docs/get-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and of course a text editor and a terminal.&lt;/li&gt;
&lt;li&gt;On Windows I would recommend using Git Bash as your shell (this is bundled with 
&lt;a href=&#34;https://git-scm.com/downloads/win&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git for Windows&lt;/a&gt;) for running the setup script in the next section.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-shell-script-to-setup-the-uv-virtual-environment&#34;&gt;A shell script to setup the uv virtual environment&lt;/h2&gt;
&lt;p&gt;What follows are the shell commands we need to run to setup our virtual environment. The script is for macOS but I have included comments in the places where amendments are required for either Windows or Linux. I have also included this script 
&lt;a href=&#34;https://github.com/remlapmot/nbstata-uv-setup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in a repository&lt;/a&gt; (in fact I have included a script per operating system).&lt;/p&gt;
&lt;p&gt;Note that currently on macOS and Linux there cannot be any spaces in the filepath to your virtual environment. And you might need to amend some of the paths, say if you have a different version of Stata or if it&amp;rsquo;s installation location is different.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Linux we need to ensure that the directory containing our stata/stata-mp binary is on &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# export PATH=$PATH:/usr/local/stata18
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;We then need to ensure that our Python installation will be able to find the pystata package. We can do this by defining the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Required so Python can find pystata package
export PYTHONPATH=/Applications/Stata/utilities
# Linux: export PYTHONPATH=/usr/local/stata18/utilities
# Windows: export PYTHONPATH=&amp;quot;C:/Program Files/Stata18/utilities&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;We then setup the virtual environment. This will create a directory in our project called &lt;em&gt;.venv&lt;/em&gt;. I prefer to explicitly set the version of Python I am using.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv venv --python 3.13
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;We then activate the virtual environment&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source .venv/bin/activate
# Windows: source .venv/Scripts/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Now we can install the required Python dependency packages as per the 
&lt;a href=&#34;https://hugetim.github.io/nbstata/user_guide.html#install-nbstata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nbstata docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install nbstata dependency Python packages
uv pip install jupyterlab nbstata jupyterlab_stata_highlight2

# Additional Python packages if using parameterised Quarto documents
# uv pip install papermill python-dotenv jupyter-cache
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Then we setup the nbstata Jupyter kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m nbstata.install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nbstata docs states that the &lt;code&gt;--sys-prefix&lt;/code&gt; flag may be required in a virutal environment but I haven&amp;rsquo;t found that to be the case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Then we run commands to do our actual work; for example rendering a Quarto document using the &lt;code&gt;jupyter: nbstata&lt;/code&gt; engine. An example Quarto document, say &lt;em&gt;index.qmd&lt;/em&gt;, could be:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
title: My example nbstata document
jupyter: nbstata
---

```{stata}
display &amp;quot;Hello, World!&amp;quot;
```
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;quarto render index.qmd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that Quarto documents using the nbstata kernel can also be embedded within other Quarto documents, 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/multi-engine-quarto/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;as I have described in a previous post&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;And that&amp;rsquo;s it. When you have finished your work you can deactivate the virtual environment&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;recording-this-as-a-project-with-pyprojecttoml-and-uvlock-files&#34;&gt;Recording this as a project with pyproject.toml and uv.lock files&lt;/h2&gt;
&lt;p&gt;And of course we can go a step further by setting this up as a proper Python project. This will have a &lt;em&gt;pyproject.toml&lt;/em&gt; file to record the dependencies and a &lt;em&gt;uv.lock&lt;/em&gt; file to record their exact versions. To do this run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can delete the &lt;em&gt;main.py&lt;/em&gt; file that&amp;rsquo;s created here, but commit everything else into your repo. Then add the dependencies with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv add jupyterlab nbstata jupyterlab_stata_highlight2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will see these are entered into the &lt;em&gt;pyproject.toml&lt;/em&gt; and &lt;em&gt;uv.lock&lt;/em&gt; files. The &lt;em&gt;pyproject.toml&lt;/em&gt; file will now look something like this (I have edited the &lt;code&gt;description&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[project]
name = &amp;quot;nbstata-uv-setup&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
description = &amp;quot;This project demonstrates how to use the nbstata Jupyter kernel in a uv virtual environment, so that one can render Quarto documents using this engine.&amp;quot;
readme = &amp;quot;README.md&amp;quot;
requires-python = &amp;quot;&amp;gt;=3.13&amp;quot;
dependencies = [
    &amp;quot;jupyterlab&amp;gt;=4.4.2&amp;quot;,
    &amp;quot;jupyterlab-stata-highlight2&amp;gt;=0.1.2&amp;quot;,
    &amp;quot;nbstata&amp;gt;=0.8.2&amp;quot;,
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commit these files into your repo.&lt;/p&gt;
&lt;p&gt;At a later date you can restore this environment by running&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv sync
# which creates the .venv
# Then activate the virtual environment, etc
source .venv/bin/activate
# Windows: source .venv/Scripts/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You find out more about uv project commands in its 
&lt;a href=&#34;https://docs.astral.sh/uv/guides/projects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to setup and run the nbstata Jupyter kernel within a uv virtual environment on macOS, Windows, and Linux; in order to conveniently and reproducibly render Quarto documents using the &lt;code&gt;jupyter: nbstata&lt;/code&gt; engine. And I have also shown how to set this up as a Python project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running R on Windows on ARM on GitHub Actions</title>
      <link>https://remlapmot.github.io/post/2025/win-11-arm-gha/</link>
      <pubDate>Wed, 16 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/win-11-arm-gha/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;GitHub has recently announced that Windows ARM64 runners are 
&lt;a href=&#34;https://github.blog/changelog/2025-04-14-windows-arm64-hosted-runners-now-available-in-public-preview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;now available&lt;/a&gt; under the &lt;code&gt;windows-11-arm&lt;/code&gt; label.&lt;/p&gt;
&lt;p&gt;I help maintain an R package, 
&lt;a href=&#34;https://mrcieu.github.io/TwoSampleMR/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TwoSampleMR&lt;/a&gt;, which has quite alot of users. The package is not on CRAN because several of its dependencies are only on GitHub, and for a package to be on CRAN essentially all of its dependencies must also be on CRAN. As a result I am always interested to try installing the package on new operating systems and architectures.&lt;/p&gt;
&lt;p&gt;(In this post I will use ARM and AARCH64 interchangeably.)&lt;/p&gt;
&lt;h2 id=&#34;setting-up-r-aarch64-on-windows-on-arm&#34;&gt;Setting up R AARCH64 on Windows on ARM&lt;/h2&gt;
&lt;h3 id=&#34;avoiding-confusion-with-the-default-runner-software&#34;&gt;Avoiding confusion with the default runner software&lt;/h3&gt;
&lt;p&gt;It is important to mention that the x86_64 version of R 4.4.2 and RTools44 are included in the 
&lt;a href=&#34;https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;default software set&lt;/a&gt; for the &lt;code&gt;windows-latest&lt;/code&gt; GitHub Actions runner. And the directory including its binaries are on the &lt;code&gt;PATH&lt;/code&gt; environment variable (specifically &lt;em&gt;C:\Program Files (x86)\R\R-4.4.2\bin\x64&lt;/em&gt;). As a result if you run &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;Rscript&lt;/code&gt;, or &lt;code&gt;R CMD batch&lt;/code&gt; etc. in a shell in the runner you will obtain the x86_64 version of R (which runs under emulation on the ARM runner). Let&amp;rsquo;s say this is not what we want, so to setup the ARM version of R we need to install it ourselves.&lt;/p&gt;
&lt;h3 id=&#34;installing-aarch64-r-and-rtools45&#34;&gt;Installing AARCH64 R and RTools45&lt;/h3&gt;
&lt;p&gt;Tomas Kalibera from the R Core Team has provided several excellent posts (
&lt;a href=&#34;https://blog.r-project.org/2023/08/23/will-r-work-on-64-bit-arm-windows/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and 
&lt;a href=&#34;https://blog.r-project.org/2024/04/23/r-on-64-bit-arm-windows/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;) about R for Windows on ARM, and installers for it have been available for some time.&lt;/p&gt;
&lt;p&gt;The r-hub API does not yet provide the installer information for the AARCH64 version of R, so I came up with the following workflow file - amended from r-lib/actions to install R 4.5.0 and RTools45. Place such a (GitHub Actions workflow) file in a public GitHub repo in a &lt;em&gt;.github/workflows&lt;/em&gt; directory, and enable GitHub Actions in the repo settings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

name: Check-install-win-11-arm

permissions: read-all

jobs:
  windows-11-on-arm:
    runs-on: windows-11-arm

    name: windows-11-arm

    strategy:
      fail-fast: false

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Install R and RTools for Windows on ARM and install TwoSampleMR
        run: |
          $url = &amp;quot;https://www.r-project.org/nosvn/winutf8/aarch64/R-4-signed/R-4.5.0-aarch64.exe&amp;quot;
          Invoke-WebRequest -Uri &amp;quot;$url&amp;quot; -OutFile R-4.5.0-aarch64.exe -UseBasicParsing -UserAgent &amp;quot;NativeHost&amp;quot;
          Start-Process -FilePath R-4.5.0-aarch64.exe -ArgumentList &amp;quot;/install /norestart /verysilent /SUPPRESSMSGBOXES&amp;quot; -NoNewWindow -Wait
          $url = &amp;quot;https://cran.r-project.org/bin/windows/Rtools/rtools45/files/rtools45-aarch64-6536-6492.exe&amp;quot;
          Invoke-WebRequest -Uri &amp;quot;$url&amp;quot; -OutFile rtools45-aarch64-6536-6492.exe -UseBasicParsing -UserAgent &amp;quot;NativeHost&amp;quot;
          Start-Process -FilePath rtools45-aarch64-6536-6492.exe -ArgumentList &amp;quot;/install /norestart /verysilent /SUPPRESSMSGBOXES&amp;quot; -NoNewWindow -Wait
          $rscript = &amp;quot;C:\Program Files\R-aarch64\R-4.5.0\bin\Rscript.exe&amp;quot;
          $arguments = &amp;quot;-e&amp;quot;, &amp;quot;print(R.version); # the rest of your R code goes here ...&amp;quot;
          &amp;amp; $rscript $arguments
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Breaking down the final &lt;code&gt;steps&lt;/code&gt; section of this;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we define the url of the R 4.5.0 aarch64 installer;&lt;/li&gt;
&lt;li&gt;we then download the installer using &lt;code&gt;Invoke-WebRequest&lt;/code&gt; (note that the default shell in Windows is Powershell);&lt;/li&gt;
&lt;li&gt;we then run the installer using &lt;code&gt;Start-Process&lt;/code&gt;. I am not sure if I need all of the arguments I have specified here but it seems to work.&lt;/li&gt;
&lt;li&gt;We then do the same for RTools45.&lt;/li&gt;
&lt;li&gt;We then define a variable for the path to the &lt;em&gt;Rscript.exe&lt;/em&gt; binary;&lt;/li&gt;
&lt;li&gt;we define a variable containing the arguments we want to pass to &lt;em&gt;Rscript&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;we then invoke &lt;em&gt;Rscript&lt;/em&gt; using our two variables and the &lt;code&gt;&amp;amp;&lt;/code&gt; call operator.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then we navigate to our GitHub repo and view the output in the Actions tab under the relevant run.&lt;/p&gt;
&lt;p&gt;Of course if you want to run your own R script you&amp;rsquo;ll need an initial step to checkout your repo.&lt;/p&gt;
&lt;p&gt;To confirm that we really have launched the AARCH64 version of R we see the output of &lt;code&gt;print(R.version)&lt;/code&gt; is as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;print(R.version)
#&amp;gt;                _                           
#&amp;gt; platform       aarch64-w64-mingw32              
#&amp;gt; arch           aarch64                          
#&amp;gt; os             mingw32                          
#&amp;gt; crt            ucrt                             
#&amp;gt; system         aarch64, mingw32                 
#&amp;gt; status                                          
#&amp;gt; major          4                                
#&amp;gt; minor          5.0                              
#&amp;gt; year           2025                             
#&amp;gt; month          04                               
#&amp;gt; day            11                               
#&amp;gt; svn rev        88135                            
#&amp;gt; language       R                                
#&amp;gt; version.string R version 4.5.0 (2025-04-11 ucrt)
#&amp;gt; nickname       How About a Twenty-Six 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to install the AARCH64 version of R and RTools45 on the recently released Windows on ARM runner in GitHub Actions.&lt;/p&gt;
&lt;p&gt;As an aside, I note that we are now in the interesting position in that GitHub Actions now has Windows, macOS, and Ubuntu Linux all available on both x86_64 and ARM architectures.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amending the Git commit message of a previous commit (that isn&#39;t the most recent) in GitHub Desktop without performing an interactive rebase</title>
      <link>https://remlapmot.github.io/post/2025/amend-commit-messages/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/amend-commit-messages/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As R developers I think we can all agree that Git is hard. There won&amp;rsquo;t be many of us who at some time haven&amp;rsquo;t broken a Git repository in some way or other or lost some work, I know that I have (several times &amp;hellip; ahem).&lt;/p&gt;
&lt;p&gt;A task I sometimes need to achieve when working on a branch is amending a commit message. I use 
&lt;a href=&#34;https://github.com/apps/desktop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Desktop&lt;/a&gt; to help me with Git, and I recommend it to all my students. If the commit you want to amend the message of is the most recent commit you can simply right click on it and select &lt;em&gt;Amend Commit&amp;hellip;&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/amend-commit-messages/img/01-right-click-amend-commit.png&#34; alt=&#34;Screenshot of amending a commit in GitHub Desktop.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;This is providing a user friendly interface to running&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the terminal for us. This is all covered in the 
&lt;a href=&#34;https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, what if the commit is not the most recent &amp;ndash; when you right click those commits the option to amend them is not available. If your commits after your target commit don&amp;rsquo;t touch the same lines in the same file/s you could reorder your commits such that your target commit is the most recent and then right click and &lt;em&gt;Amend Commit&amp;hellip;&lt;/em&gt; again.&lt;/p&gt;
&lt;p&gt;What if you can&amp;rsquo;t easily or don&amp;rsquo;t want to reorder your commits? At this point you might start questioning your life choices; how did I end up using the same tools as the Linux kernel developers? All I want to do is amend a commit message! Anyway, the proper answer is to perform an interactive rebase, but that is relatively advanced and not without stress. Luckily I have a simple trick in GitHub Desktop to achieve our goal without performing an interactive rebase.&lt;/p&gt;
&lt;h2 id=&#34;the-trick-squashing-an-empty-commit-onto-the-target-commit&#34;&gt;The trick: squashing an empty commit onto the target commit&lt;/h2&gt;
&lt;p&gt;GitHub Desktop allows us to squash to commits together. When it does this it allows us to amend the commit message of the resulting commit. Therefore, to achieve our goal of amending previous commit messages we need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify the commit you want to amend the message of. Here I have made a typo and want to fix the message to say &lt;em&gt;Use test-rcpp.R&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/amend-commit-messages/img/02-commit-to-amend.png&#34; alt=&#34;Screenshot of squashing commits GitHub Desktop.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create an empty commit&lt;/p&gt;
&lt;p&gt;For this you will need command line 
&lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git&lt;/a&gt; installed (GitHub Desktop has a version of Git bundled within it, so not everyone who has GitHub Desktop installed has Git installed separately). Run the following (you don&amp;rsquo;t have to include the message).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit --allow-empty -m &amp;quot;Empty commit for purposes of trick&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perform a squash in GitHub Desktop by dragging and dropping the empty commit onto your target commit as per the screenshot below (and in the screenshot at the 
&lt;a href=&#34;#top&#34;&gt;top&lt;/a&gt; of this post). The empty commit has no content, so it does not affect the content of your target commit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/amend-commit-messages/img/03-drag-and-drop.png&#34; alt=&#34;Screenshot of dragging the empty commit onto the target commit in GitHub Desktop.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Enter your amended commit message in the &lt;em&gt;Summary&lt;/em&gt; box and delete the text in the &lt;em&gt;Description&lt;/em&gt; box.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/amend-commit-messages/img/06-squashing-commits.png&#34; alt=&#34;Screenshot of squashing commits GitHub Desktop.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;em&gt;Squash 2 Commits&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/amend-commit-messages/img/07-new-commit-message.png&#34; alt=&#34;Screenshot of finalising squashed commit in GitHub Desktop.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt; 
&lt;ul&gt;
&lt;li&gt;That&amp;rsquo;s it, we&amp;rsquo;re finished! You can now push your branch upto GitHub (or in my case in the screenshot force push because I had previously pushed this branch to the remote).&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/amend-commit-messages/img/08-final-state.png&#34; alt=&#34;Screenshot of your amend Git history ready to the pushed to GitHub in GitHub Desktop.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;the-proper-method-performing-an-interactive-rebase&#34;&gt;The proper method: performing an interactive rebase&lt;/h2&gt;
&lt;p&gt;If you want to do achieve this the proper way or amend the contents of previous commits you&amp;rsquo;ll need to perform an interactive rebase. That is a little bit tricky to perform in the terminal, although there are lots of helpful YouTube videos and blogposts showing how to do it.&lt;/p&gt;
&lt;p&gt;If you ever need to do this I recommend using the 
&lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lazygit&lt;/a&gt; terminal user interface, which has the best interface to interactive rebasing I&amp;rsquo;ve seen. To start the process, navigate to the &lt;em&gt;Reflog&lt;/em&gt; pane (by pressing &lt;kbd&gt;Tab&lt;/kbd&gt; twice), then use your up and down arrows to select your target commit, and either press &lt;kbd&gt;r&lt;/kbd&gt; to reword (i.e., amend the commit message) or &lt;kbd&gt;e&lt;/kbd&gt; to edit the commit itself (or choose one of the other options listed at the bottom).&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/amend-commit-messages/img/09-lazygit.png&#34; alt=&#34;Screenshot of starting to amend a commit message in the Lazygit TUI.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to amend commit messages for commits that aren&amp;rsquo;t the most recent commit in GitHub Desktop without performing an interactive rebase.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Checking your R packages and practicals on a schedule using GitHub Actions</title>
      <link>https://remlapmot.github.io/post/2025/checking-packages-and-practicals/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/checking-packages-and-practicals/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Do you have a R package that&amp;rsquo;s just on GitHub? How often do you check it? CRAN follows a rolling release model, so any day one of your package&amp;rsquo;s dependency packages could be updated - breaking your package!&lt;/p&gt;
&lt;p&gt;Or maybe you teach a course that runs once a year and it has some R practical sessions? It can be very frustrating when you rerun your practical after a year to find that several of the R packages it uses have been updated, and now you have to work out how to fix things. For this situation we might use 
&lt;a href=&#34;https://rstudio.github.io/renv/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;renv&lt;/strong&gt;&lt;/a&gt; to record the packages and their versions. But then your course participants will need to use &lt;strong&gt;renv&lt;/strong&gt; which might lead to a room full of 30 students all having &lt;strong&gt;renv&lt;/strong&gt; problems. Alternatively, you might install all your packages from a single date, meaning you can restore them using the a snapshot date from the 
&lt;a href=&#34;https://packagemanager.posit.co/client/#/repos/cran/setup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Public Posit Package Manager&lt;/a&gt; but you might find your course participants wondering why you use packages that are a year out of date. Another superb solution is to provide course participants with an R environment you have defined and tested your practical works in. Such a solution is offered by creating the practical as a project in a 
&lt;a href=&#34;https://posit.cloud/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Posit Cloud&lt;/a&gt; workspace, indeed Posit Cloud is so good it almost makes running R practicals boring.&lt;/p&gt;
&lt;p&gt;My solution to these problems is to regularly run &lt;code&gt;R CMD check&lt;/code&gt; on your package/run your practical with the latest versions of the required packages throughout the year. This way you&amp;rsquo;ll hopefully pick up any changes in dependency packages long before the next running of your course (although you might still be unlucky).&lt;/p&gt;
&lt;p&gt;If I had a server I could suggest setting up a 
&lt;a href=&#34;https://linux.die.net/man/8/cron&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;cron&lt;/code&gt;&lt;/a&gt; job to check the package or practical. However, most of us don&amp;rsquo;t have a server. Luckily if your package or practical is in a public GitHub repository then we can run GitHub Actions on it. It turns out GitHub Actions has a 
&lt;a href=&#34;https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scheduling facility that uses &lt;code&gt;cron&lt;/code&gt; syntax&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next I&amp;rsquo;ll show how to run R code on a schedule on GitHub Actions for these two cases.&lt;/p&gt;
&lt;h2 id=&#34;checking-packages-on-a-schedule&#34;&gt;Checking packages on a schedule&lt;/h2&gt;
&lt;p&gt;I use the actions and example workflows from the 
&lt;a href=&#34;https://github.com/r-lib/actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;r-lib/actions&lt;/a&gt; repository. For checking a package there are several examples, in the &lt;em&gt;examples&lt;/em&gt; directory of that repository, that we can copy then amend. Let&amp;rsquo;s use the 
&lt;a href=&#34;https://github.com/r-lib/actions/blob/v2-branch/examples/check-full.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;check-full.yaml&lt;/a&gt; example.&lt;/p&gt;
&lt;p&gt;Copy this file into a &lt;em&gt;.github/workflows&lt;/em&gt; directory in the repository for your package. Now we need to enable scheduled running. Amend the first &lt;code&gt;on:&lt;/code&gt; block to include the two lines I have inserted below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:
  ...
  schedule:
    - cron: &amp;quot;00 9 * * TUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What does this syntax mean? Luckily there are many websites which will decipher that for us, such as 
&lt;a href=&#34;https://crontab.guru/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;crontab guru&lt;/a&gt;. (Nb. you can see a full version of this file in 
&lt;a href=&#34;https://github.com/remlapmot/OneSampleMR/blob/main/.github/workflows/R-CMD-check.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;one of my repositories&lt;/a&gt;.)&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/checking-packages-and-practicals/img/cron-tab-guru-screenshot.png&#34; alt=&#34;Screenshot from the crontab guru website.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;From the crontab guru screenshot above, we see this means run at 9:00 am (UTC) on Tuesdays. Once you have committed this file to your repo and pushed it to GitHub on your main/master branch then your automated checking is taken care of. If a check fails GitHub will send a notification and you can then investigate further.&lt;/p&gt;
&lt;h2 id=&#34;running-practicals-on-a-schedule&#34;&gt;Running practicals on a schedule&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say we have prepared a practical worksheet in a Quarto document. In this case we&amp;rsquo;ll additionally use the actions and examples in the 
&lt;a href=&#34;https://github.com/quarto-dev/quarto-actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;quarto-dev/quarto-actions&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;The workflow file I ended up with is shown below and is in this 
&lt;a href=&#34;https://github.com/remlapmot/example-exercise-to-run-on-schedule&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example repository&lt;/a&gt;. It is essentially an amended version of the 
&lt;a href=&#34;https://github.com/r-lib/actions/blob/v2-branch/examples/render-rmarkdown.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown rendering example in r-lib/actions&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: &amp;quot;0 0 1 * *&amp;quot; # run on 1st day of month

name: Render

permissions: 
  contents: write

jobs:
  build-deploy:
    runs-on: ${{ matrix.config.os }}
    
    name: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        config:
          - { os: macos-latest }
          - { os: windows-latest }
          - { os: ubuntu-latest }
    
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Setup R packages
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          upgrade: &#39;TRUE&#39;

      - name: Render practical and commit output documents into repo
        shell: bash
        run: |
          # Render questions
          Rscript -e &#39;quarto::quarto_render(&amp;quot;exercise-01.qmd&amp;quot;, output_file = &amp;quot;exercise-01-questions-${{ matrix.config.os }}.html&amp;quot;, execute_params = list(solutions = FALSE, title = &amp;quot;Example exercise: Questions&amp;quot;))&#39;
          # Render solutions
          Rscript -e &#39;quarto::quarto_render(&amp;quot;exercise-01.qmd&amp;quot;, output_file = &amp;quot;exercise-01-solutions-${{ matrix.config.os }}.html&amp;quot;)&#39;
          # Commit output documents
          git config --local user.name $GITHUB_ACTOR
          git config --local user.email $GITHUB_ACTOR@users.noreply.github.com
          git pull
          git add &amp;quot;*.html&amp;quot;
          git commit * -m &amp;quot;Render practical on ${{ matrix.config.os }}&amp;quot; || echo &#39;No changes to commit&#39;
          git push origin || echo &#39;No changes to commit&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Crikey, that&amp;rsquo;s alot, let&amp;rsquo;s break that down.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;on:&lt;/code&gt; section defines this will run
&lt;ul&gt;
&lt;li&gt;on pushes to the main branch,&lt;/li&gt;
&lt;li&gt;if the workflow dispatch button is clicked in the GitHub interface,&lt;/li&gt;
&lt;li&gt;and once per month (at midnight on the first day on the month) as defined by our &lt;code&gt;cron&lt;/code&gt; syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;jobs:&lt;/code&gt; section specifies
&lt;ul&gt;
&lt;li&gt;we will run this on 3 different operating systems, Windows (most of my students/course participants have Windows laptops, followed by macOS), macOS, and Ubuntu Linux. 
&lt;a href=&#34;https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;More info about GitHub Actions runners is available&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-parallel: 1&lt;/code&gt; says that each job will run in turn (this isn&amp;rsquo;t really needed but just to be safe since I will commit the output documents back into the repository)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env:&lt;/code&gt; specifies that we grant the jobs permission with out GitHub token&lt;/li&gt;
&lt;li&gt;&lt;code&gt;steps:&lt;/code&gt; defines what will run, which is
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we checkout the repo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we then install R and Quarto using the relevant actions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we setup the R dependency packages. I am not using &lt;strong&gt;renv&lt;/strong&gt;, so the action knows how to do this because I have included a &lt;em&gt;DESCRIPTION&lt;/em&gt; file in the repo (to the action we are faking that the repo is an R package - this is a trick from Hadley Wickham). The 
&lt;a href=&#34;https://github.com/remlapmot/example-exercise-to-run-on-schedule/blob/main/DESCRIPTION&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;full file is in the repository&lt;/a&gt; but the key entry is the &lt;em&gt;Imports&lt;/em&gt; list of hard depdenency packages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;...
Imports:
    knitr,
    quarto,
    sessioninfo
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;we specify &lt;code&gt;upgrade: &#39;TRUE&#39;&lt;/code&gt; to always install the latest version of the dependency packages.&lt;/li&gt;
&lt;li&gt;then we finally render the two versions of our Quarto document. Here we append the operating system name into the output document filenames and we commit these files back into the repository for our records. We have to specify &lt;code&gt;shell: bash&lt;/code&gt; because otherwise the Windows runner will use Powershell and the environment variable syntax in the &lt;code&gt;git config&lt;/code&gt; commands would be incorrect. Also we need a &lt;code&gt;git pull&lt;/code&gt; before making the commit because we have 3 jobs running in series, so there will new/amended files in the repo after the first and second jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phew!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s worth pointing out that instead of a Quarto document our practical could be in an R Markdown document or an R script (we&amp;rsquo;d just need to make the relevant changes in the workflow file above such as adding Pandoc and amending the render commands).&lt;/p&gt;
&lt;p&gt;Note, GitHub Actions only works for free in a public repository; so obviously this can&amp;rsquo;t be used for any material that is assessed.&lt;/p&gt;
&lt;h2 id=&#34;surprise-benefits&#34;&gt;Surprise benefits&lt;/h2&gt;
&lt;p&gt;A nice side effect of using the &lt;code&gt;r-lib/actions/setup-r&lt;/code&gt; and &lt;code&gt;quarto-dev/quarto-actions/setup&lt;/code&gt; actions is that they update to the release version of R/Quarto as updates are released. So you don&amp;rsquo;t have to worry about updating the version of R/Quarto.&lt;/p&gt;
&lt;h2 id=&#34;github-actions-woes&#34;&gt;GitHub Actions woes&lt;/h2&gt;
&lt;p&gt;At this point I acknowledge that sometimes GitHub Actions can be more trouble than they are worth. This is because they often fail for reasons which are not problems with your code. For example, I had one repository in which the Windows runner would regularly lose internet connection (I have no idea why) half way through installing the R dependency packages and hence would regularly notify me of a failed check. Also you need to keep the code in your workflow file up-to-date. Usually a quick comparison to the current version of the example in the r-lib/actions repo is enough to show you what you need to change.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to use GitHub Actions scheduling feature to automatically run scheduled checks on R packages and R scripts/R Markdown/Quarto documents for practicals enabling you to keep on top of any changes in your dependency packages and indeed in any changes in the release versions of R and Quarto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Finder Smart Folder of your RStudio Project files to enable super fast project launching</title>
      <link>https://remlapmot.github.io/post/2025/smart-folders/</link>
      <pubDate>Fri, 21 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/smart-folders/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When I&amp;rsquo;m switching projects I naturally start with Finder. I&amp;rsquo;m sure if I became a Terminal warrior there are faster ways of searching for files (e.g. the 
&lt;a href=&#34;https://github.com/alexpasmantier/television&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Television&lt;/a&gt; fuzzy finder TUI). And I know there are other ways to avoid using Finder, e.g., using Spotlight, 
&lt;a href=&#34;https://www.alfredapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alfred&lt;/a&gt;, or 
&lt;a href=&#34;https://www.raycast.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Raycast&lt;/a&gt;; and indeed I do have 
&lt;a href=&#34;https://rstats.wtf/projects#tricks-for-opening-projects&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this fantastic tip&lt;/a&gt; that allows Alfred to find RStudio project files setup. But something to do with how I learnt to use a computer just naturally means I&amp;rsquo;m wedded to Finder, but navigating through my mess of nested directories wastes time and energy.&lt;/p&gt;
&lt;p&gt;I realised that Finder on macOS has a helpful feature called Smart Folders. We can use this to setup a saved search of RStudio Project &lt;em&gt;.Rproj&lt;/em&gt; files (and/or VSCode/Positron &lt;em&gt;.code-workspace&lt;/em&gt; files) to allow us to see all the &lt;em&gt;.Rproj&lt;/em&gt; files on our computer. This makes finding and opening projects from within Finder fast and convenient.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-smart-folder-of-your-rstudio-project-files&#34;&gt;Setting up a Smart Folder of your RStudio project files&lt;/h2&gt;
&lt;p&gt;In Finder;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;navigate to the folder you want your search to start in, either your home folder or your Documents folder are obvious candidates&lt;/li&gt;
&lt;li&gt;click File | New Smart Folder&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/new-smart-folder.png&#34; alt=&#34;Screenshot of creating a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;near the top right corner click the plus button next to the &lt;em&gt;Save&lt;/em&gt; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/plus-to-right-of-save.png&#34; alt=&#34;Screenshot of creating a new condition as part for a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;we need to add the &lt;em&gt;File extension&lt;/em&gt; attribute to the choices, click &lt;em&gt;Name&lt;/em&gt; near the top left, then &lt;em&gt;Other&amp;hellip;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/name-other.png&#34; alt=&#34;Screenshot of adding a new attribute as part for a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Then search for &lt;em&gt;File extension&lt;/em&gt; and check the box on the right handside&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/adding-file-extension-attribute.png&#34; alt=&#34;Screenshot of adding the file extension attribute as part for a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;enter &lt;em&gt;Rproj&lt;/em&gt; in the box (it doesn&amp;rsquo;t seem to matter if you include the . first)&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/entering-file-extension.png&#34; alt=&#34;Screenshot of adding the file extension condition as part for a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;click &lt;em&gt;Save&lt;/em&gt; (near top right corner) and give it a sensible name, e.g., &lt;em&gt;Rproj.savedSearch&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/saving.png&#34; alt=&#34;Screenshot of saving the new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;And you&amp;rsquo;ll see the new virtual folder appear on the left Finder sidebar - 
&lt;a href=&#34;#top&#34;&gt;see the screenshot at the top of this post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can create additional Smart Folders for other useful file extensions, for example, VSCode/Positron project files (&lt;em&gt;.code-workspace&lt;/em&gt; files).&lt;/p&gt;
&lt;p&gt;On Windows, I don&amp;rsquo;t believe that there is an exact equivalent of a Smart Folder. I think that the closest you can get is to save a search in File Explorer. However, I find that in recent years File Explorer on Windows 11 has become incredibly slow and regularly crashes. Searching in 
&lt;a href=&#34;https://files.community/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Files&lt;/a&gt; or 
&lt;a href=&#34;https://filepilot.tech/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;File Pilot&lt;/a&gt; is now much faster and more reliable.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to create a Smart Folder of your RStudio Project files for fast and convenient project launching on macOS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating R, Python, Stata, and Julia tutorial worksheets (with and without solutions) using Quarto</title>
      <link>https://remlapmot.github.io/post/2025/quarto-conditional-content/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/quarto-conditional-content/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I regularly need to produce exercises/tutorials for my students. One fantastic feature of R Markdown is that it allows me to create one R Markdown document which can be rendered to both the question document and the solutions document. This is achieved by toggling knitr chunk options such as eval, echo, and include, and using asis chunks to include the text for the solutions. I wrote a little package, 
&lt;a href=&#34;https://remlapmot.github.io/knitexercise/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;knitexercise&lt;/strong&gt;&lt;/a&gt; to help with this.&lt;/p&gt;
&lt;p&gt;The toggling of the knitr chunk options can be parameterised making it possible to have an R script which contains the code to conveniently produce both questions and solutions documents. An example R Markdown file, &lt;em&gt;exercise.Rmd&lt;/em&gt;, might look like the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
title: &amp;quot;`r params$title`&amp;quot;
output: html_document
params:
  solutions: TRUE
  title: &amp;quot;Example exercise: Solutions&amp;quot;
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(include = params$solutions)
```

1. This is question 1. Which might have some R code you always want to show.

   ```{r, include=TRUE}
   # example code for the question
   ```

   ```{asis}
   Paragraph text for the solution can be kept in the document in an `asis` chunk.
   And solution R code in an `r` chunk.
   Both of these will use the `include` value from the `setup` chunk.
   ```
    
   ```{r}
   # example code for the solution
   ```

2. This is question 2 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the rendering script might look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rmarkdown::render(&amp;quot;exercise.Rmd&amp;quot;,
  output_file = &amp;quot;exercise-questions&amp;quot;,
  params = list(solutions = FALSE, title = &amp;quot;Example exercise: Questions&amp;quot;)
)

rmarkdown::render(&amp;quot;exercise.Rmd&amp;quot;,
  output_file = &amp;quot;exercise-solutions&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;inline-code&#34;&gt;Inline code&lt;/h3&gt;
&lt;p&gt;Inline code has been a 
&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/r-code.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;feature of R Markdown&lt;/a&gt; for a while. Yihui Xie and Christophe Dervieux have used it to pull off some fantastic tricks. My favourite trick is using it to programmatically write out R Markdown/Markdown code within an R Markdown document when a certain condition is met.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;`r if (knitr::is_latex_output()) &amp;quot;...some_Markdown_to_include_when_rendering_to_pdf...&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;R Markdown is incredibly flexible because we can include R objects as document and chunk options. When translating this to a pure Quarto version we can do this in a document using in the knitr engine using the 
&lt;a href=&#34;https://quarto.org/docs/tools/rstudio.html#knitr-engine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;! expr ...&lt;/code&gt; YAML tag literal&lt;/a&gt;. As far as I am aware, this is not yet possible for any other Quarto engine. Despite this my aim was to see whether I could achieve parameterised conditional content inclusion/exclusion in a Quarto document using other engines.&lt;/p&gt;
&lt;h2 id=&#34;programmatically-including-conditional-content-in-quarto-documents&#34;&gt;Programmatically including conditional content in Quarto documents&lt;/h2&gt;
&lt;h3 id=&#34;r-knitr-and-quarto&#34;&gt;R: knitr and Quarto&lt;/h3&gt;
&lt;p&gt;I have already shown the R Markdown approach above.&lt;/p&gt;
&lt;p&gt;For Quarto using the knitr engine, in a blog post 
&lt;a href=&#34;https://nrennie.rbind.io/blog/r-tutorial-worksheets-quarto/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nicola Rennie&lt;/a&gt; used inline code to write out Quarto&amp;rsquo;s 
&lt;a href=&#34;https://quarto.org/docs/authoring/conditional.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conditional content classes&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format: html
params:
  hide_answers: true
engine: knitr
---

`r if (params$hide_answers) &amp;quot;::: {.content-hidden}&amp;quot;`

Text and code for answers.

`r if (params$hide_answers) &amp;quot;:::&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if you use the curly braces around the &lt;code&gt;r&lt;/code&gt; to write you inline code then you need to enclose the output string in the 
&lt;a href=&#34;https://quarto.org/docs/computations/inline-code.html#markdown-output&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;I()&lt;/code&gt; function&lt;/a&gt; and include the &lt;code&gt;else&lt;/code&gt; statement as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;`{r} if (params$hide_answers) I(&amp;quot;::: {.content-hidden}&amp;quot;) else &amp;quot;&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can have a shell script to render our questions and solutions documents as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;quarto render exercise-r.qmd -o exercise-r-questions.html
quarto render exercise-r.qmd -P hide_answers:false -o exercise-r-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;I realised I could adapt Nicola Rennie&amp;rsquo;s approach for other engines. For the &lt;code&gt;jupyter: python3&lt;/code&gt; engine we can do so as follows, the following code uses 
&lt;a href=&#34;https://quarto.org/docs/computations/parameters.html#jupyter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto&amp;rsquo;s parameters feature&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format: html
jupyter: python3
---

```{python}
#| include: false
#| tags: [parameters]
hide_answers = True
```

```{python}
#| include: false
from IPython.display import Markdown
```

`{python} Markdown(&amp;quot;::: {.content-hidden}&amp;quot;) if hide_answers else Markdown(&amp;quot; &amp;quot;)`

```{python}
print(&amp;quot;Hidden in questions&amp;quot;)
```

`{python} Markdown(&amp;quot;:::&amp;quot;) if hide_answers else Markdown(&amp;quot; &amp;quot;)`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shell script to render our questions and solutions documents is as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;quarto render exercise-python.qmd -o exercise-python-questions.html
quarto render exercise-python.qmd -P hide_answers:False -o exercise-python-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As of Quarto version 1.7.23 it is possible to suppress the injected parameters cell.&lt;/p&gt;
&lt;h3 id=&#34;stata&#34;&gt;Stata&lt;/h3&gt;
&lt;p&gt;The Stata case involved two additional tricks. First, the 
&lt;a href=&#34;https://hugetim.github.io/nbstata/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nbstata Jupyter kernel&lt;/a&gt; allows inline code, however this must be a 
&lt;a href=&#34;https://www.stata.com/manuals/pdisplay.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;display&lt;/code&gt; command&lt;/a&gt;, so we cannot write the if statement within the inline code. I found I can overcome this by saving the different strings in scalars (because the inline code can&amp;rsquo;t use local macros) at the top of the document as follows. Second, I didn&amp;rsquo;t try but I suspect the nbstata kernel doesn&amp;rsquo;t support parameters, and so I achieved the toggling of the code using an environment variable, e.g. &lt;code&gt;HIDE_ANSWERS_STATA&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format: html
jupyter: nbstata
---

```{stata}
*| include: false
local hide_answers : env HIDE_ANSWERS_STATA
if (`hide_answers&#39;) {
    scalar hide_answers_open = &amp;quot;::: {.content-hidden}&amp;quot;
    scalar hide_answers_close = &amp;quot;:::&amp;quot;     
}
else {
    scalar hide_answers_open = &amp;quot; &amp;quot;
    scalar hide_answers_close = &amp;quot; &amp;quot;
}
```

`{stata} scalar(hide_answers_open)`

```{stata}
display &amp;quot;Hidden in questions&amp;quot;
```

`{stata} scalar(hide_answers_close)`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shell script to render the documents is then as follows, here we define the environment variable before the call to &lt;code&gt;quarto&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;HIDE_ANSWERS_STATA=1 quarto render exercise-stata.qmd -o exercise-stata-questions.html
HIDE_ANSWERS_STATA=0 quarto render exercise-stata.qmd -o exercise-stata-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;julia&#34;&gt;Julia&lt;/h3&gt;
&lt;p&gt;For the native Julia engine I found that Quarto&amp;rsquo;s parameterisation worked and that I could avoid the inclusion of the injected parameters cell output by leaving the chunk with the &lt;code&gt;parameters&lt;/code&gt; tag empty.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format: html
engine: julia
---

```{julia}
#| tags: [parameters]
```

```{julia}
#| include: false
using Markdown
```

`{julia} hide_answers ? md&amp;quot;::: {.content-hidden}&amp;quot; : md&amp;quot;&amp;quot;`

```{julia}
println(&amp;quot;Hidden in questions&amp;quot;)
```

`{julia} hide_answers ? md&amp;quot;:::&amp;quot; : md&amp;quot;&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shell script to render the documents is then as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;quarto render exercise-julia.qmd -P hide_answers:true -o exercise-julia-questions.html
quarto render exercise-julia.qmd -P hide_answers:false -o exercise-julia-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;problems-with-environment-variables&#34;&gt;Problems with environment variables&lt;/h2&gt;
&lt;p&gt;I found that passing environment variables, to the &lt;code&gt;jupyter: python3&lt;/code&gt; and &lt;code&gt;engine: julia&lt;/code&gt; is unreliable/broken. Admittedly, I was not using Quarto in project mode with an 
&lt;a href=&#34;https://quarto.org/docs/projects/environment.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;_environment&lt;/em&gt; file&lt;/a&gt;, but honestly it doesn&amp;rsquo;t feel to me I should need to do that for a single document.&lt;/p&gt;
&lt;p&gt;The problem I found was that after a first render the value of the environment variable seems to be cached within the Quarto output document and I couldn&amp;rsquo;t change it on subsequent renders. I also found that using the 
&lt;a href=&#34;https://pypi.org/project/python-dotenv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;dotenv&lt;/strong&gt; package&lt;/a&gt; to access was broken in the same way.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;engine: julia&lt;/code&gt; I also found that passing environment variables is unreliable and like for the &lt;code&gt;jupyter: python3&lt;/code&gt; engine I experienced environment variable values being stuck after the first render. However, using the Julia 
&lt;a href=&#34;https://juliapackages.com/p/dotenv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;DotEnv&lt;/strong&gt; package&lt;/a&gt; did seem to be reliable.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to programmatically include conditional content for several Quarto engines (&lt;code&gt;knitr&lt;/code&gt;, &lt;code&gt;jupyter: python3&lt;/code&gt;, &lt;code&gt;jupyter: nbstata&lt;/code&gt;, and &lt;code&gt;engine: julia&lt;/code&gt;) using parameters or environment variables to toggle inline code to write Quarto Markdown in the Quarto documents. I use this to write exercise/tutorial documents in which a single Quarto document is used to output both the questions and solutions documents.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating effectively multi-engine Quarto documents using Quarto&#39;s embed shortcode</title>
      <link>https://remlapmot.github.io/post/2025/multi-engine-quarto/</link>
      <pubDate>Sat, 15 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/multi-engine-quarto/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Have you ever needed to present the code and output for several languages in the same document or website? I work in (non-infectious disease) Epidemiology and so it is common that researchers would like to present R and Stata code in the same document. However, a Quarto document can only run a single engine. There are already several work around solutions, which include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;writing out the different language code cells but making them unevaluated/not executed chunks (this is done alot on the 
&lt;a href=&#34;https://quarto.org/docs/reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto documentation website&lt;/a&gt;). One can also include saved plots from the different languages;&lt;/li&gt;
&lt;li&gt;if your document has a combination of languages from which you can call one from the other, such as using 
&lt;a href=&#34;https://rstudio.github.io/reticulate/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;reticulate&lt;/strong&gt;&lt;/a&gt; from within R to run Python, or using 
&lt;a href=&#34;https://cran.r-project.org/package=Statamarkdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Statamarkdown&lt;/strong&gt;&lt;/a&gt; from within R to run Stata, or using 
&lt;a href=&#34;https://cran.r-project.org/package=JuliaCall&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;JuliaCall&lt;/strong&gt;&lt;/a&gt; from within R to run Julia, then these can be combined in a Quarto document;&lt;/li&gt;
&lt;li&gt;or for some languages like R and Python we could even embed full WebAssembly implementations of the language (
&lt;a href=&#34;https://docs.r-wasm.org/webr/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebR&lt;/a&gt; and 
&lt;a href=&#34;https://pyodide.org/en/stable/#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pyodide&lt;/a&gt; respectively) within a webpage (which admittedly seems a little overkill for my work).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve found an alternative solution allowing you to use the native engines for each language. I recently stumbled across 
&lt;a href=&#34;https://quarto.org/docs/authoring/notebook-embed.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto&amp;rsquo;s embed shortcode&lt;/a&gt;. This allows another (or selected cells from another) Quarto document to be embedded in a Quarto document. A thought occurred to me, what if the embedded Quarto document/s used a different engine? Would that work? This isn&amp;rsquo;t explicitly mentioned on the documentation page, so I gave it a go. Remarkably, the answer turns out to be that it works! Let&amp;rsquo;s find out what to do.&lt;/p&gt;
&lt;h2 id=&#34;using-the-embed-shortcode-to-create-an-effectively-multi-engine-quarto-document&#34;&gt;Using the embed shortcode to create an effectively multi-engine Quarto document&lt;/h2&gt;
&lt;p&gt;In the example below I&amp;rsquo;m using a 
&lt;a href=&#34;https://quarto.org/docs/output-formats/html-basics.html#tabsets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tabset&lt;/a&gt; in a html document using the knitr engine. We embed the documents using the alternative engines for Python, Stata, and Julia using the &lt;code&gt;{{&amp;lt; embed &amp;gt;}}&lt;/code&gt; shortcode as shown below. For each language I just show printing a string and a basic plot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
title: An effectively multi-engine Quarto document using the embed shortcode
format:
  html:
    embed-resources: true
engine: knitr
---

::: {.panel-tabset .nav-pills}
## R

```{r}
print(&amp;quot;Hello World, from R&amp;quot;)
```

```{r}
#| fig-align: &amp;quot;center&amp;quot;
x &amp;lt;- seq(-10,10, by = 0.1)
y &amp;lt;- x ^ 3
plot(x, y, type = &amp;quot;l&amp;quot;)
```

## Python

{{&amp;lt; embed python-code-using-jupyter-python3-engine.qmd echo=true &amp;gt;}}

## Stata

{{&amp;lt; embed stata-code-using-jupyter-nbstata-engine.qmd echo=true &amp;gt;}}

## Julia

{{&amp;lt; embed julia-code-using-julia-engine.qmd echo=true &amp;gt;}}

:::
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;em&gt;python-code-using-jupyter-python3-engine.qmd&lt;/em&gt; document uses the &lt;code&gt;jupyter: python3&lt;/code&gt; engine (
&lt;a href=&#34;https://quarto.org/docs/computations/python.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation for using Python in Quarto&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;stata-code-using-jupyter-nbstata-engine.qmd&lt;/em&gt; document uses the &lt;code&gt;jupyter: nbstata&lt;/code&gt; engine (
&lt;a href=&#34;https://hugetim.github.io/nbstata/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation for nbstata&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;and the &lt;em&gt;julia-code-using-julia-engine.qmd&lt;/em&gt; uses &lt;code&gt;engine: julia&lt;/code&gt;. Alternatively, it should be possible to use the 
&lt;a href=&#34;https://julialang.github.io/IJulia.jl/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IJulia&lt;/a&gt; Jupyter kernel (
&lt;a href=&#34;https://quarto.org/docs/computations/julia.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation for using Julia in Quarto&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, I assume that you have setup each engine beforehand.&lt;/p&gt;
&lt;p&gt;Rendering the Quarto document above results in the embedded documents being executed and embedded within it. I&amp;rsquo;ve included the output below (and the full source code is in 
&lt;a href=&#34;https://github.com/remlapmot/quarto-multi-engine-using-embed-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this repository&lt;/a&gt;). Click the tabs to show the code and output for each language.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;iframe src=&#34;https://remlapmot.github.io/quarto-multi-engine-using-embed-example/&#34; height=&#34;1075&#34; width=&#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;p&gt;In the code above, in each case, I embed the whole Quarto document but you can also specify a specific code block id (or if the embedded document is a Jupyter Notebook, &lt;em&gt;.ipynb&lt;/em&gt; file, you can specify a cell id, label, or tag).&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to use the Quarto embed shortcode to embed Quarto documents using alternative engines to create an effectively multi-engine Quarto document.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seven tips for creating Quarto revealjs presentations</title>
      <link>https://remlapmot.github.io/post/2025/quarto-revealjs-tips/</link>
      <pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/quarto-revealjs-tips/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Like alot of lecturers I&amp;rsquo;m teaching at the moment. If I have a presentation to do that&amp;rsquo;s mainly images I&amp;rsquo;ll use Powerpoint or Google Slides. If the presentation includes maths or code or both I used to use LaTeX Beamer. Over the years I have grown tired of Beamer and so I thought I&amp;rsquo;d try making some revealjs presentations using Quarto.&lt;/p&gt;
&lt;p&gt;Revealjs has been around far longer than Quarto, I remember seeing a colleague present using revealjs in about 2012, and you can happily make a revealjs presentation without Quarto. However, the convenience of writing in the Quarto Markdown format is fantastic.&lt;/p&gt;
&lt;p&gt;To learn the basics of making revealjs slides with Quarto I recommend reading 
&lt;a href=&#34;https://quarto.org/docs/presentations/revealjs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the user guide&lt;/a&gt;. And full documentation is available 
&lt;a href=&#34;https://quarto.org/docs/reference/formats/presentations/revealjs.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and 
&lt;a href=&#34;https://quarto.org/docs/presentations/revealjs/advanced.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following tips are solutions to little hurdles that I found I needed to overcome when making my first revealjs presentations using Quarto.&lt;/p&gt;
&lt;h2 id=&#34;1-slide-size-and-testing-on-a-smaller-display-size-on-your-own-monitor&#34;&gt;1. Slide size and testing on a smaller display size on your own monitor&lt;/h2&gt;
&lt;p&gt;The great thing about making a presentation in Powerpoint or Google Slides is that you can instantly see if your content fits on a slide. So it helps to have an understanding of how big a slide is. By default a revealjs slide is 
&lt;a href=&#34;https://quarto.org/docs/presentations/revealjs/advanced.html#presentation-size&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1050px wide by 700px tall&lt;/a&gt;. This helps you when setting the size of figures and code blocks.&lt;/p&gt;
&lt;p&gt;Additionally it is helpful to be able to preview your slides on the size on monitor you will be presenting on. My University has 1080p monitors in most lecture theatres, however, my monitor is bigger than that. Chrome allows setting the size of the display by opening Developer Tools (Three dots | More tools | Developer Tools). Then you can enter the desired resolution in the top bar as follows (a 1080p screen is 1080 pixels tall and 1920 pixels wide).&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-revealjs-tips/img/slide-size-and-1080p.png&#34; alt=&#34;Screenshot of using Google Chrome developer tools to inspect the size of a slide and to preview the slides at 1080p resolution.&#34; width=&#34;700&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;I find this especially helpful when working on a Mac, whose laptops often have unusual screen resolutions.&lt;/p&gt;
&lt;h2 id=&#34;2-wider-width-cutoff-in-code-chunks&#34;&gt;2. Wider width cutoff in code chunks&lt;/h2&gt;
&lt;p&gt;Vertical space on a slide is at a premium. Therefore, in a presentation I line break my code wider that I do when coding normally. As described in the 
&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/opts-tidy.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RMarkdown cookbook&lt;/a&gt; and in 
&lt;a href=&#34;https://github.com/quarto-dev/quarto-cli/issues/5852&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this GitHub issue&lt;/a&gt; we can enable the use of the &lt;strong&gt;formatR&lt;/strong&gt; package on a code chunk using the &lt;code&gt;tidy&lt;/code&gt; and &lt;code&gt;tidy-opts&lt;/code&gt; chunk options (I think the default is 85 characters, so I choose a value greater than that. I find that 110 is about the widest I can set).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;```{r}
#| tidy: TRUE
#| tidy-opts: !expr list(width.cutoff = I(110))
# ... Wide R code here ...
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also set these globally for the Quarto document in either the YAML header,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;knitr:
  opts_chunk: 
    tidy: TRUE
    tidy-opts: !expr list(width.cutoff = I(110))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or in a chunk at the top of your Quarto document.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;```{r}
#| include: false
knitr::opts_chunk$set(tidy = TRUE, tidy.opts = list(width.cutoff = I(110)))
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-taller-code-chunks&#34;&gt;3. Taller code chunks&lt;/h2&gt;
&lt;p&gt;Code chunks come in several flavours in a rendered presentation. There are code input chunks, code output chunks, and chunks for any code output errors. To make the input code chunks taller there is a convenient 
&lt;a href=&#34;https://quarto.org/docs/presentations/revealjs/#code-block-height&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto option &lt;code&gt;code-block-height&lt;/code&gt;&lt;/a&gt; which is specified in the YAML header (the default is 500px, so pick a value greater than that).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
format:
  revealjs:
    code-block-height: 650px
---
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-taller-code-output-chunks&#34;&gt;4. Taller code output chunks&lt;/h2&gt;
&lt;p&gt;Currently, there doesn&amp;rsquo;t seem to be a Quarto option to make the code output chunks taller. Therefore I had to inspect the source code of the html slides to find out how to modify this. In most browsers simply right click on a slide and in Chrome click &lt;em&gt;Inspect&lt;/em&gt; - do this over the element on the page you want to find out about.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-revealjs-tips/img/chrome-context-menu-inspect.png&#34; alt=&#34;Screenshot of Google Chrome context menu.&#34; width=&#34;600&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Doing so over a code output cell shows the developer tools on the right handside. We can then see that the elements and classes for the code output cell are given just above the bottom right pane, i.e., &lt;code&gt;div.cell div.cell-output.cell-output-stdout pre code&lt;/code&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-revealjs-tips/img/inspect-output-cell.png&#34; alt=&#34;Screenshot of using Google Chrome developer tools to inspect the CSS class of an element of a code output cell.&#34; width=&#34;500&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Therefore, we can make the code output cell have a taller maximum height by specifying &lt;code&gt;max-height&lt;/code&gt; as follows in a CSS file which we reference in the YAML header. Note that the default is 400px, so choose a value larger than that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
format:
  revealjs:
    css: custom.css
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The contents of &lt;em&gt;custom.css&lt;/em&gt; use the elements and classes of the code chunk we discovered as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.cell .cell-output-stdout pre code {
  max-height: 650px; // Adjust this value as needed
  overflow-y: auto; // Add this to handle overflow
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-embedding-interactive-mentimeter-presentations&#34;&gt;5. Embedding interactive Mentimeter presentations&lt;/h2&gt;
&lt;p&gt;Mentimeter provides the html code required to embed a presentation within an html document. To obtain this, go into a presentation and click the &lt;em&gt;Share&lt;/em&gt; button, then select the &lt;em&gt;Slides&lt;/em&gt; tab, then click &lt;em&gt;Copy code&lt;/em&gt; under &lt;em&gt;Embed slides&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-revealjs-tips/img/mentimeter-share-iframe-code.png&#34; alt=&#34;Screenshot of the menu to copy the html code to embed a Mentimeter presentation.&#34; width=&#34;700&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;This results in a div containing an iframe, which we can simply paste in as the content of our slide (I have added the line breaks and replaced part of the URL to my presentation with hashes).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## My slide with an embedded Menti

&amp;lt;div style=&#39;position: relative; padding-bottom: 56.25%; padding-top: 35px;
  height: 0; overflow: hidden;&#39;&amp;gt;
&amp;lt;iframe sandbox=&#39;allow-scripts allow-same-origin allow-presentation&#39;
  allowfullscreen=&#39;true&#39; allowtransparency=&#39;true&#39; frameborder=&#39;0&#39; height=&#39;315&#39;
  src=&#39;https://www.mentimeter.com/app/presentation/###############/embed&#39;
  style=&#39;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#39;
  width=&#39;420&#39;&amp;gt;
&amp;lt;/iframe&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But when I first rendered a presentation using this code I didn&amp;rsquo;t see my Mentimeter presentation in the relevant slide but rather the following spinning dots.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-revealjs-tips/img/menti-failing-to-load.gif&#34; alt=&#34;Animated GIF of the spinning dots when a Mentimeter presentation is incorrectly embedded in an HTML document.&#34; width=&#34;170&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Thanks 
&lt;a href=&#34;https://stackoverflow.com/questions/79092017/quarto-markdown-to-revealjs-or-html-desmos-embedded-iframes-not-loading&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;to this post&lt;/a&gt; it turns out this is because I had specified &lt;code&gt;embed-resources: true&lt;/code&gt; in my revealjs options in the YAML header. When you do this you need to add the &lt;code&gt;data-external=&amp;quot;1&amp;quot;&lt;/code&gt; attribute to the iframe 
&lt;a href=&#34;https://quarto.org/docs/reference/formats/presentations/revealjs.html#rendering&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;as detailed in the Quarto documentation&lt;/a&gt; as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;iframe data-external=&amp;quot;1&amp;quot; sandbox=...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then my Mentimeter presentation was correctly embedded in the slide as per the screenshot at the 
&lt;a href=&#34;#top&#34;&gt;top of this post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;6-disable-html-table-processing-for-some-tables&#34;&gt;6. Disable HTML table processing for some tables&lt;/h2&gt;
&lt;p&gt;There are now so many fantastic R packages for html table generation. My two favourite are 
&lt;a href=&#34;https://www.danieldsjoberg.com/gtsummary/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;gtsummary&lt;/strong&gt;&lt;/a&gt; and 
&lt;a href=&#34;https://strengejacke.github.io/sjPlot/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;sjPlot&lt;/strong&gt;&lt;/a&gt;. However, I notice that for some &lt;strong&gt;sjPlot&lt;/strong&gt; tables Quarto issues the following warning when rendering the slides.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;WARNING (/Applications/quarto/share/filters/main.lua:9319) Unable to parse table from raw html block: skipping.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To avoid this it&amp;rsquo;s possible to 
&lt;a href=&#34;https://quarto.org/docs/authoring/tables.html#disabling-quarto-table-processing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;disable Quarto&amp;rsquo;s html table processing&lt;/a&gt; using the &lt;code&gt;html-table-processing&lt;/code&gt; argument either at the document or chunk level. Here is an example slide doing so at the chunk level.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## Slide presenting a multilevel model

```{r}
#| html-table-processing: none
library(sjPlot)
library(lme4)
fm1 &amp;lt;- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
tab_model(fm1)
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-programmatic-rendering-and-pdf-export-for-printing&#34;&gt;7. Programmatic rendering and pdf export for printing&lt;/h2&gt;
&lt;p&gt;To render a Quarto document we can click the &lt;em&gt;Render&lt;/em&gt; button in RStudio, but I find it easier to make a &lt;em&gt;render.R&lt;/em&gt; script with a call to the 
&lt;a href=&#34;https://quarto-dev.github.io/quarto-r/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;quarto&lt;/strong&gt;&lt;/a&gt; package&amp;rsquo;s &lt;code&gt;quarto_render()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s helpful to provide students with a pdf copy of the slides for printing. You can do this in a browser through the print menu or programmatically using &lt;strong&gt;pagedown&lt;/strong&gt;&amp;rsquo;s &lt;code&gt;chrome_print()&lt;/code&gt; function. When I called this function with no options the page size of the pdf was unusual, producing pages with neither A4 nor US paper size, so I call it as follows to ensure an A4 page size.&lt;/p&gt;
&lt;p&gt;Therefore, my &lt;em&gt;render.R&lt;/em&gt; script often looks something like the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;quarto::quarto_render(input = &amp;quot;my-great-slides.qmd&amp;quot;)

pagedown::chrome_print(&amp;quot;my-great-slides.html&amp;quot;, 
  options = 
    list(
      printBackground = FALSE,
      preferCSSPageSize = FALSE, 
      paperWidth = 8.3, paperHeight = 11.7, 
      marginTop = 0.1, marginBottom = 0.1, 
      marginLeft = 0.1, marginRight = 0.1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I usually find that a few slides have slightly too much content for an A4 page, and so those slides will take up 2 pages in the pdf. And hence the pdf usually has a few more pages than the number of slides.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown seven tips that I needed to workout when making revealjs presentations with Quarto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My #GitHubUnwrapped 2024!</title>
      <link>https://remlapmot.github.io/post/2025/github-unwrapped-2024/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/github-unwrapped-2024/</guid>
      <description>&lt;p&gt;My #GitHubUnwrapped 2024!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;&lt;iframe src=&#34;https://drive.google.com/file/d/10zFAtzcEFhxLNSRDZDXUgnafU4GDVepZ/preview&#34; width=&#34;640&#34; height=&#34;480&#34; allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Made with 
&lt;a href=&#34;https://www.githubunwrapped.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.githubunwrapped.com/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Launch RStudio, Positron, and other Data Science apps from your Finder Toolbar</title>
      <link>https://remlapmot.github.io/post/2024/finder-toolbar-apps/</link>
      <pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/finder-toolbar-apps/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Have you ever wanted to be able to quickly open a Data Science app, say RStudio Desktop or Positron in the current Finder window at the click of a button? We&amp;rsquo;ll see how to achieve this by creating Automator apps. Here&amp;rsquo;s a screenshot of what we&amp;rsquo;ll end up with.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/finder-toolbar-apps/img/finder-window-with-toolbar-apps.png&#34; alt=&#34;Screenshot of a Finder window with app icons in its toolbar.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;creating-the-automator-apps&#34;&gt;Creating the Automator apps&lt;/h2&gt;
&lt;p&gt;Open Automator and select &lt;em&gt;New&lt;/em&gt; then &lt;em&gt;Application&lt;/em&gt; and click &lt;em&gt;Choose&lt;/em&gt;. Then in the top left search bar enter &lt;em&gt;applescript&lt;/em&gt; and drag and drop the &lt;em&gt;Run Applescript&lt;/em&gt; action onto the main window.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/finder-toolbar-apps/img/automator-run-applescript.png&#34; alt=&#34;Screenshot of the Automator app.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;We then need to enter the relevant AppleScript code for launching each app in the current Finder window. Currently, I use 
&lt;a href=&#34;https://wezfurlong.org/wezterm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WezTerm&lt;/a&gt; for my terminal emulator, 
&lt;a href=&#34;https://zed.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zed&lt;/a&gt; as my main text editor, 
&lt;a href=&#34;https://posit.co/products/open-source/rstudio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Desktop&lt;/a&gt; for most of my R/R Markdown/Quarto coding, 
&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Visual Studio Code&lt;/a&gt; for other text editing tasks, and I have been starting to try out 
&lt;a href=&#34;https://positron.posit.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Positron&lt;/a&gt;. My AppleScript code for each app is as follows.&lt;/p&gt;
&lt;h3 id=&#34;rstudio-desktop&#34;&gt;RStudio Desktop&lt;/h3&gt;
&lt;p&gt;It is worth noting that RStudio automatically detects whether there is an &lt;em&gt;.Rproj&lt;/em&gt; file in the directory and opens in project mode if one is found (note this only works if RStudio is not already open).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    set myWin to window 1
    set thePath to (quoted form of POSIX path of (target of myWin as alias))
    do shell script &amp;quot;/Applications/RStudio.app/Contents/MacOS/RStudio &amp;quot; &amp;amp; thePath
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create an alternative app which specifically opens RStudio project (&lt;em&gt;.Rproj&lt;/em&gt;) files as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    try
      set currentFolder to (folder of window 1) as alias
      set workspaceFiles to (every file of currentFolder whose name extension is &amp;quot;Rproj&amp;quot;)
      if (count of workspaceFiles) = 0 then 
        display dialog &amp;quot;No Rproj files found in directory.&amp;quot;
      else if (count of workspaceFiles) = 1 then 
        set workspaceFile to item 1 of workspaceFiles
        set workspacePath to POSIX path of (workspaceFile as alias)
        do shell script &amp;quot;open -n -a RStudio &amp;quot; &amp;amp; quoted form of workspacePath
      else if (count of workspaceFiles) &amp;gt; 1 then 
        display dialog &amp;quot;Multiple Rproj files found in directory.&amp;quot;
      end if
      on error
        display dialog &amp;quot;No Finder window is open.&amp;quot;
      end try
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;wezterm&#34;&gt;WezTerm&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    set myWin to window 1
    set thePath to (quoted form of POSIX path of (target of myWin as alias))
    do shell script &amp;quot;/opt/homebrew/bin/wezterm-gui start --cwd &amp;quot; &amp;amp; thePath
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;zed&#34;&gt;Zed&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    set myWin to window 1
    set thePath to (quoted form of POSIX path of (target of myWin as alias))
    do shell script &amp;quot;/usr/local/bin/zed -n &amp;quot; &amp;amp; thePath
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;r-launched-in-a-wezterm-terminal-session&#34;&gt;R launched in a WezTerm terminal session&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    set myWin to window 1
    set thePath to (quoted form of POSIX path of (target of myWin as alias))
    do shell script &amp;quot;/opt/homebrew/bin/wezterm-gui start --cwd &amp;quot; &amp;amp; thePath &amp;amp; &amp;quot; -- /usr/local/bin/R&amp;quot;
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;visual-studio-code-and-positron&#34;&gt;Visual Studio Code and Positron&lt;/h3&gt;
&lt;p&gt;First enable the ability to launch these apps with &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;positron&lt;/code&gt; from a Terminal in each app, see 
&lt;a href=&#34;https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and 
&lt;a href=&#34;https://positron.posit.co/add-to-path.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This script is more involved because we first check for any &lt;em&gt;.code-workspace&lt;/em&gt; files and open one if found. My AppleScript coding is not very proficient, so there may more efficient approaches to coding this. If we didn&amp;rsquo;t explicitly open the &lt;em&gt;.code-workspace&lt;/em&gt; file and if one is present in the directory Visual Studio Code/Positron will detect it and pop up a dialogue box asking if we want to reopen the directory as a workspace (I just prefer to skip this step).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    try
      set currentFolder to (folder of window 1) as alias
      set workspaceFiles to (every file of currentFolder whose name extension is &amp;quot;code-workspace&amp;quot;)
      if (count of workspaceFiles) = 0 then 
        set folderPath to POSIX path of currentFolder
        do shell script &amp;quot;/usr/local/bin/positron -n &amp;quot; &amp;amp; quoted form of folderPath
      else if (count of workspaceFiles) = 1 then 
        set workspaceFile to item 1 of workspaceFiles
        set workspacePath to POSIX path of (workspaceFile as alias)
        do shell script &amp;quot;/usr/local/bin/positron -n &amp;quot; &amp;amp; quoted form of workspacePath
      else if (count of workspaceFiles) &amp;gt; 1 then 
        display dialog &amp;quot;Multiple code-workspace files found in directory.&amp;quot;  
      end if
      on error
        display dialog &amp;quot;No Finder window is open.&amp;quot;
      end try
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(For your Visual Studio Code app simply replace &lt;code&gt;positron&lt;/code&gt; with &lt;code&gt;code&lt;/code&gt;.)&lt;/p&gt;
&lt;h3 id=&#34;saving-and-adding-icons&#34;&gt;Saving and adding icons&lt;/h3&gt;
&lt;p&gt;After adding the AppleScript code save each app. I call mine, e.g., &lt;em&gt;RStudio-openhere.app&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Next it is helpful to give each app the relevant icon. To do this in Finder bring up the Info boxes for the original app and your &lt;em&gt;-openhere&lt;/em&gt; version by selecting each app and pressing &lt;kbd&gt;Cmd&lt;/kbd&gt;+&lt;kbd&gt;I&lt;/kbd&gt;. Next drag the large icon from the original app onto the small icon of your &lt;em&gt;-openhere&lt;/em&gt; app.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/finder-toolbar-apps/img/updating-icon.png&#34; alt=&#34;Screenshot of copying the Positron icon onto our openhere app.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h3 id=&#34;adding-the-apps-to-the-finder-toolbar&#34;&gt;Adding the apps to the Finder toolbar&lt;/h3&gt;
&lt;p&gt;Finally, we need to place shortcuts of these apps onto the Finder toolbar. To do this first hold down &lt;kbd&gt;Cmd&lt;/kbd&gt; then drag the app from Finder onto the toolbar to the location you would like. On release the app should now be in the toolbar. (And to remove an icon from the toolbar, again hold &lt;kbd&gt;Cmd&lt;/kbd&gt; then drag it off the toolbar.)&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/finder-toolbar-apps/img/add-app-to-toolbar.png&#34; alt=&#34;Screenshot of moving our Positron-openhere app onto the Finder toolbar.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to create Automator apps to open RStudio Desktop, Positron, and several other Data Science apps from the current Finder window.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Supercharge your #rstats web searching in Google Chrome with Site Search Shortcuts</title>
      <link>https://remlapmot.github.io/post/2024/chrome-site-search-shortcuts/</link>
      <pubDate>Fri, 14 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/chrome-site-search-shortcuts/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Have you ever typed &lt;code&gt;Amazon&lt;/code&gt; into the Google Chrome address bar and seen the address bar indicate that it&amp;rsquo;s now searching the Amazon site? It turns out this is a feature in Google Chrome called site search shortcuts.&lt;/p&gt;
&lt;p&gt;We can see what default shortcuts Chrome provides by in the Chrome address bar going to &lt;code&gt;chrome://settings/searchEngines&lt;/code&gt; and scrolling to the &lt;em&gt;Site Search&lt;/em&gt; section.&lt;/p&gt;
&lt;p&gt;From here we can see that we can define our own shortcuts, so let&amp;rsquo;s define some helpful ones related to R and statistics.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;helpful-google-chrome-site-search-shortcuts-for-r-and-statistics&#34;&gt;Helpful Google Chrome site search shortcuts for R and statistics&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://r-pkg.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;METACRAN&lt;/a&gt; provides several amazingly useful services around CRAN.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A shortcut for searching the METACRAN CRAN mirror on GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Name: CRAN mirror on GitHub
Shortcut: @cran
URL with %s in place of query:
https://github.com/search?q=user%3Acran%20%s&amp;amp;ref=opensearch&amp;amp;type=code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the Chrome settings page click add and enter the information. To use this simply type &lt;code&gt;@cran&lt;/code&gt; into the address bar&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/chrome-site-search-shortcuts/img/cran-shortcut-step1.png&#34; alt=&#34;Screenshot of a site search shortcut in the Google Chrome address bar.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;and then type your search term&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/chrome-site-search-shortcuts/img/cran-shortcut-step2.png&#34; alt=&#34;Screenshot of a site search shortcut in the Google Chrome address bar.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Here are some other shortcuts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A shortcut for searching for a package description on METACRAN&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Name: METACRAN
Shortcut: @metacran
URL with %s in place of query:
https://r-pkg.org/search.html/?q=%s
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;A shortcut for searching using 
&lt;a href=&#34;https://rseek.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rseek&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Name: Rseek
Shortcut: @rseek
URL with %s in place of query:
https://rseek.org/?q=%s
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;A shortcut for searching 
&lt;a href=&#34;https://r-universe.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R-universe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Name: R-universe
Shortcut: @runi
URL with %s in place of query:
https://r-universe.dev/search/?q=%s
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;A shortcut for searching the third edition of the Oxford Dictionary of Statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Name: Oxford Dictionary of Statistics
Shortcut: @stats
URL with %s in place of query:
https://www.oxfordreference.com/search?source=%2F10.1093%2Facref%2F9780199679188.001.0001%2Facref-9780199679188&amp;amp;q=%s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we could define many more.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In summary we have defined several Google Chrome site search shortcuts related to R and statistics.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I am following an excellent 
&lt;a href=&#34;https://chromeunboxed.com/chrome-site-search-shortcuts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blogpost&lt;/a&gt; by Chrome Unboxed.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Running MLwiN using mlnscript via the R2MLwiN R package on Apple Silicon Macs </title>
      <link>https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/</link>
      <pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;MLwiN from the Centre for Multilevel Modelling (CMM) at the University of Bristol (disclaimer: where I also work) is a fantastic piece of software (
&lt;a href=&#34;#ref-mlwin&#34;&gt;Charlton et al. 2024&lt;/a&gt;). The name suggests it only works on Windows, but as we’ll find out this is very much not the case.&lt;/p&gt;
&lt;p&gt;However, in the past this was sort of true because to make it work on a Mac (or Linux machine) with an Intel processor one would need to run it using 
&lt;a href=&#34;https://www.winehq.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More recently, CMM have cleverly made the MLwiN libraries available for other operating systems in a command line version of the program called &lt;code&gt;mlnscript&lt;/code&gt; and an accompanying library. The files for macOS are universal binaries which means that they run natively on both Intel and Apple Silicon Macs. Let’s find out how to set this up.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;setting-up-mlnscript-on-an-apple-silicon-mac&#34;&gt;Setting up mlnscript on an Apple Silicon Mac&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Obtain the installer for macOS. See the relevant download page (depending upon whether you are an academic) on the MLwiN 
&lt;a href=&#34;https://www.bristol.ac.uk/cmm/software/mlwin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;website&lt;/a&gt;. On the form on the &lt;em&gt;File to download&lt;/em&gt; dropdown menu select the &lt;em&gt;mlnscript for MacOS&lt;/em&gt; option. This will give you the &lt;em&gt;MLN.dmg&lt;/em&gt; installer.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/img/mlwin-download-choice.png&#34; alt=&#34;Screenshot of MLwiN download choices.&#34; width=&#34;350&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Double click the installer. On macOS it is recommended to install the files into the &lt;em&gt;/opt/mln/&lt;/em&gt; directory, which you will need to create with Admin permissions, or install to another directory if you don’t have Admin permissions. Copy the 2 files &lt;em&gt;mlnscript&lt;/em&gt; and &lt;em&gt;libmln.dylib&lt;/em&gt; into the &lt;em&gt;/opt/mln&lt;/em&gt; (or other) directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once installed we can check that &lt;em&gt;mlnscript&lt;/em&gt; and &lt;em&gt;libmln.dylib&lt;/em&gt; are universal binaries as follows (we could also use the &lt;code&gt;file&lt;/code&gt; command).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lipo -archs /opt/mln/mlnscript
## x86_64 arm64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since both architectures are listed in the output this indicates the files are universal binaries. Apple Silicon Macs will use the arm64 architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we need to grant the two files permission to run. To do this run the following in your Terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/mln/mlnscript --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On first run, this will fail with a pop-up similar to the following.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/img/security-popup-01.png&#34; alt=&#34;Screenshot of macOS security warning pop-up.&#34; width=&#34;350&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Click &lt;em&gt;Cancel&lt;/em&gt; and then go into the &lt;em&gt;System settings&lt;/em&gt; | &lt;em&gt;Privacy &amp;amp; Security&lt;/em&gt; and scroll down and click &lt;em&gt;Allow Anyway&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/img/mlnscript-settings.png&#34; alt=&#34;Screenshot of macOS privacy and security setting.&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Then running the version check command again you may receive another popup in which you click &lt;em&gt;Open&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/img/security-popup-02.png&#34; alt=&#34;Screenshot of macOS security warning pop-up.&#34; width=&#34;350&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this the first popup will then appear but about the &lt;em&gt;libmln.dylib&lt;/em&gt; file. Again set the security setting to &lt;em&gt;Allow All&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now running the version check command again you should see the version number – which is currently 3.10.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/mln/mlnscript --version
## 3.13
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In R we then install the &lt;strong&gt;R2MLwiN&lt;/strong&gt; package from CRAN (
&lt;a href=&#34;#ref-r2mlwin&#34;&gt;Zhang et al. 2016&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;R2MLwiN&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This completes the setup - phew 😮!&lt;/p&gt;
&lt;h2 id=&#34;running-a-multilevel-model&#34;&gt;Running a multilevel model&lt;/h2&gt;
&lt;p&gt;For an example we could run one of the demos in the package, we can list those with the following code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;demo(package = &amp;quot;R2MLwiN&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can run one, for example, let’s fit the random intercept model from the &lt;em&gt;UserGuide02&lt;/em&gt; demo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(R2MLwiN)
# if you did not install mlnscript and libmln.dylib in /opt/mln , set:
# options(MLwiN_path = &amp;quot;/path-to/mlnscript&amp;quot;)
(mymodel1 &amp;lt;- runMLwiN(normexam ~ 1 + sex + (1 | student), data = tutorial))
#&amp;gt; 
#&amp;gt; -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- 
#&amp;gt; MLwiN (version: unknown or &amp;gt;3.09)  multilevel model (Normal) 
#&amp;gt; Estimation algorithm:  IGLS        Elapsed time : 0.03s 
#&amp;gt; Number of obs:  4059 (from total 4059)        The model converged after 3 iterations.
#&amp;gt; Log likelihood:      -5727.9 
#&amp;gt; Deviance statistic:  11455.7 
#&amp;gt; --------------------------------------------------------------------------------------------------- 
#&amp;gt; The model formula:
#&amp;gt; normexam ~ 1 + sex + (1 | student)
#&amp;gt; Level 1: student      
#&amp;gt; --------------------------------------------------------------------------------------------------- 
#&amp;gt; The fixed part estimates:  
#&amp;gt;                Coef.   Std. Err.       z    Pr(&amp;gt;|z|)         [95% Conf.   Interval] 
#&amp;gt; Intercept   -0.14035     0.02463   -5.70   1.209e-08   ***     -0.18862    -0.09208 
#&amp;gt; sexgirl      0.23367     0.03179    7.35   1.985e-13   ***      0.17136     0.29598 
#&amp;gt; Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1  
#&amp;gt; --------------------------------------------------------------------------------------------------- 
#&amp;gt; The random part estimates at the student level: 
#&amp;gt;                   Coef.   Std. Err. 
#&amp;gt; var_Intercept   0.98454     0.02185 
#&amp;gt; -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see the output is in several sections. The first section tells us about how &lt;code&gt;mlnscript&lt;/code&gt;, which estimation algorithm it used, hwo long it took to fit the model, and some characteristics of the dataset. The second section tells us about the model, in this case a random intercept model. The third section is the fixed effect estimates and the associated statistical inference for them. The fourth section is the random effect variance estimates.&lt;/p&gt;
&lt;p&gt;And we can continue with our multilevel modelling as we like.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Despite having &lt;em&gt;Win&lt;/em&gt; in its name, MLwiN is available as a command line program, &lt;code&gt;mlnscript&lt;/code&gt;, which is available on operating systems other than Windows (and indeed with other architectures), including macOS for both Intel and Apple Silicon processors and various Linux and Unix distributions (CentOS, Debian, Fedora, FreeBSD, Rocky, and Ubuntu). This is straightforward to use from R via the &lt;strong&gt;R2MLwiN&lt;/strong&gt; package.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34; entry-spacing=&#34;0&#34;&gt;
&lt;div id=&#34;ref-mlwin&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Charlton, C., J. Rasbash, W. J. Browne, M. Healy, and B. Cameron. 2024. &lt;em&gt;MLwiN Version 3.10&lt;/em&gt;. Bristol, UK: Centre for Multilevel Modelling, University of Bristol. 
&lt;a href=&#34;https://www.bristol.ac.uk/cmm/software/mlwin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bristol.ac.uk/cmm/software/mlwin/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-r2mlwin&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Zhang, Z., R. M. A. Parker, C. M. J. Charlton, G. Leckie, and W. J. Browne. 2016. “R2MLwiN: A Package to Run MLwiN from Within R.” &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 72 (10): 1–43. 
&lt;a href=&#34;https://doi.org/10.18637/jss.v072.i10&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.18637/jss.v072.i10&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This post is essentially a more detailed explanation of the advice given on the MLwiN website, 
&lt;a href=&#34;https://www.bristol.ac.uk/cmm/software/support/support-faqs/commands-macros.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and 
&lt;a href=&#34;https://www.bristol.ac.uk/cmm/software/mlwin/features/sysreq.html#unix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating a simple Automator app to launch a new instance of RStudio Desktop on macOS</title>
      <link>https://remlapmot.github.io/post/2024/macos-rstudio-another/</link>
      <pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/macos-rstudio-another/</guid>
      <description>&lt;h2 id=&#34;introduction-how-to-open-a-second-instance-of-rstudio-desktop-on-macos&#34;&gt;Introduction: how to open a second instance of RStudio Desktop on macOS&lt;/h2&gt;
&lt;p&gt;On macOS when RStudio Desktop is open it can be inconvenient to open a second (or third or fourth) instance of it.&lt;/p&gt;
&lt;p&gt;If you left click the RStudio Desktop icon nothing happens. If you right click on the RStudio Desktop icon there is a convenient &lt;em&gt;New RStudio Window&lt;/em&gt;. The problem with this is that by default if you have an RStudio project open the new RStudio window is also opened in that project. However, that can be overcome by opening the RStudio preference pane and in the first tab (&lt;em&gt;General&lt;/em&gt; | &lt;em&gt;Basic&lt;/em&gt;) deselecting the boxes relating to &lt;em&gt;Restore most recently opened project at startup&lt;/em&gt; and &lt;em&gt;Restore previousy open source documents at startup&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/img/rstudio-preference-pane.png&#34; alt=&#34;Screenshot of RStudio Desktop preference pane.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/img/new-rstudio-window.png&#34; alt=&#34;Screenshot of right clicking on the RStudio Desktop icon in the dock.&#34; width=&#34;504&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Alternatively, within RStudio Desktop we could select &lt;em&gt;File | Open Project&amp;hellip;&lt;/em&gt; but I&amp;rsquo;ve never found that very intuitive and somehow I&amp;rsquo;ve never got used to using RStudio&amp;rsquo;s command palette.
If you have several directories configured as RStudio projects (with &lt;em&gt;.Rproj&lt;/em&gt; files) that you&amp;rsquo;ve opened before you could open those from the top right project drop down menu or double click them from within Finder.&lt;/p&gt;
&lt;p&gt;But let&amp;rsquo;s say we want an even more convenient way of doing this &amp;ndash; an icon in the dock. Thanks to 
&lt;a href=&#34;https://stackoverflow.com/a/40673644&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; Stackoverflow answer, it turns out that in a terminal we can issue the following &lt;code&gt;open&lt;/code&gt; command to achieve opening a new instance of RStudio Desktop (note RStudio Desktop needs to be installed in your Applications directory for this to work).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;open -n -a RStudio.app
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;making-an-automator-app-to-open-a-new-instance-of-rstudio-desktop&#34;&gt;Making an Automator app to open a new instance of RStudio Desktop&lt;/h2&gt;
&lt;p&gt;macOS comes with Automator, open that from your Applications directory.
Then select &lt;em&gt;File | New&lt;/em&gt; and select &lt;em&gt;Application&lt;/em&gt; and click &lt;em&gt;Choose&lt;/em&gt;.
Then from the left most menu select &lt;em&gt;Utilities&lt;/em&gt; and double click &lt;em&gt;Run Shell Script&lt;/em&gt;.
In the main window on the right, leave the shell as zsh and replace the &lt;code&gt;cat&lt;/code&gt; text in the box with the &lt;code&gt;open&lt;/code&gt; command above.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/img/automator-app.png&#34; alt=&#34;Screenshot of configuring the automator app to run a shell script to open a new instance of RStudio Desktop.&#34; width=&#34;992&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Then press &lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt; or &lt;em&gt;File | Save&lt;/em&gt; and save your application in your Applications folder.
Give the app a distinct name such as &lt;em&gt;RStudio-new-instance.app&lt;/em&gt; or whatever you prefer and then quit Automator.&lt;/p&gt;
&lt;p&gt;Next we would like our app to have a nice icon.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First download a nice icon from say 
&lt;a href=&#34;https://github.com/amirmasoudabdol/rstudio-icons/tree/main/Icons/macOS/Rectangle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; repo of logos kindly designed for RStudio (I chose the dark one).&lt;/li&gt;
&lt;li&gt;Then navigate to the our new app in Finder and press &lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;I&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;Then drag the &lt;em&gt;.icns&lt;/em&gt; file onto the icon in the top left corner of the info box.
And tada your app will now use this icon!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you can even drag the app from Finder onto your dock from where you can simply click the icon to open as many instances of RStudio Desktop as you like.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/featured.png&#34; alt=&#34;Screenshot of our new app&#39;s icon in the dock.&#34; width=&#34;319&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;And because the new application is in our Applications directory it is found by Alfred (and hopefully Raycast).&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/img/alfred-launch-rstudio.png&#34; alt=&#34;Screenshot of using Alfred to launch RStudio Desktop.&#34; width=&#34;719&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have created an Automator application which runs a shell script to open a new instance of RStudio Desktop. We have then given this application a new icon and we have placed this on our dock.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I follow the approach detailed on 
&lt;a href=&#34;https://www.idownloadblog.com/2023/01/19/how-to-change-app-icons-mac/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; blog and on the 
&lt;a href=&#34;https://github.com/amirmasoudabdol/rstudio-icons/tree/main?tab=readme-ov-file#usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;README&lt;/a&gt; where I obtained the icon.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My #GitHubUnwrapped 2023!</title>
      <link>https://remlapmot.github.io/post/2024/github-unwrapped-2023/</link>
      <pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/github-unwrapped-2023/</guid>
      <description>&lt;p&gt;My #GitHubUnwrapped 2023!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;&lt;iframe src=&#34;https://drive.google.com/file/d/1bhdY7FPgmYJo_loqIChBJOZ8vdm2mEpA/preview&#34; width=&#34;640&#34; height=&#34;480&#34; allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Made with 
&lt;a href=&#34;https://www.githubunwrapped.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.githubunwrapped.com/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fuller reproducibility in Stata ado-files and programs: setting the version and user version</title>
      <link>https://remlapmot.github.io/post/2023/stata-reproducibility/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2023/stata-reproducibility/</guid>
      <description>&lt;p&gt;Most proficient Stata users have come across the &lt;code&gt;version&lt;/code&gt; command. This is an incredibly powerful command, which simply by issuing say&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;version 18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;at the top of a do-file or within a program (typically in an ado-file) means that you have pretty much guaranteed your code will run in the same way when you come to run it later (most likely in a newer version of Stata). But it turns out there’s a subtle difference between issuing &lt;code&gt;version&lt;/code&gt; in a do-file/interactively compared to within a program or ado-file.&lt;/p&gt;
&lt;p&gt;Several years ago I wrote the &lt;strong&gt;reffadjust&lt;/strong&gt; package (
&lt;a href=&#34;#ref-palmer-sj-2014&#34;&gt;Palmer et al. 2014&lt;/a&gt;) as part of some work using random effects models (
&lt;a href=&#34;#ref-mcdw-sim-2012&#34;&gt;Macdonald-Wallis et al. 2012&lt;/a&gt;). It has two programs &lt;code&gt;reffadjustsim&lt;/code&gt; and &lt;code&gt;reffadjust4nlcom&lt;/code&gt; which use the output of various random effects commands, including those from MLwiN, run from Stata using the user-written &lt;code&gt;runmlwin&lt;/code&gt; command (
&lt;a href=&#34;#ref-leckie-jss-2013&#34;&gt;Leckie and Charlton 2013&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;reffadjust&lt;/strong&gt; package doesn’t have many users and over the years I hadn’t regularly checked if the programs were still working. But in the ado-files I had set &lt;code&gt;version 13&lt;/code&gt;, which gave me some residual confidence that the programs might still work.&lt;/p&gt;
&lt;p&gt;However, a few years ago, when I eventually did run some test code I saw that the &lt;code&gt;reffadjustsim&lt;/code&gt; tests were failing for MLwiN/&lt;code&gt;runmlwin&lt;/code&gt; models. I didn’t have time to investigate further at this point, and I didn’t have any intuition whether the error resulted from a change in MLwiN, &lt;code&gt;runmlwin&lt;/code&gt;, or Stata.&lt;/p&gt;
&lt;p&gt;At the beginning of this year one of my colleagues mentioned that they were using &lt;strong&gt;reffadjust&lt;/strong&gt; in their work and had observed the same error with &lt;code&gt;reffadjustsim&lt;/code&gt;. My guilt kicked in, and I eventually found some time to investigate. I discovered that since I wrote the package, Stata processes matrix row and column stripes (essentially the row and column names) in a more advanced way. This meant that the row and column stripes for covariance elements in the &lt;code&gt;e(V)&lt;/code&gt; matrix (the variance-covariance matrix of parameter estimates) from MLwiN/&lt;code&gt;runmlwin&lt;/code&gt; models were being renamed when I hadn’t intended them to be, which caused the error.&lt;/p&gt;
&lt;p&gt;But wait … I had specified &lt;code&gt;version 13&lt;/code&gt; at the top of my program, so why was this update in later versions of Stata taking effect?&lt;/p&gt;
&lt;p&gt;I couldn’t work it out, so I had to ask Stata Technical Support. They were kind enough to tell me that there’s an additional method of invoking the &lt;code&gt;version&lt;/code&gt; command which controls what is known as the “user version”. There are some modifications in new versions of Stata which are exempt from the basic invocation of the &lt;code&gt;version&lt;/code&gt; command (but only in programs and ado-files). In do-files issuing &lt;code&gt;version&lt;/code&gt; sets both the version and the user version, however, in programs and ado-files the “user version”, is set by &lt;code&gt;version #, user&lt;/code&gt;, and holds these additional modifications in Stata to the required version.&lt;/p&gt;
&lt;p&gt;Naturally, this is explained in the &lt;code&gt;version&lt;/code&gt; helpfile and 
&lt;a href=&#34;https://www.stata.com/manuals/pversion.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;manual entry&lt;/a&gt;, which I admit I had not read until this point. Hence, simply editing the top of my program to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;version 13
version 13, user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fixed my error. So in a program or ado-file, we require both lines, whereas in a do-file we’d only require &lt;code&gt;version 13&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can see the different operation of &lt;code&gt;version&lt;/code&gt; by the following short example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;/* Do-file/interactive code to set both the version and the user version */
version 13
display c(version), c(userversion), c(stata_version)
// 13 13 18.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;/* Ado-file/program code to set both the version and the user version */
program mytest
version 13
display c(version), c(userversion), c(stata_version)
version 13, user
display c(version), c(userversion), c(stata_version)
end

mytest
// 13 18.5 18.5
// 13 13 18.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In summary, my &lt;code&gt;reffadjustsim&lt;/code&gt; command works again for MLwiN/&lt;code&gt;runmlwin&lt;/code&gt; models. The updated version is available from 
&lt;a href=&#34;https://github.com/remlapmot/reffadjust&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;its GitHub repo&lt;/a&gt;. And if you ever need &lt;em&gt;fuller&lt;/em&gt; reproducibility in your Stata ado-file or program remember to set both the version and the user version.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34; entry-spacing=&#34;0&#34;&gt;
&lt;div id=&#34;ref-leckie-jss-2013&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Leckie, George, and Chris Charlton. 2013. “&lt;span class=&#34;nocase&#34;&gt;runmlwin: A Program to Run the MLwiN Multilevel Modeling Software from within Stata&lt;/span&gt;.” &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 52 (11): 1–40. 
&lt;a href=&#34;https://doi.org/10.18637/jss.v052.i11&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.18637/jss.v052.i11&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-mcdw-sim-2012&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Macdonald-Wallis, Corrie, Debbie A. Lawlor, Tom Palmer, and Kate Tilling. 2012. “Multivariate Multilevel Spline Models for Parallel Growth Processes: Application to Weight and Mean Arterial Pressure in Pregnancy.” &lt;em&gt;Statistics in Medicine&lt;/em&gt; 31 (26): 3147–64. 
&lt;a href=&#34;https://doi.org/doi.org/10.1002/sim.5385&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/doi.org/10.1002/sim.5385&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-palmer-sj-2014&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Palmer, Tom M., Corrie M. Macdonald-Wallis, Debbie A. Lawlor, and Kate Tilling. 2014. “&lt;span class=&#34;nocase&#34;&gt;Estimating adjusted associations between random effects from multilevel models: The reffadjust package&lt;/span&gt;.” &lt;em&gt;The Stata Journal&lt;/em&gt; 14 (1): 119–40. 
&lt;a href=&#34;https://doi.org/10.1177/1536867X1401400109&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.1177/1536867X1401400109&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My #GitHubUnwrapped 2022!</title>
      <link>https://remlapmot.github.io/post/2023/github-unwrapped-2022/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2023/github-unwrapped-2022/</guid>
      <description>&lt;p&gt;My #GitHubUnwrapped 2022!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;&lt;iframe src=&#34;https://drive.google.com/file/d/1VVoFQK5aUrgkCppcJXlDMoEPcCKVPW84/preview&#34; width=&#34;640&#34; height=&#34;480&#34; allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Made with 
&lt;a href=&#34;https://www.githubunwrapped.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.githubunwrapped.com/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make your own CRAN-like repository with Linux binary R packages</title>
      <link>https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/</link>
      <pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/</guid>
      <description>&lt;style type=&#34;text/css&#34;&gt;
.lineheightone {
  line-height: 1.29;
  font-variant-ligatures: normal;
  font-feature-settings: normal;
}
&lt;/style&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;CRAN is a fantastic resource, in particular because it provides binary packages for Windows and macOS (for both Intel and Apple Silicon Macs). Because there are so many Linux distributions CRAN does not provide binary packages for Linux. Therefore, installing R packages on Linux can be slow because the bundled source packages need to be built on users machines.&lt;/p&gt;
&lt;p&gt;But let&amp;rsquo;s install a package from the Posit (formerly RStudio) Package Manager on Ubuntu Linux.
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-install-tidyverse-rspm-linux-binary.png&#34; alt=&#34;Installing binary Linux tidyverse package using Posit Package Manager.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Woah!&lt;/em&gt;&lt;/strong&gt; Something magical just happened, we installed a binary R package on Linux! How did that happen, let&amp;rsquo;s find out.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Note, obtaining the binary package from the public Posit package manager relies on the R session&amp;rsquo;s &lt;code&gt;HTTPUserAgent&lt;/code&gt; option being set. As I understand it, this is set automatically within an RStudio/RStudio Server session. If you are using R in the terminal you can set this with the following code (if you don&amp;rsquo;t have this option set you will obtain the source version of the package).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(HTTPUserAgent =
  sprintf(
    &amp;quot;R/%s R (%s)&amp;quot;, getRversion(), paste(getRversion(),
    R.version[&amp;quot;platform&amp;quot;], R.version[&amp;quot;arch&amp;quot;], R.version[&amp;quot;os&amp;quot;])
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;building-bundled-source-and-binary-packages&#34;&gt;Building bundled source and binary packages&lt;/h2&gt;
&lt;p&gt;I will use an example of one of my own packages &lt;strong&gt;OneSampleMR&lt;/strong&gt;. I am running RStudio server on Ubuntu Linux, Focal Fossa through Windows Subsystem for Linux.&lt;/p&gt;
&lt;p&gt;The package sources are in a Git repository hosted on GitHub, 
&lt;a href=&#34;https://github.com/remlapmot/OneSampleMR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. There is an &lt;code&gt;.Rproj&lt;/code&gt; file, which we open in RStudio as a project.&lt;/p&gt;
&lt;p&gt;To build an R package we require all of its dependency packages are installed, so we install those with &lt;code&gt;devtools::install_dev_deps()&lt;/code&gt; and if your package requires any system libraries those must be installed too.&lt;/p&gt;
&lt;p&gt;The Build pane gives us two convenient options, which will build either the bundled source package or binary package through calls to &lt;code&gt;devtools::build()&lt;/code&gt;.
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-build-pane-build-options.png&#34; alt=&#34;Screenshot of build pane options for building bundled source and binary packages.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Clicking on both in turn we see the following.
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-build-source-package.png&#34; alt=&#34;Screenshot of building a bundled source package in RStudio.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-build-binary-package.png&#34; alt=&#34;Screenshot of building a binary package in RStudio.&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;The bundled source package has been built as &lt;code&gt;OneSampleMR_0.1.2.tar.gz&lt;/code&gt; and the binary package has been built as &lt;code&gt;OneSampleMR_0.1.2_R_x86_64-pc-linux-gnu.tar.gz&lt;/code&gt;. Both files are in the directory above the project.&lt;/p&gt;
&lt;p&gt;We can achieve the same output by making direct calls to &lt;code&gt;R CMD build&lt;/code&gt; and &lt;code&gt;R CMD install --build&lt;/code&gt; in a shell if preferred. We can test that these install as follows.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-install-source-package.png&#34; alt=&#34;Screenshot of installing a bundled source package in RStudio.&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/rstudio-install-binary-package.png&#34; alt=&#34;Screenshot of installing a binary package in RStudio.&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;cran-structure-for-bundled-source-package-files&#34;&gt;CRAN structure for bundled source package files&lt;/h2&gt;
&lt;p&gt;In two excellent blog posts Marks Sellors describes how to make a CRAN-like repository.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;To host bundled source packages, such as our &lt;code&gt;OneSampleMR_0.1.2.tar.gz&lt;/code&gt; file, we require the following directory structure (noting that the &lt;code&gt;latest&lt;/code&gt; directory is optional, but allows us to add snapshot directories if we wanted to).&lt;/p&gt;
&lt;!-- # brew install tree --&gt;
&lt;!-- tree ~/Documents/GitHub/cran/site -d -I &#39;__linux__|bin&#39; --noreport --&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext{.lineheightone}&#34;&gt;/mycran
└── latest
    └── src
        └── contrib
            └── 4.3.0
                └── Recommended
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifically, we place the &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt; files into the &lt;code&gt;.../src/contrib&lt;/code&gt; directory. In that directory we then run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tools::write_PACKAGES(type = &amp;quot;source&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which generates 3 additional files (&lt;code&gt;PACKAGES&lt;/code&gt;, &lt;code&gt;PACKAGES.gz&lt;/code&gt;, and &lt;code&gt;PACKAGES.rds&lt;/code&gt;) which R will use to query what packages are available in our repository when its served on the web.&lt;/p&gt;
&lt;h2 id=&#34;adding-windows-and-macos-binary-r-packages&#34;&gt;Adding Windows and macOS binary R packages&lt;/h2&gt;
&lt;p&gt;We saw above how to build a binary Linux package. The same process, when repeated on Windows will generate a file called &lt;code&gt;{package}_{version}.zip&lt;/code&gt; and &lt;code&gt;{package}_{version}.tgz&lt;/code&gt; on macOS (on Macs with both Intel and Apple Silicon processors).&lt;/p&gt;
&lt;p&gt;Assuming that we have some of these files we need to know where to put them. Since CRAN distributes binary packages for Windows and macOS we follow their directory structure, which is as follows.&lt;/p&gt;
&lt;!-- brew install tree --&gt;
&lt;!-- tree ~/Documents/GitHub/cran/site -d -I &#39;__linux__&#39; --noreport --&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext{.lineheightone}&#34;&gt;/mycran
└── latest
    ├── bin
    │   ├── macosx
    │   │   ├── big-sur-arm64
    │   │   │   └── contrib
    │   │   │       └── 4.2
    │   │   └── contrib
    │   │       └── 4.2
    │   └── windows
    │       └── contrib
    │           └── 4.2
    └── src
        └── contrib
            └── 4.3.0
                └── Recommended
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Noting that the current version of R is 4.2.2 and that the relevant directory name with the minor version number changes when R&amp;rsquo;s current minor version number changes, we place&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS arm64 binary packages (for Macs with Apple Silicon processors) into the &lt;code&gt;.../bin/macosx/big-sur-arm64/contrib/4.2/&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;macOS x86_64 binary packages (for Macs with Intel processors) into the &lt;code&gt;.../bin/macosx/contrib/4.2/&lt;/code&gt; directory, and&lt;/li&gt;
&lt;li&gt;Windows binary packages into the &lt;code&gt;.../bin/windows/contrib/4.2/&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We then run &lt;code&gt;tools::write_PACKAGES(type = &amp;quot;mac.binary&amp;quot;)&lt;/code&gt; (changing to &lt;code&gt;type = &amp;quot;win.binary&amp;quot;&lt;/code&gt; as required) in each of these directories to generate the 3 &lt;code&gt;PACKAGES&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;We can confirm this directory structure using the &lt;code&gt;contrib.url()&lt;/code&gt; function (the last command below was run on an Apple Silicon Mac).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;contrib.url(&amp;quot;&amp;quot;, type = &amp;quot;source&amp;quot;)
## [1] &amp;quot;/src/contrib&amp;quot;
contrib.url(&amp;quot;&amp;quot;, type = &amp;quot;win.binary&amp;quot;)
## [1] &amp;quot;/bin/windows/contrib/4.2&amp;quot;
contrib.url(&amp;quot;&amp;quot;, type = &amp;quot;mac.binary&amp;quot;)
## [1] &amp;quot;/bin/macosx/contrib/4.2&amp;quot;
contrib.url(&amp;quot;&amp;quot;, type = &amp;quot;binary&amp;quot;)
## [1] &amp;quot;/bin/macosx/big-sur-arm64/contrib/4.2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And they are also listed in the R Installation and Administration manual.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;On Apple Silicon Macs the &lt;code&gt;big-sur-arm64&lt;/code&gt; filepath corresponds to the end of &lt;code&gt;.Platform$pkgType&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;.Platform$pkgType
## [1] &amp;quot;mac.binary.big-sur-arm64&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;where-to-store-and-how-to-name-linux-binary-r-packages&#34;&gt;Where to store and how to name Linux binary R packages?&lt;/h2&gt;
&lt;p&gt;CRAN does not distribute Linux binary packages and so there is no directory structure from them to copy.&lt;/p&gt;
&lt;p&gt;However both the Posit Package Manager and the 
&lt;a href=&#34;https://r4pi.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R4Pi&lt;/a&gt; project achieve this in a very clever way.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;We saw above that on Linux bundled source packages have filenames of the form &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt; whereas the binary package filenames are of the form &lt;code&gt;{package}_{version}_R_x86_64-pc-linux-gnu.tar.gz&lt;/code&gt; (the text after &lt;code&gt;{package}_{version}_&lt;/code&gt; may be different depending on your machine and distro).&lt;/p&gt;
&lt;p&gt;To distribute the Linux binary packages we create a parallel directory structure, which takes the same form as for the bundled source packages. In the case of Ubuntu Focal Fossa the Posit Package Manager uses &lt;code&gt;__linux__/focal/latest/src/contrib&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;They then rename the &lt;code&gt;{package}_{version}_R_x86_64-pc-linux-gnu.tar.gz&lt;/code&gt; files to the same form as the bundled source package files, i.e., to &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt;. And they put them in this new &lt;code&gt;src/contrib&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;The structure of our CRAN-like repository (well in fact our 2 parallel repositories) is now.&lt;/p&gt;
&lt;!-- tree ~/Documents/GitHub/cran/site -d -I &#39;jammy&#39; --noreport --&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext{.lineheightone}&#34;&gt;/mycran
├── __linux__
│   └── focal
│       └── latest
│           └── src
│               └── contrib
│                   └── 4.3.0
│                       └── Recommended
└── latest
    ├── bin
    │   ├── macosx
    │   │   ├── big-sur-arm64
    │   │   │   └── contrib
    │   │   │       └── 4.2
    │   │   └── contrib
    │   │       └── 4.2
    │   └── windows
    │       └── contrib
    │           └── 4.2
    └── src
        └── contrib
            └── 4.3.0
                └── Recommended
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tools::write_PACKAGES(type = &amp;quot;source&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the &lt;code&gt;.../__linux__/distro-name/src/contrib&lt;/code&gt; directory for each Linux distribution to generate the &lt;code&gt;PACKAGES&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Once this directory structure is served we can set our repository in R to &lt;code&gt;.../__linux__/focal/latest&lt;/code&gt; and R will find the binary package &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt; files in the &lt;code&gt;...__linux__/focal/src/contrib/&lt;/code&gt; directory, as per the first figure in this post.&lt;/p&gt;
&lt;p&gt;Note that the &lt;code&gt;{package}_{version}.tar.gz&lt;/code&gt; files within &lt;code&gt;__linux__/focal/latest/src/contrib&lt;/code&gt; do not all have to be of binary packages. They can be a mix of bundled source and binary packages, which is helpful if you haven&amp;rsquo;t had time to build all your binary package files.&lt;/p&gt;
&lt;p&gt;We can also confirm that on Ubuntu Focal Fossa&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;.Platform$pkgType
## [1] &amp;quot;source&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;therefore, on Linux, &lt;code&gt;utils:::resolvePkgType()&lt;/code&gt; always returns &lt;code&gt;&amp;quot;source&amp;quot;&lt;/code&gt;. Hence, on Linux, &lt;code&gt;contrib.url()&lt;/code&gt; always returns &lt;code&gt;/src/contrib&lt;/code&gt; regardless of its &lt;code&gt;type&lt;/code&gt; argument.&lt;/p&gt;
&lt;h2 id=&#34;testing-your-cran-like-repositories-locally&#34;&gt;Testing your CRAN-like repositories locally&lt;/h2&gt;
&lt;p&gt;You can either run a local web server or use the &lt;code&gt;file://...&lt;/code&gt; URL notation as your &lt;code&gt;repos&lt;/code&gt; global options setting (set with &lt;code&gt;option(repos = ...)&lt;/code&gt; or as the &lt;code&gt;repos&lt;/code&gt; argument to &lt;code&gt;install.packages()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a screenshot of installing a binary package on Ubuntu Focal Fossa.
&lt;img src=&#34;https://remlapmot.github.io/post/2022/make-linux-binary-cran-like-repo/img/cran-like-focal-example.png&#34; alt=&#34;Screenshot of testing a CRAN-like repository on Ubuntu Focal Fossa.&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have taken a look at the structure of a CRAN-like repository and built bundled source and binary package files. We saw that the trick for distributing Linux binary packages is to make a parallel directory with the same structure as that required for bundled source packages and that we need to rename the binary package files to have the same filename format as the bundled source package files.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Note that there are other approaches to distributing binary R packages on Linux, see 
&lt;a href=&#34;https://cran.r-project.org/bin/linux/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cran.r-project.org/bin/linux/&lt;/a&gt; and links therein, 
&lt;a href=&#34;https://eddelbuettel.github.io/r2u/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://eddelbuettel.github.io/r2u/&lt;/a&gt;, and 
&lt;a href=&#34;https://enchufa2.github.io/bspm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://enchufa2.github.io/bspm/&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://blog.sellorm.com/2019/03/29/lifting-the-lid-on-cran/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.sellorm.com/2019/03/29/lifting-the-lid-on-cran/&lt;/a&gt; and 
&lt;a href=&#34;https://blog.sellorm.com/2019/03/30/build-your-own-cran-like-repo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.sellorm.com/2019/03/30/build-your-own-cran-like-repo/&lt;/a&gt;] There is also the 
&lt;a href=&#34;https://cran.r-project.org/package=miniCRAN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;miniCRAN&lt;/strong&gt;&lt;/a&gt; package to help do this, but we don&amp;rsquo;t need to use this for the following explanation.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;See 
&lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-admin.html#Setting-up-a-package-repository&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cran.r-project.org/doc/manuals/R-admin.html#Setting-up-a-package-repository&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;See 
&lt;a href=&#34;https://packagemanager.rstudio.com/client/#/repos/2/overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://packagemanager.rstudio.com/client/#/repos/2/overview&lt;/a&gt; and 
&lt;a href=&#34;https://pkgs.r4pi.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pkgs.r4pi.org/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
