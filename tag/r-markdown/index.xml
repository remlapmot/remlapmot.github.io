<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Markdown | Dr Tom Palmer</title>
    <link>https://remlapmot.github.io/tag/r-markdown/</link>
      <atom:link href="https://remlapmot.github.io/tag/r-markdown/index.xml" rel="self" type="application/rss+xml" />
    <description>R Markdown</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 15 Aug 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://remlapmot.github.io/images/icon_hu_72d72b3c768972db.png</url>
      <title>R Markdown</title>
      <link>https://remlapmot.github.io/tag/r-markdown/</link>
    </image>
    
    <item>
      <title>Seven accessibility tips for Quarto and R Markdown users</title>
      <link>https://remlapmot.github.io/post/2025/quarto-accessibility/</link>
      <pubDate>Fri, 15 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/quarto-accessibility/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When teaching, for my practicals/tutorials and for about half of my lectures I find myself preparing them using R Markdown and laterly Quarto. I enjoy preparing the material in R Markdown and Quarto because it gives me a reproducible way of regenerating my material every year and I can track changes in the Rmd/qmd files very precisely with Git.&lt;/p&gt;
&lt;p&gt;Recently, the subject of accessibility has become more prominent within Universities. In the UK, and in many other countries, we are legally obliged to produce accessible learning materials that do not disadvantage disabled students.&lt;/p&gt;
&lt;p&gt;My University uses Blackboard for its online learning environment (OLE)/learning management system (LMS). There are other OLEs, e.g., Moodle, Canvas, etc. They all work in essentially the same way in that they provide a website per Unit/Module/Course within a secure online system.&lt;/p&gt;
&lt;p&gt;Every document I upload into Blackboard receives an accessibility score (out of 100%) and each module I teach receives an overall accessibility score. My University uses Ally Accessibility Report LTI 1.3 to generate these scores. My university doesn&amp;rsquo;t have a rule about what&amp;rsquo;s an acceptable score for either a document or a course.&lt;/p&gt;
&lt;p&gt;It turns out accessibility is sometimes abbreviated to a11y, which like k8s (for Kubernetes), is a numeronym, where the 11 stands for the 11 letters in between the starting &lt;em&gt;a&lt;/em&gt; and the ending &lt;em&gt;y&lt;/em&gt; of &lt;em&gt;accessibility&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I should say there are many guides to accessibility for HTML documents online, and indeed for R and R Markdown there are at least two packages on CRAN, 
&lt;a href=&#34;https://cran.r-project.org/package=accessrmd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;accessrmd&lt;/strong&gt;&lt;/a&gt; and 
&lt;a href=&#34;https://paulnorthrop.github.io/accessr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;accessr&lt;/strong&gt;&lt;/a&gt;, addressing accessibility issues. Also I have not covered topics such as choosing an accessible color palette in say &lt;strong&gt;ggplot2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What follows is a set of tips which help improve the accessibility score for individual documents and hence your overall module accessibility score.&lt;/p&gt;
&lt;h2 id=&#34;tip-1-replace-all-pdfs-with-docx-pptx-or-html-documents&#34;&gt;Tip 1: Replace all pdfs with docx, pptx, or html documents&lt;/h2&gt;
&lt;p&gt;For a pdf to get a high accessibility score it needs to be a special type of pdf called a &amp;rsquo;tagged pdf&amp;rsquo;, otherwise it will get a very low score (approx. 6%).&lt;/p&gt;
&lt;p&gt;As I will show in the following tips, it is much easier to make Word, Powerpoint, and html documents accessible. If you are looking for the most effective boost to your accessibility scores simply remove all pdf documents from your site and replace them with Word, Powerpoint, or html documents.&lt;/p&gt;
&lt;h2 id=&#34;tip-2-add-alt-text-to-all-figures&#34;&gt;Tip 2: Add alt text to all figures&lt;/h2&gt;
&lt;p&gt;I guess like many R users the first I remember hearing about accessibility was that there is this thing called alt text and it&amp;rsquo;s best practice for html documents to provide alt text summaries of every image they contain. Then screen readers have a description of the image for visually impaired readers.&lt;/p&gt;
&lt;p&gt;It turns out that other types of document can also hold alt text for images; including Word, Powerpoint, and pdf documents.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we have a Quarto (or R Markdown) document which we render to docx and html output formats. To add alt text to figures in the html document we can use the &lt;code&gt;fig-alt&lt;/code&gt; chunk option (&lt;code&gt;fig.alt&lt;/code&gt; in R Markdown). However, it turns out that alt text for a Word document is taken from the &lt;code&gt;fig-cap&lt;/code&gt; chunk option (&lt;code&gt;fig.cap&lt;/code&gt; in R Markdown). Therefore, I specify both &lt;code&gt;fig-alt&lt;/code&gt; and &lt;code&gt;fig-cap&lt;/code&gt; chunk options in all code chunks generating figures.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;```{r}
#| fig-cap: Kaplan-Meier survival curve.
#| fig-alt: Plot of a Kaplan-Meier survival curve.
# code to generate plot
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tip-3-the-surprising-headache-that-is-creating-tagged-pdfs-&#34;&gt;Tip 3: (The surprising headache that is) Creating tagged pdfs ðŸ˜¬ðŸ¤¯&lt;/h2&gt;
&lt;p&gt;It is possible for a pdf to obtain a perfect accessibility score; but as I said above it must be a tagged pdf.&lt;/p&gt;
&lt;p&gt;You can check if a pdf has tags by opening it in Adobe Acrobat Reader then bringing up the document properties window. The information is in the bottom left of the &lt;em&gt;Description&lt;/em&gt; tab (on Windows I found that SumatraPDF also reported that information but on macOS I found I couldn&amp;rsquo;t see this reported in the Preview app).&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/adobe-reader-pdf-info.png&#34; alt=&#34;Screenshot of document properties tab in Adobe Acrobat Reader.&#34; width=&#34;550&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;It turns out that we can create tagged pdfs in a few ways;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;by exporting a Word or Powerpoint document to pdf within those programs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;note when exporting to pdf on macOS, users must select the &lt;em&gt;Best for electronic distribution and accessibility&amp;hellip;&lt;/em&gt; option (the &lt;em&gt;Best for printing&lt;/em&gt; option does not generate tagged pdfs)
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/powerpoint-macos-pdf-export.png&#34; alt=&#34;Screenshot of Powerpoint export to pdf window on macOS.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/li&gt;
&lt;li&gt;Word and Powerpoint for Windows and Word and Powerpoint online export tagged pdfs by default&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by printing html documents to pdf (Print | Save as pdf) in Chrome (and the other Chromium based browsers such as Edge)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In my testing I find that by default Safari and Firefox do not generate tagged pdfs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The paid for professional version of Adobe Acrobat allows users to 
&lt;a href=&#34;https://helpx.adobe.com/uk/acrobat/using/editing-document-structure-content-tags.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;add tags to pdfs&lt;/a&gt;, but I don&amp;rsquo;t have that, and I assuming you don&amp;rsquo;t either.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And I should note that within Blackboard itself Ally can generate a tagged pdf from Word and Powerpoint documents, under the &lt;em&gt;Download Alternative Formats&lt;/em&gt; option for a file.
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/download-alternative-formats-1.png&#34; alt=&#34;Screenshot of selecting to download alternative document formats in Blackboard.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/download-alternative-formats-2.png&#34; alt=&#34;Screenshot of the alternative document formats in Blackboard.&#34; width=&#34;450&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The surprise here is that pdf documents produced by LaTeX and typst by default do not (yet) generate tagged pdfs. Therefore, do not render to &lt;code&gt;pdf&lt;/code&gt;/&lt;code&gt;typst&lt;/code&gt; output formats in Quarto nor &lt;code&gt;pdf_document&lt;/code&gt; in R Markdown (nor &lt;code&gt;pdf_document2&lt;/code&gt; in bookdown).&lt;/p&gt;
&lt;h3 id=&#34;generating-tagged-pdfs-in-latex&#34;&gt;Generating tagged pdfs in LaTeX&lt;/h3&gt;
&lt;p&gt;It turns out it 
&lt;a href=&#34;https://latex3.github.io/tagging-project/documentation/prototype-usage-instructions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is possible to generate a tagged pdf from LaTeX&lt;/a&gt;, but this is extrememly inconvenient from R Markdown and Quarto. First use Quarto/R Markdown to generate the TeX file of your document, e.g. in 
&lt;a href=&#34;https://quarto.org/docs/output-formats/pdf-basics.html#latex-output&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto specify either&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;format:
  pdf:
    keep-tex: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or the latex output format.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;format:
  latex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You then require 
&lt;a href=&#34;https://tex.stackexchange.com/a/605142&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the following LaTeX packages&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tinytex::tlmgr_install(c(&#39;latex-lab&#39;, &#39;pdfmanagement-testphase&#39;, &#39;tagpdf&#39;, &#39;luamml&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You then need to amend the very top of your TeX file to have a &lt;code&gt;\DocumentMetadata{tagging=on}&lt;/code&gt; entry. And possibly using the &lt;em&gt;unicode-math&lt;/em&gt; package is helpful. The beginning of your TeX file will look like the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\DocumentMetadata{tagging=on}
\documentclass{article}
\usepackage{unicode-math}
\begin{document}
% the rest of your document ...
\end{document}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I tried this I found that compiling with LuaLaTeX did generate a tagged pdf.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;lualatex mydocument.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I cannot face going through this hassle for every document I produce. So the slightly unexpected take home message here is that if you want to give your students a pdf document, the most convenient way to produce a tagged pdf is to render your Quarto document to docx or html and then export the pdf from within either Word or Chrome or let Ally do the conversion for you.&lt;/p&gt;
&lt;h2 id=&#34;tip-4-improving-table-accessibility&#34;&gt;Tip 4: Improving table accessibility&lt;/h2&gt;
&lt;p&gt;I find that tables generated using the Markdown syntax generate warnings in Ally Accessibility Checker 1.3. It reports it can&amp;rsquo;t find the header row. However, I find that tables generated using the &lt;strong&gt;gt&lt;/strong&gt; package, and other table packages usually pass. So I avoid creating tables using Markdown syntax.&lt;/p&gt;
&lt;h2 id=&#34;tip-5-different-accessibility-checkers-can-report-different-results&#34;&gt;Tip 5: Different accessibility checkers can report different results&lt;/h2&gt;
&lt;p&gt;Microsoft has built an accessibility checker into alot of its Office suite. You can access this in Word and Powerpoint from the &lt;em&gt;Review&lt;/em&gt; tab then &lt;em&gt;Check Accessibility&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/microsoft-ribbon-accessibility.png&#34; alt=&#34;Screenshot of accessing the accessibility checker within Microsoft Word.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Compared to Ally Accessibility Checker 1.13 I find this checks for more conditions. For the items they both check I find that most of the time they agree. But sometimes they don&amp;rsquo;t agree, e.g., the Microsoft checker reported that the slide numbers in a Powerpoint deck were ok, whereas Ally Accessibility Checker 1.13 reported that they failed its colour contrast check (even though they were black text on a white slide).&lt;/p&gt;
&lt;h2 id=&#34;tip-6-improving-the-accessibility-of-custom-word-document-templates&#34;&gt;Tip 6: Improving the accessibility of custom Word document templates&lt;/h2&gt;
&lt;p&gt;If you want to use a 
&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/word-template.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom template Word document&lt;/a&gt; for your docx output it needs to be based on the underlying Pandoc docx template. You can obtain that by running&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pandoc --print-default-data-file reference.docx &amp;gt; reference.docx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then adjust the formatting of the various styles in Word in the &lt;em&gt;Styles Pane&lt;/em&gt;, and also if you are in the UK/EU you can amend the layout size from US Letter paper to A4.&lt;/p&gt;
&lt;p&gt;Then run the Microsoft Accessibilty checker on this document (&lt;em&gt;Review&lt;/em&gt; tab | &lt;em&gt;Check Accessibility&lt;/em&gt;) and Word will give you the option to upgrade the format of the document so that it can run, so click the &lt;em&gt;Convert&lt;/em&gt; button when prompted.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/word-accessibility-checker-convert-format.png&#34; alt=&#34;Screenshot of Microsoft Word acccessibility checker convert document.&#34; width=&#34;350&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Then if you&amp;rsquo;ve added an image to the document header you can add alt text to it. Then resave the document. Then specify the use of the reference document in your Quarto YAML header.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;format:
  docx:
    reference-doc: reference.docx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tip-7-uploading-quartocomplex-html-documents-into-blackboard-ultra&#34;&gt;Tip 7: Uploading Quarto/complex html documents into Blackboard Ultra&lt;/h2&gt;
&lt;p&gt;My university has upgraded to the latest version of Blackboard. Prior to this upgrade I had no trouble uploading any type of document. But now if I try to upload html documents with embedded resources generated from Quarto the upload animation hangs (the 3 squares on the right of the screenshot below simply keep animating) and the file is not uploaded.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/upload-hang.png&#34; alt=&#34;Screenshot of Blackboard file upload hanging.&#34; width=&#34;750&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;It turns out this is because Blackboard scans every document we upload, which it calls its content sanitization check. For some reason Quarto html documents, including revealjs html slide decks, are now too complex and fail this check. Annoyingly, Blackboard does not emit any error message to tell us this. However, there is a workaround.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, put your html file into a zip archive&lt;/li&gt;
&lt;li&gt;Then from within your module site, go to &lt;em&gt;Content Collection&lt;/em&gt; when adding an item
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/add-course-content-from-within-site.png&#34; alt=&#34;Screenshot of selecting Course Content in Blackboard whn uploading a file.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/li&gt;
&lt;li&gt;Then select &lt;em&gt;Upload&lt;/em&gt; | &lt;em&gt;Upload Zip Package&lt;/em&gt; (choosing any other option will fail)
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/blackboard-upload-zip-package.png&#34; alt=&#34;Screenshot of uploading a zip package of a Quarto html file.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/li&gt;
&lt;li&gt;Make sure to select the button to overwrite an existing file with the same name&lt;/li&gt;
&lt;li&gt;And click &lt;em&gt;Submit&lt;/em&gt; and that&amp;rsquo;s it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the only way I can find to bypass the content sanitization check. Note if you attempt to upload the zip archive from your &lt;em&gt;Content Collection&lt;/em&gt; accessed not from within the course site - as per screenshot below (don&amp;rsquo;t go here!) - the upload will also fail (confusing I know!).&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/blackboard-content-collection.png&#34; alt=&#34;Screenshot of Blackboard Content Collection selection not from within a course.&#34; width=&#34;750&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have described 7 hopefully helpful tips about how to improve the accessibility scores for documents produced from Quarto and R Markdown. Using these tips I have increased the accessibility score for my module from 67% for last year&amp;rsquo;s site to 98% for this year&amp;rsquo;s site.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/quarto-accessibility/img/summary-score.png&#34; alt=&#34;Screenshot of Ally Accessibility Checker 1.3 summary score for my module within Blackboard online learning environment.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;I hope that you have similar success.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating tutorial worksheets: Quarto profiles for the win!</title>
      <link>https://remlapmot.github.io/post/2025/quarto-profiles-for-tutorials/</link>
      <pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/quarto-profiles-for-tutorials/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/quarto-conditional-content/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previously posted&lt;/a&gt; about creating tutorial worksheets for 4 different Quarto engines (for R, Python, Stata, and Julia) using 
&lt;a href=&#34;https://quarto.org/docs/authoring/conditional.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conditional content&lt;/a&gt;. However, that approach is a bit hacky and I wasn&amp;rsquo;t very happy with it.&lt;/p&gt;
&lt;p&gt;Thanks to a 
&lt;a href=&#34;https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vignette by Christophe Dervieux&lt;/a&gt; in the quarto R package I realised there is a more convenient, and less hacky, way to create tutorial documents using Quarto profiles. I don&amp;rsquo;t use the dynamic metadata approach in the vignette to achieve my solution but it led me to relevant Quarto documentation page and I discuss it at the end of this post.&lt;/p&gt;
&lt;p&gt;My aim is the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To have a single Quarto document from which both the question and solution documents can be rendered for a tutorial.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As a reminder, as 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/quarto-conditional-content/#introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;I showed in my previous post&lt;/a&gt;, this has been possible to achieve for a long time with R Markdown and knitr because thanks to the brilliant work of Yihui Xie because they allow programmtic chunk options. Therefore, implementing this in a Quarto document using the knitr engine is also straighforward and I won&amp;rsquo;t repeat it in this post. However, it is the three other Quarto engines (for Python, Stata, and Julia) that I am interested in which are problematic because as far as I know they don&amp;rsquo;t allow programmtic chunk options and they don&amp;rsquo;t have the equivalent of the &lt;code&gt;! expr ...&lt;/code&gt; YAML tag literal.&lt;/p&gt;
&lt;h2 id=&#34;quarto-profiles&#34;&gt;Quarto profiles&lt;/h2&gt;
&lt;p&gt;Quarto profiles are introduced 
&lt;a href=&#34;https://quarto.org/docs/projects/profiles.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on this page of the Quarto documentation&lt;/a&gt;. Specifically, we shall make use of 
&lt;a href=&#34;https://quarto.org/docs/projects/profiles.html#profile-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conditional content dependent upon profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First we will create a simple default Quarto profile file &lt;em&gt;_quarto.yml&lt;/em&gt; which will simply contain the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;execute:
  eval: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(This is because I usually have an R version of the tutorial in the same directory using programmatic chunk options, so I don&amp;rsquo;t want to set a default that is language specific nor will affect anything in the R Quarto documents.)&lt;/p&gt;
&lt;p&gt;Next for each language I will make profiles for the questions output and the solutions output in appropriately named YAML files (I just show the Python files as the other two just have Stata/Julia substituted in the appropraite places).&lt;/p&gt;
&lt;h3 id=&#34;questions-and-solutions-profiles-for-python&#34;&gt;Questions and solutions profiles for Python&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;_quarto-python-questions.yml&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;project:
  render:
    - tutorial-python.qmd
title: &#39;Questions document: Python version&#39;
execute:
  eval: false
format:
  html:
    output-file: &amp;quot;tutorial-python-questions&amp;quot;
    output-ext:  &amp;quot;html&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;_quarto-python-solutions.yml&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;project:
  render:
    - tutorial-python.qmd
title: &#39;Solutions document: Python version&#39;
format:
  html:
    output-file: &amp;quot;tutorial-python-solutions&amp;quot;
    output-ext:  &amp;quot;html&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then our tutorial Quarto Python document, &lt;em&gt;tutorial-python.qmd&lt;/em&gt;, will look like the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format:
  html:
    embed-resources: true
jupyter: python3
---

## Question 1

Question text.

```{python}
print(&amp;quot;The code which is echoed in questions and evaluated in solutions.&amp;quot;)
```

::: {.content-visible when-profile=&amp;quot;python-solutions&amp;quot;}
The text for the solutions.
:::

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see the use of the conditional content based upon profile for the text of the solutions, and we could included additional code chunks in these conditional content divs.&lt;/p&gt;
&lt;p&gt;We repeat this for the other 2 tricky Quarto engines, &lt;code&gt;engine: julia&lt;/code&gt; and &lt;code&gt;jupyter: nbstata&lt;/code&gt;, including making profile yaml files for each engine and the respective &lt;em&gt;tutorial-{stata/julia}.qmd&lt;/em&gt; Quarto documents.&lt;/p&gt;
&lt;p&gt;Then we make a shell script with our render commands.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;quarto render --profile python-questions
quarto render --profile python-solutions

quarto render --profile stata-questions
quarto render --profile stata-solutions

quarto render --profile julia-questions
quarto render --profile julia-solutions
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And because I have an R version using parameters my shell script usually begins.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;quarto render tutorial-r.qmd -P solutions:false -o tutorial-r-questions.html
quarto render tutorial-r.qmd -o tutorial-r-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;You can find the full source code in my example repo 
&lt;a href=&#34;https://github.com/remlapmot/tutorial-quarto-profiles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and their rendered output can be viewed from 
&lt;a href=&#34;https://remlapmot.github.io/tutorial-quarto-profiles/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. This repo also contains a tutorial document including the 4 languages in the same document using the embed shortcode as I described in 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/multi-engine-quarto/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;another previous post&lt;/a&gt;. A screenshot of the questions and solutions documents from this approach 
&lt;a href=&#34;#top&#34;&gt;is shown above&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;an-honorable-mention-about-dynamic-metadata&#34;&gt;An honorable mention about dynamic metadata&lt;/h2&gt;
&lt;p&gt;When I started reading the 
&lt;a href=&#34;https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;quarto R package vignette&lt;/a&gt; I began trying to use dynamic metadata to achieve the result above. Dynamic metadata involves writing extra YAML blocks into your Quarto document which can include programmatically specified values of parameters, which can then be used by including conditional content by 
&lt;a href=&#34;https://quarto.org/docs/authoring/conditional.html#matching-against-metadata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;matching against them&lt;/a&gt;. I found that I could achieve what I wanted if I used the &lt;code&gt;--metadata-file&lt;/code&gt; argument to &lt;code&gt;quarto render&lt;/code&gt; with the settings included in their own YAML files &lt;del&gt;except for modifying the &lt;code&gt;execute&lt;/code&gt; state of the Quarto document, it seems that must be specified in the first YAML block/header. And this cannot be controlled by the &lt;code&gt;--execute&lt;/code&gt; and &lt;code&gt;--no-execute&lt;/code&gt; flags to &lt;code&gt;quarto render&lt;/code&gt; because one needs the code which generates the additional YAML blocks to be run&lt;/del&gt; (with thanks to Christophe for pointing this out to me).&lt;/p&gt;
&lt;p&gt;For Quarto documents using the knitr engine, the R package vignette shows how to use the new &lt;code&gt;write_yaml_metadata_block()&lt;/code&gt; function within an R code chunk with output type &lt;code&gt;asis&lt;/code&gt; to write the YAML block. In case it is useful to anyone, below I show examples of how to write the YAML blocks in each of the three other engines I have been using. (Admittedly this is not needed if one uses the &lt;code&gt;--metadata-file&lt;/code&gt; argument to &lt;code&gt;quarto render&lt;/code&gt; in which these settings are included in their own YAML files.)&lt;/p&gt;
&lt;h3 id=&#34;python-jupyter-python3&#34;&gt;Python (jupyter: python3)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;```{python}
#| include: false
#| tags: [parameters]
solutions = &#39;true&#39;
```

```{python}
#| include: false
from IPython.display import Markdown
ymltxt = f&amp;quot;  solutions: {solutions}&amp;quot;
if solutions == &#39;true&#39;:
    titletxt = &amp;quot;title: Solutions document&amp;quot;
else:
    titletxt = &amp;quot;title: Questions document&amp;quot;
```

`{python} Markdown(&amp;quot;---&amp;quot;)`
`{python} Markdown(&amp;quot;params:&amp;quot;)`
`{python} Markdown(ymltxt)`
`{python} Markdown(titletxt)`
`{python} Markdown(&amp;quot;---&amp;quot;)`

::: {.content-visible when-meta=&amp;quot;params.solutions&amp;quot;}
```{python}
print(&amp;quot;A solution, which is hidden in questions&amp;quot;)
```
:::

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;stata-jupyter-nbstata&#34;&gt;Stata (jupyter: nbstata)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;```{stata}
*| include: false
local solutions : env SOLUTIONS_STATA
scalar ymltxt = &amp;quot;  solutions: `solutions&#39;&amp;quot;
if &amp;quot;`solutions&#39;&amp;quot; == &amp;quot;true&amp;quot; {
  scalar titletxt = &amp;quot;title: Solutions document&amp;quot;
}
else {
  scalar titletxt = &amp;quot;title: Questions document&amp;quot;
}
```

`{stata} &amp;quot;---&amp;quot;`
`{stata} &amp;quot;params:&amp;quot;`
`{stata} scalar(ymltxt)`
`{stata} scalar(titletxt)`
`{stata} &amp;quot;---&amp;quot;`

::: {.content-visible when-meta=&amp;quot;params.solutions&amp;quot;}
```{stata}
display &amp;quot;A solution, which is hidden in questions&amp;quot;
```
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;julia-engine-julia&#34;&gt;Julia (engine: julia)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;```{julia}
#| tags: [parameters]
```

```{julia}
#| echo: false
#| output: asis
println(&amp;quot;---&amp;quot;)
if solutions
  println(&amp;quot;title: Solutions document&amp;quot;)
  ymltxt = &amp;quot;  solutions: true&amp;quot;
else
  println(&amp;quot;title: Questions document&amp;quot;)
  ymltxt = &amp;quot;  solutions: false&amp;quot;
end
println(&amp;quot;params:&amp;quot;)
println(ymltxt)
println(&amp;quot;---&amp;quot;)
```

::: {.content-visible when-meta=&amp;quot;params.solutions&amp;quot;}
```{julia}
println(&amp;quot;A solution, hidden in questions&amp;quot;)
```
:::

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to create Quarto profiles for creating tutorial worksheets; one for the questions and one for the solutions from the same Quarto document; for several Quarto engines (&lt;code&gt;engine: knitr&lt;/code&gt;, &lt;code&gt;jupyter: python3&lt;/code&gt;, &lt;code&gt;jupyter: nbstata&lt;/code&gt;, and &lt;code&gt;engine: julia&lt;/code&gt;). I have also shown how additional metadata may be written into your Quarto document in these engines which can be used in conjunction with parameterised documents and conditional content.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Checking your R packages and practicals on a schedule using GitHub Actions</title>
      <link>https://remlapmot.github.io/post/2025/checking-packages-and-practicals/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/checking-packages-and-practicals/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Do you have a R package that&amp;rsquo;s just on GitHub? How often do you check it? CRAN follows a rolling release model, so any day one of your package&amp;rsquo;s dependency packages could be updated - breaking your package!&lt;/p&gt;
&lt;p&gt;Or maybe you teach a course that runs once a year and it has some R practical sessions? It can be very frustrating when you rerun your practical after a year to find that several of the R packages it uses have been updated, and now you have to work out how to fix things. For this situation we might use 
&lt;a href=&#34;https://rstudio.github.io/renv/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;renv&lt;/strong&gt;&lt;/a&gt; to record the packages and their versions. But then your course participants will need to use &lt;strong&gt;renv&lt;/strong&gt; which might lead to a room full of 30 students all having &lt;strong&gt;renv&lt;/strong&gt; problems. Alternatively, you might install all your packages from a single date, meaning you can restore them using the a snapshot date from the 
&lt;a href=&#34;https://packagemanager.posit.co/client/#/repos/cran/setup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Public Posit Package Manager&lt;/a&gt; but you might find your course participants wondering why you use packages that are a year out of date. Another superb solution is to provide course participants with an R environment you have defined and tested your practical works in. Such a solution is offered by creating the practical as a project in a 
&lt;a href=&#34;https://posit.cloud/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Posit Cloud&lt;/a&gt; workspace, indeed Posit Cloud is so good it almost makes running R practicals boring.&lt;/p&gt;
&lt;p&gt;My solution to these problems is to regularly run &lt;code&gt;R CMD check&lt;/code&gt; on your package/run your practical with the latest versions of the required packages throughout the year. This way you&amp;rsquo;ll hopefully pick up any changes in dependency packages long before the next running of your course (although you might still be unlucky).&lt;/p&gt;
&lt;p&gt;If I had a server I could suggest setting up a 
&lt;a href=&#34;https://linux.die.net/man/8/cron&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;cron&lt;/code&gt;&lt;/a&gt; job to check the package or practical. However, most of us don&amp;rsquo;t have a server. Luckily if your package or practical is in a public GitHub repository then we can run GitHub Actions on it. It turns out GitHub Actions has a 
&lt;a href=&#34;https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scheduling facility that uses &lt;code&gt;cron&lt;/code&gt; syntax&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next I&amp;rsquo;ll show how to run R code on a schedule on GitHub Actions for these two cases.&lt;/p&gt;
&lt;h2 id=&#34;checking-packages-on-a-schedule&#34;&gt;Checking packages on a schedule&lt;/h2&gt;
&lt;p&gt;I use the actions and example workflows from the 
&lt;a href=&#34;https://github.com/r-lib/actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;r-lib/actions&lt;/a&gt; repository. For checking a package there are several examples, in the &lt;em&gt;examples&lt;/em&gt; directory of that repository, that we can copy then amend. Let&amp;rsquo;s use the 
&lt;a href=&#34;https://github.com/r-lib/actions/blob/v2-branch/examples/check-full.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;check-full.yaml&lt;/a&gt; example.&lt;/p&gt;
&lt;p&gt;Copy this file into a &lt;em&gt;.github/workflows&lt;/em&gt; directory in the repository for your package. Now we need to enable scheduled running. Amend the first &lt;code&gt;on:&lt;/code&gt; block to include the two lines I have inserted below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:
  ...
  schedule:
    - cron: &amp;quot;00 9 * * TUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What does this syntax mean? Luckily there are many websites which will decipher that for us, such as 
&lt;a href=&#34;https://crontab.guru/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;crontab guru&lt;/a&gt;. (Nb. you can see a full version of this file in 
&lt;a href=&#34;https://github.com/remlapmot/OneSampleMR/blob/main/.github/workflows/R-CMD-check.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;one of my repositories&lt;/a&gt;.)&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/checking-packages-and-practicals/img/cron-tab-guru-screenshot.png&#34; alt=&#34;Screenshot from the crontab guru website.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;From the crontab guru screenshot above, we see this means run at 9:00 am (UTC) on Tuesdays. Once you have committed this file to your repo and pushed it to GitHub on your main/master branch then your automated checking is taken care of. If a check fails GitHub will send a notification and you can then investigate further.&lt;/p&gt;
&lt;h2 id=&#34;running-practicals-on-a-schedule&#34;&gt;Running practicals on a schedule&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say we have prepared a practical worksheet in a Quarto document. In this case we&amp;rsquo;ll additionally use the actions and examples in the 
&lt;a href=&#34;https://github.com/quarto-dev/quarto-actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;quarto-dev/quarto-actions&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;The workflow file I ended up with is shown below and is in this 
&lt;a href=&#34;https://github.com/remlapmot/example-exercise-to-run-on-schedule&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example repository&lt;/a&gt;. It is essentially an amended version of the 
&lt;a href=&#34;https://github.com/r-lib/actions/blob/v2-branch/examples/render-rmarkdown.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown rendering example in r-lib/actions&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: &amp;quot;0 0 1 * *&amp;quot; # run on 1st day of month

name: Render

permissions: 
  contents: write

jobs:
  build-deploy:
    runs-on: ${{ matrix.config.os }}
    
    name: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        config:
          - { os: macos-latest }
          - { os: windows-latest }
          - { os: ubuntu-latest }
    
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Setup R packages
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          upgrade: &#39;TRUE&#39;

      - name: Render practical and commit output documents into repo
        shell: bash
        run: |
          # Render questions
          Rscript -e &#39;quarto::quarto_render(&amp;quot;exercise-01.qmd&amp;quot;, output_file = &amp;quot;exercise-01-questions-${{ matrix.config.os }}.html&amp;quot;, execute_params = list(solutions = FALSE, title = &amp;quot;Example exercise: Questions&amp;quot;))&#39;
          # Render solutions
          Rscript -e &#39;quarto::quarto_render(&amp;quot;exercise-01.qmd&amp;quot;, output_file = &amp;quot;exercise-01-solutions-${{ matrix.config.os }}.html&amp;quot;)&#39;
          # Commit output documents
          git config --local user.name $GITHUB_ACTOR
          git config --local user.email $GITHUB_ACTOR@users.noreply.github.com
          git pull
          git add &amp;quot;*.html&amp;quot;
          git commit * -m &amp;quot;Render practical on ${{ matrix.config.os }}&amp;quot; || echo &#39;No changes to commit&#39;
          git push origin || echo &#39;No changes to commit&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Crikey, that&amp;rsquo;s alot, let&amp;rsquo;s break that down.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;on:&lt;/code&gt; section defines this will run
&lt;ul&gt;
&lt;li&gt;on pushes to the main branch,&lt;/li&gt;
&lt;li&gt;if the workflow dispatch button is clicked in the GitHub interface,&lt;/li&gt;
&lt;li&gt;and once per month (at midnight on the first day on the month) as defined by our &lt;code&gt;cron&lt;/code&gt; syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;jobs:&lt;/code&gt; section specifies
&lt;ul&gt;
&lt;li&gt;we will run this on 3 different operating systems, Windows (most of my students/course participants have Windows laptops, followed by macOS), macOS, and Ubuntu Linux. 
&lt;a href=&#34;https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;More info about GitHub Actions runners is available&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-parallel: 1&lt;/code&gt; says that each job will run in turn (this isn&amp;rsquo;t really needed but just to be safe since I will commit the output documents back into the repository)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env:&lt;/code&gt; specifies that we grant the jobs permission with out GitHub token&lt;/li&gt;
&lt;li&gt;&lt;code&gt;steps:&lt;/code&gt; defines what will run, which is
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we checkout the repo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we then install R and Quarto using the relevant actions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we setup the R dependency packages. I am not using &lt;strong&gt;renv&lt;/strong&gt;, so the action knows how to do this because I have included a &lt;em&gt;DESCRIPTION&lt;/em&gt; file in the repo (to the action we are faking that the repo is an R package - this is a trick from Hadley Wickham). The 
&lt;a href=&#34;https://github.com/remlapmot/example-exercise-to-run-on-schedule/blob/main/DESCRIPTION&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;full file is in the repository&lt;/a&gt; but the key entry is the &lt;em&gt;Imports&lt;/em&gt; list of hard depdenency packages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;...
Imports:
    knitr,
    quarto,
    sessioninfo
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;we specify &lt;code&gt;upgrade: &#39;TRUE&#39;&lt;/code&gt; to always install the latest version of the dependency packages.&lt;/li&gt;
&lt;li&gt;then we finally render the two versions of our Quarto document. Here we append the operating system name into the output document filenames and we commit these files back into the repository for our records. We have to specify &lt;code&gt;shell: bash&lt;/code&gt; because otherwise the Windows runner will use Powershell and the environment variable syntax in the &lt;code&gt;git config&lt;/code&gt; commands would be incorrect. Also we need a &lt;code&gt;git pull&lt;/code&gt; before making the commit because we have 3 jobs running in series, so there will new/amended files in the repo after the first and second jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phew!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s worth pointing out that instead of a Quarto document our practical could be in an R Markdown document or an R script (we&amp;rsquo;d just need to make the relevant changes in the workflow file above such as adding Pandoc and amending the render commands).&lt;/p&gt;
&lt;p&gt;Note, GitHub Actions only works for free in a public repository; so obviously this can&amp;rsquo;t be used for any material that is assessed.&lt;/p&gt;
&lt;h2 id=&#34;surprise-benefits&#34;&gt;Surprise benefits&lt;/h2&gt;
&lt;p&gt;A nice side effect of using the &lt;code&gt;r-lib/actions/setup-r&lt;/code&gt; and &lt;code&gt;quarto-dev/quarto-actions/setup&lt;/code&gt; actions is that they update to the release version of R/Quarto as updates are released. So you don&amp;rsquo;t have to worry about updating the version of R/Quarto.&lt;/p&gt;
&lt;h2 id=&#34;github-actions-woes&#34;&gt;GitHub Actions woes&lt;/h2&gt;
&lt;p&gt;At this point I acknowledge that sometimes GitHub Actions can be more trouble than they are worth. This is because they often fail for reasons which are not problems with your code. For example, I had one repository in which the Windows runner would regularly lose internet connection (I have no idea why) half way through installing the R dependency packages and hence would regularly notify me of a failed check. Also you need to keep the code in your workflow file up-to-date. Usually a quick comparison to the current version of the example in the r-lib/actions repo is enough to show you what you need to change.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to use GitHub Actions scheduling feature to automatically run scheduled checks on R packages and R scripts/R Markdown/Quarto documents for practicals enabling you to keep on top of any changes in your dependency packages and indeed in any changes in the release versions of R and Quarto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating R, Python, Stata, and Julia tutorial worksheets (with and without solutions) using Quarto</title>
      <link>https://remlapmot.github.io/post/2025/quarto-conditional-content/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/quarto-conditional-content/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I regularly need to produce exercises/tutorials for my students. One fantastic feature of R Markdown is that it allows me to create one R Markdown document which can be rendered to both the question document and the solutions document. This is achieved by toggling knitr chunk options such as eval, echo, and include, and using asis chunks to include the text for the solutions. I wrote a little package, 
&lt;a href=&#34;https://remlapmot.github.io/knitexercise/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;knitexercise&lt;/strong&gt;&lt;/a&gt; to help with this.&lt;/p&gt;
&lt;p&gt;The toggling of the knitr chunk options can be parameterised making it possible to have an R script which contains the code to conveniently produce both questions and solutions documents. An example R Markdown file, &lt;em&gt;exercise.Rmd&lt;/em&gt;, might look like the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
title: &amp;quot;`r params$title`&amp;quot;
output: html_document
params:
  solutions: TRUE
  title: &amp;quot;Example exercise: Solutions&amp;quot;
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(include = params$solutions)
```

1. This is question 1. Which might have some R code you always want to show.

   ```{r, include=TRUE}
   # example code for the question
   ```

   ```{asis}
   Paragraph text for the solution can be kept in the document in an `asis` chunk.
   And solution R code in an `r` chunk.
   Both of these will use the `include` value from the `setup` chunk.
   ```
    
   ```{r}
   # example code for the solution
   ```

2. This is question 2 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the rendering script might look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rmarkdown::render(&amp;quot;exercise.Rmd&amp;quot;,
  output_file = &amp;quot;exercise-questions&amp;quot;,
  params = list(solutions = FALSE, title = &amp;quot;Example exercise: Questions&amp;quot;)
)

rmarkdown::render(&amp;quot;exercise.Rmd&amp;quot;,
  output_file = &amp;quot;exercise-solutions&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;inline-code&#34;&gt;Inline code&lt;/h3&gt;
&lt;p&gt;Inline code has been a 
&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/r-code.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;feature of R Markdown&lt;/a&gt; for a while. Yihui Xie and Christophe Dervieux have used it to pull off some fantastic tricks. My favourite trick is using it to programmatically write out R Markdown/Markdown code within an R Markdown document when a certain condition is met.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;`r if (knitr::is_latex_output()) &amp;quot;...some_Markdown_to_include_when_rendering_to_pdf...&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;R Markdown is incredibly flexible because we can include R objects as document and chunk options. When translating this to a pure Quarto version we can do this in a document using in the knitr engine using the 
&lt;a href=&#34;https://quarto.org/docs/tools/rstudio.html#knitr-engine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;! expr ...&lt;/code&gt; YAML tag literal&lt;/a&gt;. As far as I am aware, this is not yet possible for any other Quarto engine. Despite this my aim was to see whether I could achieve parameterised conditional content inclusion/exclusion in a Quarto document using other engines.&lt;/p&gt;
&lt;h2 id=&#34;programmatically-including-conditional-content-in-quarto-documents&#34;&gt;Programmatically including conditional content in Quarto documents&lt;/h2&gt;
&lt;h3 id=&#34;r-knitr-and-quarto&#34;&gt;R: knitr and Quarto&lt;/h3&gt;
&lt;p&gt;I have already shown the R Markdown approach above.&lt;/p&gt;
&lt;p&gt;For Quarto using the knitr engine, in a blog post 
&lt;a href=&#34;https://nrennie.rbind.io/blog/r-tutorial-worksheets-quarto/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nicola Rennie&lt;/a&gt; used inline code to write out Quarto&amp;rsquo;s 
&lt;a href=&#34;https://quarto.org/docs/authoring/conditional.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conditional content classes&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format: html
params:
  hide_answers: true
engine: knitr
---

`r if (params$hide_answers) &amp;quot;::: {.content-hidden}&amp;quot;`

Text and code for answers.

`r if (params$hide_answers) &amp;quot;:::&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if you use the curly braces around the &lt;code&gt;r&lt;/code&gt; to write you inline code then you need to enclose the output string in the 
&lt;a href=&#34;https://quarto.org/docs/computations/inline-code.html#markdown-output&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;I()&lt;/code&gt; function&lt;/a&gt; and include the &lt;code&gt;else&lt;/code&gt; statement as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;`{r} if (params$hide_answers) I(&amp;quot;::: {.content-hidden}&amp;quot;) else &amp;quot;&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can have a shell script to render our questions and solutions documents as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;quarto render exercise-r.qmd -o exercise-r-questions.html
quarto render exercise-r.qmd -P hide_answers:false -o exercise-r-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;I realised I could adapt Nicola Rennie&amp;rsquo;s approach for other engines. For the &lt;code&gt;jupyter: python3&lt;/code&gt; engine we can do so as follows, the following code uses 
&lt;a href=&#34;https://quarto.org/docs/computations/parameters.html#jupyter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto&amp;rsquo;s parameters feature&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format: html
jupyter: python3
---

```{python}
#| include: false
#| tags: [parameters]
hide_answers = True
```

```{python}
#| include: false
from IPython.display import Markdown
```

`{python} Markdown(&amp;quot;::: {.content-hidden}&amp;quot;) if hide_answers else Markdown(&amp;quot; &amp;quot;)`

```{python}
print(&amp;quot;Hidden in questions&amp;quot;)
```

`{python} Markdown(&amp;quot;:::&amp;quot;) if hide_answers else Markdown(&amp;quot; &amp;quot;)`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shell script to render our questions and solutions documents is as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;quarto render exercise-python.qmd -o exercise-python-questions.html
quarto render exercise-python.qmd -P hide_answers:False -o exercise-python-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As of Quarto version 1.7.23 it is possible to suppress the injected parameters cell.&lt;/p&gt;
&lt;h3 id=&#34;stata&#34;&gt;Stata&lt;/h3&gt;
&lt;p&gt;The Stata case involved two additional tricks. First, the 
&lt;a href=&#34;https://hugetim.github.io/nbstata/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nbstata Jupyter kernel&lt;/a&gt; allows inline code, however this must be a 
&lt;a href=&#34;https://www.stata.com/manuals/pdisplay.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;display&lt;/code&gt; command&lt;/a&gt;, so we cannot write the if statement within the inline code. I found I can overcome this by saving the different strings in scalars (because the inline code can&amp;rsquo;t use local macros) at the top of the document as follows. Second, I didn&amp;rsquo;t try but I suspect the nbstata kernel doesn&amp;rsquo;t support parameters, and so I achieved the toggling of the code using an environment variable, e.g. &lt;code&gt;HIDE_ANSWERS_STATA&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format: html
jupyter: nbstata
---

```{stata}
*| include: false
local hide_answers : env HIDE_ANSWERS_STATA
if (`hide_answers&#39;) {
    scalar hide_answers_open = &amp;quot;::: {.content-hidden}&amp;quot;
    scalar hide_answers_close = &amp;quot;:::&amp;quot;     
}
else {
    scalar hide_answers_open = &amp;quot; &amp;quot;
    scalar hide_answers_close = &amp;quot; &amp;quot;
}
```

`{stata} scalar(hide_answers_open)`

```{stata}
display &amp;quot;Hidden in questions&amp;quot;
```

`{stata} scalar(hide_answers_close)`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shell script to render the documents is then as follows, here we define the environment variable before the call to &lt;code&gt;quarto&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;HIDE_ANSWERS_STATA=1 quarto render exercise-stata.qmd -o exercise-stata-questions.html
HIDE_ANSWERS_STATA=0 quarto render exercise-stata.qmd -o exercise-stata-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;julia&#34;&gt;Julia&lt;/h3&gt;
&lt;p&gt;For the native Julia engine I found that Quarto&amp;rsquo;s parameterisation worked and that I could avoid the inclusion of the injected parameters cell output by leaving the chunk with the &lt;code&gt;parameters&lt;/code&gt; tag empty.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
format: html
engine: julia
---

```{julia}
#| tags: [parameters]
```

```{julia}
#| include: false
using Markdown
```

`{julia} hide_answers ? md&amp;quot;::: {.content-hidden}&amp;quot; : md&amp;quot;&amp;quot;`

```{julia}
println(&amp;quot;Hidden in questions&amp;quot;)
```

`{julia} hide_answers ? md&amp;quot;:::&amp;quot; : md&amp;quot;&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shell script to render the documents is then as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;quarto render exercise-julia.qmd -P hide_answers:true -o exercise-julia-questions.html
quarto render exercise-julia.qmd -P hide_answers:false -o exercise-julia-solutions.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;problems-with-environment-variables&#34;&gt;Problems with environment variables&lt;/h2&gt;
&lt;p&gt;I found that passing environment variables, to the &lt;code&gt;jupyter: python3&lt;/code&gt; and &lt;code&gt;engine: julia&lt;/code&gt; is unreliable/broken. Admittedly, I was not using Quarto in project mode with an 
&lt;a href=&#34;https://quarto.org/docs/projects/environment.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;_environment&lt;/em&gt; file&lt;/a&gt;, but honestly it doesn&amp;rsquo;t feel to me I should need to do that for a single document.&lt;/p&gt;
&lt;p&gt;The problem I found was that after a first render the value of the environment variable seems to be cached within the Quarto output document and I couldn&amp;rsquo;t change it on subsequent renders. I also found that using the 
&lt;a href=&#34;https://pypi.org/project/python-dotenv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;dotenv&lt;/strong&gt; package&lt;/a&gt; to access was broken in the same way.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;engine: julia&lt;/code&gt; I also found that passing environment variables is unreliable and like for the &lt;code&gt;jupyter: python3&lt;/code&gt; engine I experienced environment variable values being stuck after the first render. However, using the Julia 
&lt;a href=&#34;https://juliapackages.com/p/dotenv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;DotEnv&lt;/strong&gt; package&lt;/a&gt; did seem to be reliable.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to programmatically include conditional content for several Quarto engines (&lt;code&gt;knitr&lt;/code&gt;, &lt;code&gt;jupyter: python3&lt;/code&gt;, &lt;code&gt;jupyter: nbstata&lt;/code&gt;, and &lt;code&gt;engine: julia&lt;/code&gt;) using parameters or environment variables to toggle inline code to write Quarto Markdown in the Quarto documents. I use this to write exercise/tutorial documents in which a single Quarto document is used to output both the questions and solutions documents.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
