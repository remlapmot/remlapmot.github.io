<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stata | Dr Tom Palmer</title>
    <link>https://remlapmot.github.io/tag/stata/</link>
      <atom:link href="https://remlapmot.github.io/tag/stata/index.xml" rel="self" type="application/rss+xml" />
    <description>Stata</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 15 Feb 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://remlapmot.github.io/images/icon_hu_72d72b3c768972db.png</url>
      <title>Stata</title>
      <link>https://remlapmot.github.io/tag/stata/</link>
    </image>
    
    <item>
      <title>Creating effectively multi-engine Quarto documents using Quarto&#39;s embed shortcode</title>
      <link>https://remlapmot.github.io/post/2025/multi-engine-quarto/</link>
      <pubDate>Sat, 15 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/multi-engine-quarto/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Have you ever needed to present the code and output for several languages in the same document or website? I work in (non-infectious disease) Epidemiology and so it is common that researchers would like to present R and Stata code in the same document. However, a Quarto document can only run a single engine. There are already several work around solutions, which include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;writing out the different language code cells but making them unevaluated/not executed chunks (this is done alot on the 
&lt;a href=&#34;https://quarto.org/docs/reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto documentation website&lt;/a&gt;). One can also include saved plots from the different languages;&lt;/li&gt;
&lt;li&gt;if your document has a combination of languages from which you can call one from the other, such as using 
&lt;a href=&#34;https://rstudio.github.io/reticulate/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;reticulate&lt;/strong&gt;&lt;/a&gt; from within R to run Python, or using 
&lt;a href=&#34;https://cran.r-project.org/package=Statamarkdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Statamarkdown&lt;/strong&gt;&lt;/a&gt; from within R to run Stata, or using 
&lt;a href=&#34;https://cran.r-project.org/package=JuliaCall&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;JuliaCall&lt;/strong&gt;&lt;/a&gt; from within R to run Julia, then these can be combined in a Quarto document;&lt;/li&gt;
&lt;li&gt;or for some languages like R and Python we could even embed full WebAssembly implementations of the language (
&lt;a href=&#34;https://docs.r-wasm.org/webr/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebR&lt;/a&gt; and 
&lt;a href=&#34;https://pyodide.org/en/stable/#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pyodide&lt;/a&gt; respectively) within a webpage (which admittedly seems a little overkill for my work).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve found an alternative solution allowing you to use the native engines for each language. I recently stumbled across 
&lt;a href=&#34;https://quarto.org/docs/authoring/notebook-embed.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto&amp;rsquo;s embed shortcode&lt;/a&gt;. This allows another (or selected cells from another) Quarto document to be embedded in a Quarto document. A thought occurred to me, what if the embedded Quarto document/s used a different engine? Would that work? This isn&amp;rsquo;t explicitly mentioned on the documentation page, so I gave it a go. Remarkably, the answer turns out to be that it works! Let&amp;rsquo;s find out what to do.&lt;/p&gt;
&lt;h2 id=&#34;using-the-embed-shortcode-to-create-an-effectively-multi-engine-quarto-document&#34;&gt;Using the embed shortcode to create an effectively multi-engine Quarto document&lt;/h2&gt;
&lt;p&gt;In the example below I&amp;rsquo;m using a 
&lt;a href=&#34;https://quarto.org/docs/output-formats/html-basics.html#tabsets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tabset&lt;/a&gt; in a html document using the knitr engine. We embed the documents using the alternative engines for Python, Stata, and Julia using the &lt;code&gt;{{&amp;lt; embed &amp;gt;}}&lt;/code&gt; shortcode as shown below. For each language I just show printing a string and a basic plot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: An effectively multi-engine Quarto document using the embed shortcode
format:
  html:
    embed-resources: true
engine: knitr
---

::: {.panel-tabset .nav-pills}
## R

```{r}
print(&amp;quot;Hello World, from R&amp;quot;)
```

```{r}
#| fig-align: &amp;quot;center&amp;quot;
x &amp;lt;- seq(-10,10, by = 0.1)
y &amp;lt;- x ^ 3
plot(x, y, type = &amp;quot;l&amp;quot;)
```

## Python

{{&amp;lt; embed python-code-using-jupyter-python3-engine.qmd echo=true &amp;gt;}}

## Stata

{{&amp;lt; embed stata-code-using-jupyter-nbstata-engine.qmd echo=true &amp;gt;}}

## Julia

{{&amp;lt; embed julia-code-using-julia-engine.qmd echo=true &amp;gt;}}

:::
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;em&gt;python-code-using-jupyter-python3-engine.qmd&lt;/em&gt; document uses the &lt;code&gt;jupyter: python3&lt;/code&gt; engine (
&lt;a href=&#34;https://quarto.org/docs/computations/python.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation for using Python in Quarto&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;stata-code-using-jupyter-nbstata-engine.qmd&lt;/em&gt; document uses the &lt;code&gt;jupyter: nbstata&lt;/code&gt; engine (
&lt;a href=&#34;https://hugetim.github.io/nbstata/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation for nbstata&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;and the &lt;em&gt;julia-code-using-julia-engine.qmd&lt;/em&gt; uses &lt;code&gt;engine: julia&lt;/code&gt;. Alternatively, it should be possible to use the 
&lt;a href=&#34;https://julialang.github.io/IJulia.jl/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IJulia&lt;/a&gt; Jupyter kernel (
&lt;a href=&#34;https://quarto.org/docs/computations/julia.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation for using Julia in Quarto&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, I assume that you have setup each engine beforehand.&lt;/p&gt;
&lt;p&gt;Rendering the Quarto document above results in the embedded documents being executed and embedded within it. I&amp;rsquo;ve included the output below (and the full source code is in 
&lt;a href=&#34;https://github.com/remlapmot/quarto-multi-engine-using-embed-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this repository&lt;/a&gt;). Click the tabs to show the code and output for each language.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;iframe src=&#34;https://remlapmot.github.io/quarto-multi-engine-using-embed-example/&#34; height=&#34;750&#34; width=&#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;p&gt;In the code above, in each case, I embed the whole Quarto document but you can also specify a specific code block id (or if the embedded document is a Jupyter Notebook, &lt;em&gt;.ipynb&lt;/em&gt; file, you can specify a cell id, label, or tag).&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to use the Quarto embed shortcode to embed Quarto documents using alternative engines to create an effectively multi-engine Quarto document.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fuller reproducibility in Stata ado-files and programs: setting the version and user version</title>
      <link>https://remlapmot.github.io/post/2023/stata-reproducibility/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2023/stata-reproducibility/</guid>
      <description>&lt;p&gt;Most proficient Stata users have come across the &lt;code&gt;version&lt;/code&gt; command. This is an incredibly powerful command, which simply by issuing say&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;version 18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;at the top of a do-file or within a program (typically in an ado-file) means that you have pretty much guaranteed your code will run in the same way when you come to run it later (most likely in a newer version of Stata). But it turns out there’s a subtle difference between issuing &lt;code&gt;version&lt;/code&gt; in a do-file/interactively compared to within a program or ado-file.&lt;/p&gt;
&lt;p&gt;Several years ago I wrote the &lt;strong&gt;reffadjust&lt;/strong&gt; package (
&lt;a href=&#34;#ref-palmer-sj-2014&#34;&gt;Palmer et al. 2014&lt;/a&gt;) as part of some work using random effects models (
&lt;a href=&#34;#ref-mcdw-sim-2012&#34;&gt;Macdonald-Wallis et al. 2012&lt;/a&gt;). It has two programs &lt;code&gt;reffadjustsim&lt;/code&gt; and &lt;code&gt;reffadjust4nlcom&lt;/code&gt; which use the output of various random effects commands, including those from MLwiN, run from Stata using the user-written &lt;code&gt;runmlwin&lt;/code&gt; command (
&lt;a href=&#34;#ref-leckie-jss-2013&#34;&gt;Leckie and Charlton 2013&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;reffadjust&lt;/strong&gt; package doesn’t have many users and over the years I hadn’t regularly checked if the programs were still working. But in the ado-files I had set &lt;code&gt;version 13&lt;/code&gt;, which gave me some residual confidence that the programs might still work.&lt;/p&gt;
&lt;p&gt;However, a few years ago, when I eventually did run some test code I saw that the &lt;code&gt;reffadjustsim&lt;/code&gt; tests were failing for MLwiN/&lt;code&gt;runmlwin&lt;/code&gt; models. I didn’t have time to investigate further at this point, and I didn’t have any intuition whether the error resulted from a change in MLwiN, &lt;code&gt;runmlwin&lt;/code&gt;, or Stata.&lt;/p&gt;
&lt;p&gt;At the beginning of this year one of my colleagues mentioned that they were using &lt;strong&gt;reffadjust&lt;/strong&gt; in their work and had observed the same error with &lt;code&gt;reffadjustsim&lt;/code&gt;. My guilt kicked in, and I eventually found some time to investigate. I discovered that since I wrote the package, Stata processes matrix row and column stripes (essentially the row and column names) in a more advanced way. This meant that the row and column stripes for covariance elements in the &lt;code&gt;e(V)&lt;/code&gt; matrix (the variance-covariance matrix of parameter estimates) from MLwiN/&lt;code&gt;runmlwin&lt;/code&gt; models were being renamed when I hadn’t intended them to be, which caused the error.&lt;/p&gt;
&lt;p&gt;But wait … I had specified &lt;code&gt;version 13&lt;/code&gt; at the top of my program, so why was this update in later versions of Stata taking effect?&lt;/p&gt;
&lt;p&gt;I couldn’t work it out, so I had to ask Stata Technical Support. They were kind enough to tell me that there’s an additional method of invoking the &lt;code&gt;version&lt;/code&gt; command which controls what is known as the “user version”. There are some modifications in new versions of Stata which are exempt from the basic invocation of the &lt;code&gt;version&lt;/code&gt; command (but only in programs and ado-files). In do-files issuing &lt;code&gt;version&lt;/code&gt; sets both the version and the user version, however, in programs and ado-files the “user version”, is set by &lt;code&gt;version #, user&lt;/code&gt;, and holds these additional modifications in Stata to the required version.&lt;/p&gt;
&lt;p&gt;Naturally, this is explained in the &lt;code&gt;version&lt;/code&gt; helpfile and 
&lt;a href=&#34;https://www.stata.com/manuals/pversion.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;manual entry&lt;/a&gt;, which I admit I had not read until this point. Hence, simply editing the top of my program to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;version 13
version 13, user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fixed my error. So in a program or ado-file, we require both lines, whereas in a do-file we’d only require &lt;code&gt;version 13&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can see the different operation of &lt;code&gt;version&lt;/code&gt; by the following short example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;/* Do-file/interactive code to set both the version and the user version */
version 13
display c(version), c(userversion), c(stata_version)
// 13 13 18.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-stata&#34;&gt;/* Ado-file/program code to set both the version and the user version */
program mytest
version 13
display c(version), c(userversion), c(stata_version)
version 13, user
display c(version), c(userversion), c(stata_version)
end

mytest
// 13 18.5 18.5
// 13 13 18.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In summary, my &lt;code&gt;reffadjustsim&lt;/code&gt; command works again for MLwiN/&lt;code&gt;runmlwin&lt;/code&gt; models. The updated version is available from 
&lt;a href=&#34;https://github.com/remlapmot/reffadjust&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;its GitHub repo&lt;/a&gt;. And if you ever need &lt;em&gt;fuller&lt;/em&gt; reproducibility in your Stata ado-file or program remember to set both the version and the user version.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34; entry-spacing=&#34;0&#34;&gt;
&lt;div id=&#34;ref-leckie-jss-2013&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Leckie, George, and Chris Charlton. 2013. “&lt;span class=&#34;nocase&#34;&gt;runmlwin: A Program to Run the MLwiN Multilevel Modeling Software from within Stata&lt;/span&gt;.” &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 52 (11): 1–40. 
&lt;a href=&#34;https://doi.org/10.18637/jss.v052.i11&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.18637/jss.v052.i11&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-mcdw-sim-2012&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Macdonald-Wallis, Corrie, Debbie A. Lawlor, Tom Palmer, and Kate Tilling. 2012. “Multivariate Multilevel Spline Models for Parallel Growth Processes: Application to Weight and Mean Arterial Pressure in Pregnancy.” &lt;em&gt;Statistics in Medicine&lt;/em&gt; 31 (26): 3147–64. 
&lt;a href=&#34;https://doi.org/doi.org/10.1002/sim.5385&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/doi.org/10.1002/sim.5385&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-palmer-sj-2014&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Palmer, Tom M., Corrie M. Macdonald-Wallis, Debbie A. Lawlor, and Kate Tilling. 2014. “&lt;span class=&#34;nocase&#34;&gt;Estimating adjusted associations between random effects from multilevel models: The reffadjust package&lt;/span&gt;.” &lt;em&gt;The Stata Journal&lt;/em&gt; 14 (1): 119–40. 
&lt;a href=&#34;https://doi.org/10.1177/1536867X1401400109&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.1177/1536867X1401400109&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
