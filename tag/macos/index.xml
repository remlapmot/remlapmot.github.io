<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>macOS | Dr Tom Palmer</title>
    <link>https://remlapmot.github.io/tag/macos/</link>
      <atom:link href="https://remlapmot.github.io/tag/macos/index.xml" rel="self" type="application/rss+xml" />
    <description>macOS</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 21 Feb 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://remlapmot.github.io/images/icon_hu_72d72b3c768972db.png</url>
      <title>macOS</title>
      <link>https://remlapmot.github.io/tag/macos/</link>
    </image>
    
    <item>
      <title>Creating a Finder Smart Folder of your RStudio Project files to enable super fast project launching</title>
      <link>https://remlapmot.github.io/post/2025/smart-folders/</link>
      <pubDate>Fri, 21 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/smart-folders/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When I&amp;rsquo;m switching projects I naturally start with Finder. I&amp;rsquo;m sure if I became a Terminal warrior there are faster ways of searching for files (e.g. the 
&lt;a href=&#34;https://github.com/alexpasmantier/television&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Television&lt;/a&gt; fuzzy finder TUI). And I know there are other ways to avoid using Finder, e.g., using Spotlight, 
&lt;a href=&#34;https://www.alfredapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alfred&lt;/a&gt;, or 
&lt;a href=&#34;https://www.raycast.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Raycast&lt;/a&gt;; and indeed I do have 
&lt;a href=&#34;https://rstats.wtf/projects#tricks-for-opening-projects&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this fantastic tip&lt;/a&gt; that allows Alfred to find RStudio project files setup. But something to do with how I learnt to use a computer just naturally means I&amp;rsquo;m wedded to Finder, but navigating through my mess of nested directories wastes time and energy.&lt;/p&gt;
&lt;p&gt;I realised that Finder on macOS has a helpful feature called Smart Folders. We can use this to setup a saved search of RStudio Project &lt;em&gt;.Rproj&lt;/em&gt; files (and/or VSCode/Positron &lt;em&gt;.code-workspace&lt;/em&gt; files) to allow us to see all the &lt;em&gt;.Rproj&lt;/em&gt; files on our computer. This makes finding and opening projects from within Finder fast and convenient.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-smart-folder-of-your-rstudio-project-files&#34;&gt;Setting up a Smart Folder of your RStudio project files&lt;/h2&gt;
&lt;p&gt;In Finder;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;navigate to the folder you want your search to start in, either your home folder or your Documents folder are obvious candidates&lt;/li&gt;
&lt;li&gt;click File | New Smart Folder&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/new-smart-folder.png&#34; alt=&#34;Screenshot of creating a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;near the top right corner click the plus button next to the &lt;em&gt;Save&lt;/em&gt; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/plus-to-right-of-save.png&#34; alt=&#34;Screenshot of creating a new condition as part for a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;we need to add the &lt;em&gt;File extension&lt;/em&gt; attribute to the choices, click &lt;em&gt;Name&lt;/em&gt; near the top left, then &lt;em&gt;Other&amp;hellip;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/name-other.png&#34; alt=&#34;Screenshot of adding a new attribute as part for a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Then search for &lt;em&gt;File extension&lt;/em&gt; and check the box on the right handside&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/adding-file-extension-attribute.png&#34; alt=&#34;Screenshot of adding the file extension attribute as part for a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;enter &lt;em&gt;Rproj&lt;/em&gt; in the box (it doesn&amp;rsquo;t seem to matter if you include the . first)&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/entering-file-extension.png&#34; alt=&#34;Screenshot of adding the file extension condition as part for a new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;click &lt;em&gt;Save&lt;/em&gt; (near top right corner) and give it a sensible name, e.g., &lt;em&gt;Rproj.savedSearch&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2025/smart-folders/img/saving.png&#34; alt=&#34;Screenshot of saving the new Smart Folder in macOS Finder.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;And you&amp;rsquo;ll see the new virtual folder appear on the left Finder sidebar - 
&lt;a href=&#34;#top&#34;&gt;see the screenshot at the top of this post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can create additional Smart Folders for other useful file extensions, for example, VSCode/Positron project files (&lt;em&gt;.code-workspace&lt;/em&gt; files).&lt;/p&gt;
&lt;p&gt;On Windows, I don&amp;rsquo;t believe that there is an exact equivalent of a Smart Folder. I think that the closest you can get is to save a search in File Explorer. However, I find that in recent years File Explorer on Windows 11 has become incredibly slow and regularly crashes. Searching in 
&lt;a href=&#34;https://files.community/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Files&lt;/a&gt; or 
&lt;a href=&#34;https://filepilot.tech/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;File Pilot&lt;/a&gt; is now much faster and more reliable.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to create a Smart Folder of your RStudio Project files for fast and convenient project launching on macOS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Launch RStudio, Positron, and other Data Science apps from your Finder Toolbar</title>
      <link>https://remlapmot.github.io/post/2024/finder-toolbar-apps/</link>
      <pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/finder-toolbar-apps/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Have you ever wanted to be able to quickly open a Data Science app, say RStudio Desktop or Positron in the current Finder window at the click of a button? We&amp;rsquo;ll see how to achieve this by creating Automator apps. Here&amp;rsquo;s a screenshot of what we&amp;rsquo;ll end up with.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/finder-toolbar-apps/img/finder-window-with-toolbar-apps.png&#34; alt=&#34;Screenshot of a Finder window with app icons in its toolbar.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;creating-the-automator-apps&#34;&gt;Creating the Automator apps&lt;/h2&gt;
&lt;p&gt;Open Automator and select &lt;em&gt;New&lt;/em&gt; then &lt;em&gt;Application&lt;/em&gt; and click &lt;em&gt;Choose&lt;/em&gt;. Then in the top left search bar enter &lt;em&gt;applescript&lt;/em&gt; and drag and drop the &lt;em&gt;Run Applescript&lt;/em&gt; action onto the main window.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/finder-toolbar-apps/img/automator-run-applescript.png&#34; alt=&#34;Screenshot of the Automator app.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;We then need to enter the relevant AppleScript code for launching each app in the current Finder window. Currently, I use 
&lt;a href=&#34;https://wezfurlong.org/wezterm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WezTerm&lt;/a&gt; for my terminal emulator, 
&lt;a href=&#34;https://zed.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zed&lt;/a&gt; as my main text editor, 
&lt;a href=&#34;https://posit.co/products/open-source/rstudio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Desktop&lt;/a&gt; for most of my R/R Markdown/Quarto coding, 
&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Visual Studio Code&lt;/a&gt; for other text editing tasks, and I have been starting to try out 
&lt;a href=&#34;https://positron.posit.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Positron&lt;/a&gt;. My AppleScript code for each app is as follows.&lt;/p&gt;
&lt;h3 id=&#34;rstudio-desktop&#34;&gt;RStudio Desktop&lt;/h3&gt;
&lt;p&gt;It is worth noting that RStudio automatically detects whether there is an &lt;em&gt;.Rproj&lt;/em&gt; file in the directory and opens in project mode if one is found (note this only works if RStudio is not already open).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    set myWin to window 1
    set thePath to (quoted form of POSIX path of (target of myWin as alias))
    do shell script &amp;quot;/Applications/RStudio.app/Contents/MacOS/RStudio &amp;quot; &amp;amp; thePath
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create an alternative app which specifically opens RStudio project (&lt;em&gt;.Rproj&lt;/em&gt;) files as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    try
      set currentFolder to (folder of window 1) as alias
      set workspaceFiles to (every file of currentFolder whose name extension is &amp;quot;Rproj&amp;quot;)
      if (count of workspaceFiles) = 0 then
        set thePath to quoted form of POSIX path of (currentFolder as alias)
        do shell script &amp;quot;/Applications/RStudio.app/Contents/MacOS/RStudio &amp;quot; &amp;amp; thePath
      else if (count of workspaceFiles) = 1 then 
        set workspaceFile to item 1 of workspaceFiles
        set workspacePath to POSIX path of (workspaceFile as alias)
        do shell script &amp;quot;open -n -a RStudio &amp;quot; &amp;amp; quoted form of workspacePath
      else if (count of workspaceFiles) &amp;gt; 1 then 
        display dialog &amp;quot;Multiple Rproj files found in directory.&amp;quot;
      end if
      on error
        display dialog &amp;quot;No Finder window is open.&amp;quot;
      end try
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;wezterm&#34;&gt;WezTerm&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    set myWin to window 1
    set thePath to (quoted form of POSIX path of (target of myWin as alias))
    do shell script &amp;quot;/opt/homebrew/bin/wezterm-gui start --cwd &amp;quot; &amp;amp; thePath &amp;amp; &amp;quot;&amp;amp;&amp;gt; /dev/null &amp;amp;&amp;quot;
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;zed&#34;&gt;Zed&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    set myWin to window 1
    set thePath to (quoted form of POSIX path of (target of myWin as alias))
    do shell script &amp;quot;/usr/local/bin/zed -n &amp;quot; &amp;amp; thePath
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;r-launched-in-a-wezterm-terminal-session&#34;&gt;R launched in a WezTerm terminal session&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    set myWin to window 1
    set thePath to (quoted form of POSIX path of (target of myWin as alias))
    do shell script &amp;quot;/opt/homebrew/bin/wezterm-gui start --cwd &amp;quot; &amp;amp; thePath &amp;amp; &amp;quot; -- /usr/local/bin/R &amp;amp;&amp;gt; /dev/null &amp;amp;&amp;quot;
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;visual-studio-code-and-positron&#34;&gt;Visual Studio Code and Positron&lt;/h3&gt;
&lt;p&gt;First enable the ability to launch these apps with &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;positron&lt;/code&gt; from a Terminal in each app, see 
&lt;a href=&#34;https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and 
&lt;a href=&#34;https://positron.posit.co/add-to-path.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This script is more involved because we first check for any &lt;em&gt;.code-workspace&lt;/em&gt; files and open one if found. My AppleScript coding is not very proficient, so there may more efficient approaches to coding this. If we didn&amp;rsquo;t explicitly open the &lt;em&gt;.code-workspace&lt;/em&gt; file and if one is present in the directory Visual Studio Code/Positron will detect it and pop up a dialogue box asking if we want to reopen the directory as a workspace (I just prefer to skip this step).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    try
      set currentFolder to (folder of window 1) as alias
      set workspaceFiles to (every file of currentFolder whose name extension is &amp;quot;code-workspace&amp;quot;)
      if (count of workspaceFiles) = 0 then 
        set folderPath to POSIX path of currentFolder
        do shell script &amp;quot;/usr/local/bin/positron -n &amp;quot; &amp;amp; quoted form of folderPath
      else if (count of workspaceFiles) = 1 then 
        set workspaceFile to item 1 of workspaceFiles
        set workspacePath to POSIX path of (workspaceFile as alias)
        do shell script &amp;quot;/usr/local/bin/positron -n &amp;quot; &amp;amp; quoted form of workspacePath
      else if (count of workspaceFiles) &amp;gt; 1 then 
        display dialog &amp;quot;Multiple code-workspace files found in directory.&amp;quot;  
      end if
      on error
        display dialog &amp;quot;No Finder window is open.&amp;quot;
      end try
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(For your Visual Studio Code app simply replace &lt;code&gt;positron&lt;/code&gt; with &lt;code&gt;code&lt;/code&gt;.)&lt;/p&gt;
&lt;h3 id=&#34;ghostty&#34;&gt;Ghostty&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;on run {input, parameters}
  tell application &amp;quot;Finder&amp;quot;
    set myWin to window 1
    set thePath to (quoted form of POSIX path of (target of myWin as alias))
    do shell script &amp;quot;open -na ghostty --args --title=ghostty-from-finder --working-directory=&amp;quot; &amp;amp; thePath
  end tell
end run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;saving-and-adding-icons&#34;&gt;Saving and adding icons&lt;/h3&gt;
&lt;p&gt;After adding the AppleScript code save each app. I call mine, e.g., &lt;em&gt;RStudio-openhere.app&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Next it is helpful to give each app the relevant icon. To do this in Finder bring up the Info boxes for the original app and your &lt;em&gt;-openhere&lt;/em&gt; version by selecting each app and pressing &lt;kbd&gt;Cmd&lt;/kbd&gt;+&lt;kbd&gt;I&lt;/kbd&gt;. Next drag the large icon from the original app onto the small icon of your &lt;em&gt;-openhere&lt;/em&gt; app.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/finder-toolbar-apps/img/updating-icon.png&#34; alt=&#34;Screenshot of copying the Positron icon onto our openhere app.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h3 id=&#34;adding-the-apps-to-the-finder-toolbar&#34;&gt;Adding the apps to the Finder toolbar&lt;/h3&gt;
&lt;p&gt;Finally, we need to place shortcuts of these apps onto the Finder toolbar. To do this first hold down &lt;kbd&gt;Cmd&lt;/kbd&gt; then drag the app from Finder onto the toolbar to the location you would like. On release the app should now be in the toolbar. (And to remove an icon from the toolbar, again hold &lt;kbd&gt;Cmd&lt;/kbd&gt; then drag it off the toolbar.)&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/finder-toolbar-apps/img/add-app-to-toolbar.png&#34; alt=&#34;Screenshot of moving our Positron-openhere app onto the Finder toolbar.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to create Automator apps to open RStudio Desktop, Positron, and several other Data Science apps from the current Finder window.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running MLwiN using mlnscript via the R2MLwiN R package on Apple Silicon Macs </title>
      <link>https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/</link>
      <pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;MLwiN from the Centre for Multilevel Modelling (CMM) at the University of Bristol (disclaimer: where I also work) is a fantastic piece of software (
&lt;a href=&#34;#ref-mlwin&#34;&gt;Charlton et al. 2024&lt;/a&gt;). The name suggests it only works on Windows, but as we’ll find out this is very much not the case.&lt;/p&gt;
&lt;p&gt;However, in the past this was sort of true because to make it work on a Mac (or Linux machine) with an Intel processor one would need to run it using 
&lt;a href=&#34;https://www.winehq.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More recently, CMM have cleverly made the MLwiN libraries available for other operating systems in a command line version of the program called &lt;code&gt;mlnscript&lt;/code&gt; and an accompanying library. The files for macOS are universal binaries which means that they run natively on both Intel and Apple Silicon Macs. Let’s find out how to set this up.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;setting-up-mlnscript-on-an-apple-silicon-mac&#34;&gt;Setting up mlnscript on an Apple Silicon Mac&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Obtain the installer for macOS. See the relevant download page (depending upon whether you are an academic) on the MLwiN 
&lt;a href=&#34;https://www.bristol.ac.uk/cmm/software/mlwin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;website&lt;/a&gt;. On the form on the &lt;em&gt;File to download&lt;/em&gt; dropdown menu select the &lt;em&gt;mlnscript for MacOS&lt;/em&gt; option. This will give you the &lt;em&gt;MLN.dmg&lt;/em&gt; installer.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/img/mlwin-download-choice.png&#34; alt=&#34;Screenshot of MLwiN download choices.&#34; width=&#34;350&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Double click the installer. On macOS it is recommended to install the files into the &lt;em&gt;/opt/mln/&lt;/em&gt; directory, which you will need to create with Admin permissions, or install to another directory if you don’t have Admin permissions. Copy the 2 files &lt;em&gt;mlnscript&lt;/em&gt; and &lt;em&gt;libmln.dylib&lt;/em&gt; into the &lt;em&gt;/opt/mln&lt;/em&gt; (or other) directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once installed we can check that &lt;em&gt;mlnscript&lt;/em&gt; and &lt;em&gt;libmln.dylib&lt;/em&gt; are universal binaries as follows (we could also use the &lt;code&gt;file&lt;/code&gt; command).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lipo -archs /opt/mln/mlnscript
## x86_64 arm64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since both architectures are listed in the output this indicates the files are universal binaries. Apple Silicon Macs will use the arm64 architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we need to grant the two files permission to run. To do this run the following in your Terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/mln/mlnscript --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On first run, this will fail with a pop-up similar to the following.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/img/security-popup-01.png&#34; alt=&#34;Screenshot of macOS security warning pop-up.&#34; width=&#34;350&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Click &lt;em&gt;Cancel&lt;/em&gt; and then go into the &lt;em&gt;System settings&lt;/em&gt; | &lt;em&gt;Privacy &amp;amp; Security&lt;/em&gt; and scroll down and click &lt;em&gt;Allow Anyway&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/img/mlnscript-settings.png&#34; alt=&#34;Screenshot of macOS privacy and security setting.&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Then running the version check command again you may receive another popup in which you click &lt;em&gt;Open&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/mlnscript-r2mlwin-apple-silicon/img/security-popup-02.png&#34; alt=&#34;Screenshot of macOS security warning pop-up.&#34; width=&#34;350&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this the first popup will then appear but about the &lt;em&gt;libmln.dylib&lt;/em&gt; file. Again set the security setting to &lt;em&gt;Allow All&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now running the version check command again you should see the version number – which is currently 3.10.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/mln/mlnscript --version
## 3.13
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In R we then install the &lt;strong&gt;R2MLwiN&lt;/strong&gt; package from CRAN (
&lt;a href=&#34;#ref-r2mlwin&#34;&gt;Zhang et al. 2016&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;R2MLwiN&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This completes the setup - phew 😮!&lt;/p&gt;
&lt;h2 id=&#34;running-a-multilevel-model&#34;&gt;Running a multilevel model&lt;/h2&gt;
&lt;p&gt;For an example we could run one of the demos in the package, we can list those with the following code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;demo(package = &amp;quot;R2MLwiN&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can run one, for example, let’s fit the random intercept model from the &lt;em&gt;UserGuide02&lt;/em&gt; demo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(R2MLwiN)
# if you did not install mlnscript and libmln.dylib in /opt/mln , set:
# options(MLwiN_path = &amp;quot;/path-to/mlnscript&amp;quot;)
(mymodel1 &amp;lt;- runMLwiN(normexam ~ 1 + sex + (1 | student), data = tutorial))
#&amp;gt; 
#&amp;gt; -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- 
#&amp;gt; MLwiN (version: unknown or &amp;gt;3.09)  multilevel model (Normal) 
#&amp;gt; Estimation algorithm:  IGLS        Elapsed time : 0.03s 
#&amp;gt; Number of obs:  4059 (from total 4059)        The model converged after 3 iterations.
#&amp;gt; Log likelihood:      -5727.9 
#&amp;gt; Deviance statistic:  11455.7 
#&amp;gt; --------------------------------------------------------------------------------------------------- 
#&amp;gt; The model formula:
#&amp;gt; normexam ~ 1 + sex + (1 | student)
#&amp;gt; Level 1: student      
#&amp;gt; --------------------------------------------------------------------------------------------------- 
#&amp;gt; The fixed part estimates:  
#&amp;gt;                Coef.   Std. Err.       z    Pr(&amp;gt;|z|)         [95% Conf.   Interval] 
#&amp;gt; Intercept   -0.14035     0.02463   -5.70   1.209e-08   ***     -0.18862    -0.09208 
#&amp;gt; sexgirl      0.23367     0.03179    7.35   1.985e-13   ***      0.17136     0.29598 
#&amp;gt; Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1  
#&amp;gt; --------------------------------------------------------------------------------------------------- 
#&amp;gt; The random part estimates at the student level: 
#&amp;gt;                   Coef.   Std. Err. 
#&amp;gt; var_Intercept   0.98454     0.02185 
#&amp;gt; -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see the output is in several sections. The first section tells us about how &lt;code&gt;mlnscript&lt;/code&gt;, which estimation algorithm it used, hwo long it took to fit the model, and some characteristics of the dataset. The second section tells us about the model, in this case a random intercept model. The third section is the fixed effect estimates and the associated statistical inference for them. The fourth section is the random effect variance estimates.&lt;/p&gt;
&lt;p&gt;And we can continue with our multilevel modelling as we like.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Despite having &lt;em&gt;Win&lt;/em&gt; in its name, MLwiN is available as a command line program, &lt;code&gt;mlnscript&lt;/code&gt;, which is available on operating systems other than Windows (and indeed with other architectures), including macOS for both Intel and Apple Silicon processors and various Linux and Unix distributions (CentOS, Debian, Fedora, FreeBSD, Rocky, and Ubuntu). This is straightforward to use from R via the &lt;strong&gt;R2MLwiN&lt;/strong&gt; package.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34; entry-spacing=&#34;0&#34;&gt;
&lt;div id=&#34;ref-mlwin&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Charlton, C., J. Rasbash, W. J. Browne, M. Healy, and B. Cameron. 2024. &lt;em&gt;MLwiN Version 3.10&lt;/em&gt;. Bristol, UK: Centre for Multilevel Modelling, University of Bristol. 
&lt;a href=&#34;https://www.bristol.ac.uk/cmm/software/mlwin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bristol.ac.uk/cmm/software/mlwin/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-r2mlwin&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Zhang, Z., R. M. A. Parker, C. M. J. Charlton, G. Leckie, and W. J. Browne. 2016. “R2MLwiN: A Package to Run MLwiN from Within R.” &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 72 (10): 1–43. 
&lt;a href=&#34;https://doi.org/10.18637/jss.v072.i10&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.18637/jss.v072.i10&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This post is essentially a more detailed explanation of the advice given on the MLwiN website, 
&lt;a href=&#34;https://www.bristol.ac.uk/cmm/software/support/support-faqs/commands-macros.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and 
&lt;a href=&#34;https://www.bristol.ac.uk/cmm/software/mlwin/features/sysreq.html#unix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating a simple Automator app to launch a new instance of RStudio Desktop on macOS</title>
      <link>https://remlapmot.github.io/post/2024/macos-rstudio-another/</link>
      <pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2024/macos-rstudio-another/</guid>
      <description>&lt;h2 id=&#34;introduction-how-to-open-a-second-instance-of-rstudio-desktop-on-macos&#34;&gt;Introduction: how to open a second instance of RStudio Desktop on macOS&lt;/h2&gt;
&lt;p&gt;On macOS when RStudio Desktop is open it can be inconvenient to open a second (or third or fourth) instance of it.&lt;/p&gt;
&lt;p&gt;If you left click the RStudio Desktop icon nothing happens. If you right click on the RStudio Desktop icon there is a convenient &lt;em&gt;New RStudio Window&lt;/em&gt;. The problem with this is that by default if you have an RStudio project open the new RStudio window is also opened in that project. However, that can be overcome by opening the RStudio preference pane and in the first tab (&lt;em&gt;General&lt;/em&gt; | &lt;em&gt;Basic&lt;/em&gt;) deselecting the boxes relating to &lt;em&gt;Restore most recently opened project at startup&lt;/em&gt; and &lt;em&gt;Restore previousy open source documents at startup&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/img/rstudio-preference-pane.png&#34; alt=&#34;Screenshot of RStudio Desktop preference pane.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/img/new-rstudio-window.png&#34; alt=&#34;Screenshot of right clicking on the RStudio Desktop icon in the dock.&#34; width=&#34;504&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Alternatively, within RStudio Desktop we could select &lt;em&gt;File | Open Project&amp;hellip;&lt;/em&gt; but I&amp;rsquo;ve never found that very intuitive and somehow I&amp;rsquo;ve never got used to using RStudio&amp;rsquo;s command palette.
If you have several directories configured as RStudio projects (with &lt;em&gt;.Rproj&lt;/em&gt; files) that you&amp;rsquo;ve opened before you could open those from the top right project drop down menu or double click them from within Finder.&lt;/p&gt;
&lt;p&gt;But let&amp;rsquo;s say we want an even more convenient way of doing this &amp;ndash; an icon in the dock. Thanks to 
&lt;a href=&#34;https://stackoverflow.com/a/40673644&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; Stackoverflow answer, it turns out that in a terminal we can issue the following &lt;code&gt;open&lt;/code&gt; command to achieve opening a new instance of RStudio Desktop (note RStudio Desktop needs to be installed in your Applications directory for this to work).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;open -n -a RStudio.app
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;making-an-automator-app-to-open-a-new-instance-of-rstudio-desktop&#34;&gt;Making an Automator app to open a new instance of RStudio Desktop&lt;/h2&gt;
&lt;p&gt;macOS comes with Automator, open that from your Applications directory.
Then select &lt;em&gt;File | New&lt;/em&gt; and select &lt;em&gt;Application&lt;/em&gt; and click &lt;em&gt;Choose&lt;/em&gt;.
Then from the left most menu select &lt;em&gt;Utilities&lt;/em&gt; and double click &lt;em&gt;Run Shell Script&lt;/em&gt;.
In the main window on the right, leave the shell as zsh and replace the &lt;code&gt;cat&lt;/code&gt; text in the box with the &lt;code&gt;open&lt;/code&gt; command above.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/img/automator-app.png&#34; alt=&#34;Screenshot of configuring the automator app to run a shell script to open a new instance of RStudio Desktop.&#34; width=&#34;992&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;Then press &lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt; or &lt;em&gt;File | Save&lt;/em&gt; and save your application in your Applications folder.
Give the app a distinct name such as &lt;em&gt;RStudio-new-instance.app&lt;/em&gt; or whatever you prefer and then quit Automator.&lt;/p&gt;
&lt;p&gt;Next we would like our app to have a nice icon.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First download a nice icon from say 
&lt;a href=&#34;https://github.com/amirmasoudabdol/rstudio-icons/tree/main/Icons/macOS/Rectangle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; repo of logos kindly designed for RStudio (I chose the dark one).&lt;/li&gt;
&lt;li&gt;Then navigate to the our new app in Finder and press &lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;I&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;Then drag the &lt;em&gt;.icns&lt;/em&gt; file onto the icon in the top left corner of the info box.
And tada your app will now use this icon!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you can even drag the app from Finder onto your dock from where you can simply click the icon to open as many instances of RStudio Desktop as you like.&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/featured.png&#34; alt=&#34;Screenshot of our new app&#39;s icon in the dock.&#34; width=&#34;319&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;p&gt;And because the new application is in our Applications directory it is found by Alfred (and hopefully Raycast).&lt;/p&gt;
&lt;img src=&#34;https://remlapmot.github.io/post/2024/macos-rstudio-another/img/alfred-launch-rstudio.png&#34; alt=&#34;Screenshot of using Alfred to launch RStudio Desktop.&#34; width=&#34;719&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have created an Automator application which runs a shell script to open a new instance of RStudio Desktop. We have then given this application a new icon and we have placed this on our dock.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I follow the approach detailed on 
&lt;a href=&#34;https://www.idownloadblog.com/2023/01/19/how-to-change-app-icons-mac/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; blog and on the 
&lt;a href=&#34;https://github.com/amirmasoudabdol/rstudio-icons/tree/main?tab=readme-ov-file#usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;README&lt;/a&gt; where I obtained the icon.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
