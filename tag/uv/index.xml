<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uv | Dr Tom Palmer</title>
    <link>https://remlapmot.github.io/tag/uv/</link>
      <atom:link href="https://remlapmot.github.io/tag/uv/index.xml" rel="self" type="application/rss+xml" />
    <description>uv</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 02 Sep 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://remlapmot.github.io/images/icon_hu_72d72b3c768972db.png</url>
      <title>uv</title>
      <link>https://remlapmot.github.io/tag/uv/</link>
    </image>
    
    <item>
      <title>Creating self-contained executable Python scripts for rendering Quarto documents using the Jupyter engine</title>
      <link>https://remlapmot.github.io/post/2025/self-contained-python-script-for-quarto/</link>
      <pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/self-contained-python-script-for-quarto/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In previous posts I have covered creating 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/multi-engine-quarto/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;effectively multi-engine Quarto documents&lt;/a&gt; and also how to use 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/nbstata-uv-venv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;uv virtual environments for the nbstata Jupyter kernel&lt;/a&gt; to run Quarto documents with Stata code. Hence by trivial extension we can use &lt;code&gt;uv&lt;/code&gt; to manage the virutal environments for running Quarto documents using the &lt;code&gt;jupyter: python3&lt;/code&gt; engine.&lt;/p&gt;
&lt;p&gt;The slight inconvenience about this approach when you are working on a collaborative project with new Python users is that you end up leaving a README or shell script with the required commands to activate the environment, install the nbstata kernel, and run Quarto. I sense this management of the virutal environment is a pain point for new Python users - who are likely wondering what on earth a virtual environment is. So I have been looking for a way to simplify this process for them.&lt;/p&gt;
&lt;p&gt;A recent 
&lt;a href=&#34;https://www.rostrum.blog/posts/2025-08-11-uv-standalone/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post by Matt Dray&lt;/a&gt; about using uv to run self-contained executable Python scripts got me thinking. Could I produce a similar self-contained executable Python script to perform the rendering for Quarto documents using the Jupyter engine. Then my colleagues would only need to call the script as an executable at the command line. This would avoid them the trouble of managing the virtual environment.&lt;/p&gt;
&lt;h2 id=&#34;the-self-contained-executable-python-script&#34;&gt;The self-contained executable Python script&lt;/h2&gt;
&lt;p&gt;I came up with the following Python script.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env -S uv run --script
# /// script
# requires-python = &amp;quot;&amp;gt;=3.9&amp;quot;
# dependencies = [
#     &amp;quot;jupyterlab&amp;gt;=4.4.3&amp;quot;,
#     &amp;quot;jupyterlab-stata-highlight2&amp;gt;=0.1.2&amp;quot;,
#     &amp;quot;nbstata&amp;gt;=0.8.3&amp;quot;,
# ]
# ///
import subprocess

cmd0 = &amp;quot;python -m nbstata.install --sys-prefix&amp;quot;
retval0 = subprocess.call(cmd0, shell=True)
print(&#39;returned value:&#39;, retval0)

cmd1  = &amp;quot;quarto render --profile stata-questions&amp;quot;
retval1 = subprocess.call(cmd1, shell=True)
print(&#39;returned value:&#39;, retval1)

cmd2  = &amp;quot;quarto render --profile stata-solutions&amp;quot;
retval2 = subprocess.call(cmd2, shell=True)
print(&#39;returned value:&#39;, retval2)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first line, the shebang ensures it is run by &lt;code&gt;uv run&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The metadata defining the Python environment is declared between the&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# /// script
# ...
# ///
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If you don&amp;rsquo;t use Stata, say you are using the &lt;code&gt;jupyter: python3&lt;/code&gt; engine then you can delete the &lt;code&gt;jupyterlab-stata-highlight2&lt;/code&gt; and &lt;code&gt;nbstata&lt;/code&gt; entries and the first group of 3 lines for &lt;code&gt;cmd0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you use additional Python packages in your code then you need to add them to the list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then comes the actual code. These are simply system calls using the &lt;em&gt;subprocess&lt;/em&gt; module. You can amend the number of calls and the calls themselves inside the string quotes as required. I am recreating some of the rendering commands in my recent 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/quarto-profiles-for-tutorials/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post about using Quarto profiles for tutorial documents&lt;/a&gt;. It&amp;rsquo;s worth pointing out that I haven&amp;rsquo;t used the Python quarto package here as it&amp;rsquo;s currently slightly too limited for my use (I&amp;rsquo;m not sure it can render profiles).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Save the script in a file, say &lt;em&gt;render&lt;/em&gt;, then make it executable with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chmod +x render
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then all my colleagues need to do is run it with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./render
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course uv and Quarto need to be installed and be on their &lt;code&gt;PATH&lt;/code&gt;, and Stata needs to be installed locally when using that. For my colleagues using Windows, they need to run this from a Git Bash shell rather than from Powershell or CMD shell (for the shebang line to work).&lt;/p&gt;
&lt;p&gt;If you are only using the Quarto knitr engine then you don&amp;rsquo;t need this script because you don&amp;rsquo;t need Jupyter.&lt;/p&gt;
&lt;p&gt;And for more information about uv Python scripts, the full documentation is 
&lt;a href=&#34;https://docs.astral.sh/uv/guides/scripts/#creating-a-python-script&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to make a self-contained executable Python script to render Quarto documents using the Jupyter engine which automatically manage their own virtual environment. This means users don&amp;rsquo;t have to manage the virtual environment themselves, which can be a pain point for new Python users.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running the nbstata Jupyter kernel within a uv virtual environment</title>
      <link>https://remlapmot.github.io/post/2025/nbstata-uv-venv/</link>
      <pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://remlapmot.github.io/post/2025/nbstata-uv-venv/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Any new project using Python or Jupyter is very stongly recommended to use a virtual environment. A virtual environment is a directory (usually at the top level; often called either &lt;em&gt;.venv&lt;/em&gt; or &lt;em&gt;venv&lt;/em&gt;) within your project directory which contains the dependency Python packages and perhaps the Python installation (or pointers to the Python installation on your system).&lt;/p&gt;
&lt;p&gt;There are many Python project managers, in this post I will use the new and extremely fast project manager 
&lt;a href=&#34;https://docs.astral.sh/uv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;uv&lt;/a&gt;. I will show how to use the 
&lt;a href=&#34;https://hugetim.github.io/nbstata/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nbstata&lt;/a&gt; Jupyter kernel by Tim Huegerich within a uv virtual environment on macOS, Windows, and Linux. The aim is to be able to conveniently and reproducibly render Quarto documents using the 
&lt;a href=&#34;https://hugetim.github.io/nbstata/user_guide.html#quarto-tips&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;jupyter: nbstata&lt;/code&gt;&lt;/a&gt; engine from within the virtual environment.&lt;/p&gt;
&lt;p&gt;At this point it&amp;rsquo;s worth saying that I am a contributor to the excellent 
&lt;a href=&#34;https://cran.r-project.org/package=Statamarkdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Statamarkdown&lt;/a&gt; R package by Doug Hemken. This can be used in Quarto documents using the knitr engine. In this post I&amp;rsquo;ll be using nbstata because nbstata uses 
&lt;a href=&#34;https://www.stata.com/python/pystata/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pystata&lt;/a&gt; which is StataCorp&amp;rsquo;s official Python package (included in each Stata installation) and is their official way of integrating Stata in Python. As such pystata and hence nbstata have more features than Statamarkdown can provide.&lt;/p&gt;
&lt;p&gt;And it is worth emphasizing how useful virtual environments are because it is very easy to get oneself in a complete mess with regards Python, as you will likely end up with many different versions installed. Chaos can then accidentally ensue regarding which versions of dependency packages your different projects require given a certain Python version, as always XKCD have a comic illustrating the problem.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://imgs.xkcd.com/comics/python_environment.png&#34; alt=&#34;XKCD 1987, a diagram showing the chaos of not using Python virtual environments.&#34; width=&#34;630&#34; style=&#34;display: block; margin: auto;&#34;&gt;
&lt;figcaption&gt;XKCD 1987, Python Environment. &lt;a href=&#34;https://xkcd.com/license.html&#34;&gt;XKCD license&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;setup-basics&#34;&gt;Setup basics&lt;/h2&gt;
&lt;p&gt;On your machine you need to have&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stata installed and know the location of the installation
&lt;ul&gt;
&lt;li&gt;and check that within the installation there is the &lt;em&gt;utilities&lt;/em&gt; directory containing the &lt;em&gt;pystata&lt;/em&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;uv must be installed, see 
&lt;a href=&#34;https://docs.astral.sh/uv/getting-started/installation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;its docs for installation instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;to render Quarto documents you need 
&lt;a href=&#34;https://quarto.org/docs/get-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quarto installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and of course a text editor and a terminal.&lt;/li&gt;
&lt;li&gt;On Windows I would recommend using Git Bash as your shell (this is bundled with 
&lt;a href=&#34;https://git-scm.com/downloads/win&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git for Windows&lt;/a&gt;) for running the setup script in the next section.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-shell-script-to-setup-the-uv-virtual-environment&#34;&gt;A shell script to setup the uv virtual environment&lt;/h2&gt;
&lt;p&gt;What follows are the shell commands we need to run to setup our virtual environment. The script is for macOS but I have included comments in the places where amendments are required for either Windows or Linux. I have also included this script 
&lt;a href=&#34;https://github.com/remlapmot/nbstata-uv-setup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in a repository&lt;/a&gt; (in fact I have included a script per operating system).&lt;/p&gt;
&lt;p&gt;Note that currently on macOS and Linux there cannot be any spaces in the filepath to your virtual environment. And you might need to amend some of the paths, say if you have a different version of Stata or if it&amp;rsquo;s installation location is different.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Linux we need to ensure that the directory containing our stata/stata-mp binary is on &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# export PATH=$PATH:/usr/local/stata18
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;We then need to ensure that our Python installation will be able to find the pystata package. We can do this by defining the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Required so Python can find pystata package
export PYTHONPATH=/Applications/Stata/utilities
# Linux: export PYTHONPATH=/usr/local/stata18/utilities
# Windows: export PYTHONPATH=&amp;quot;C:/Program Files/Stata18/utilities&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;We then setup the virtual environment. This will create a directory in our project called &lt;em&gt;.venv&lt;/em&gt;. I prefer to explicitly set the version of Python I am using.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv venv --python 3.13
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;We then activate the virtual environment&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source .venv/bin/activate
# Windows: source .venv/Scripts/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Now we can install the required Python dependency packages as per the 
&lt;a href=&#34;https://hugetim.github.io/nbstata/user_guide.html#install-nbstata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nbstata docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install nbstata dependency Python packages
uv pip install jupyterlab nbstata jupyterlab_stata_highlight2

# Additional Python packages if using parameterised Quarto documents
# uv pip install papermill python-dotenv jupyter-cache
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Then we setup the nbstata Jupyter kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m nbstata.install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nbstata docs states that the &lt;code&gt;--sys-prefix&lt;/code&gt; flag may be required in a virutal environment but I haven&amp;rsquo;t found that to be the case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Then we run commands to do our actual work; for example rendering a Quarto document using the &lt;code&gt;jupyter: nbstata&lt;/code&gt; engine. An example Quarto document, say &lt;em&gt;index.qmd&lt;/em&gt;, could be:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;---
title: My example nbstata document
jupyter: nbstata
---

```{stata}
display &amp;quot;Hello, World!&amp;quot;
```
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;quarto render index.qmd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that Quarto documents using the nbstata kernel can also be embedded within other Quarto documents, 
&lt;a href=&#34;https://remlapmot.github.io/post/2025/multi-engine-quarto/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;as I have described in a previous post&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;And that&amp;rsquo;s it. When you have finished your work you can deactivate the virtual environment&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;recording-this-as-a-project-with-pyprojecttoml-and-uvlock-files&#34;&gt;Recording this as a project with pyproject.toml and uv.lock files&lt;/h2&gt;
&lt;p&gt;And of course we can go a step further by setting this up as a proper Python project. This will have a &lt;em&gt;pyproject.toml&lt;/em&gt; file to record the dependencies and a &lt;em&gt;uv.lock&lt;/em&gt; file to record their exact versions. To do this run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can delete the &lt;em&gt;main.py&lt;/em&gt; file that&amp;rsquo;s created here, but commit everything else into your repo. Then add the dependencies with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv add jupyterlab nbstata jupyterlab_stata_highlight2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will see these are entered into the &lt;em&gt;pyproject.toml&lt;/em&gt; and &lt;em&gt;uv.lock&lt;/em&gt; files. The &lt;em&gt;pyproject.toml&lt;/em&gt; file will now look something like this (I have edited the &lt;code&gt;description&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[project]
name = &amp;quot;nbstata-uv-setup&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
description = &amp;quot;This project demonstrates how to use the nbstata Jupyter kernel in a uv virtual environment, so that one can render Quarto documents using this engine.&amp;quot;
readme = &amp;quot;README.md&amp;quot;
requires-python = &amp;quot;&amp;gt;=3.13&amp;quot;
dependencies = [
    &amp;quot;jupyterlab&amp;gt;=4.4.2&amp;quot;,
    &amp;quot;jupyterlab-stata-highlight2&amp;gt;=0.1.2&amp;quot;,
    &amp;quot;nbstata&amp;gt;=0.8.2&amp;quot;,
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commit these files into your repo.&lt;/p&gt;
&lt;p&gt;At a later date you can restore this environment by running&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv sync
# which creates the .venv
# Then activate the virtual environment, etc
source .venv/bin/activate
# Windows: source .venv/Scripts/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You find out more about uv project commands in its 
&lt;a href=&#34;https://docs.astral.sh/uv/guides/projects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have shown how to setup and run the nbstata Jupyter kernel within a uv virtual environment on macOS, Windows, and Linux; in order to conveniently and reproducibly render Quarto documents using the &lt;code&gt;jupyter: nbstata&lt;/code&gt; engine. And I have also shown how to set this up as a Python project.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
